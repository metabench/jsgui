(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number') {
    length = +subject
  } else if (type === 'string') {
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length
  } else {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  if (length < 0)
    length = 0
  else
    length >>>= 0 // Coerce to uint32.

  var self = this
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    /*eslint-disable consistent-this */
    self = Buffer._augment(new Uint8Array(length))
    /*eslint-enable consistent-this */
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    self.length = length
    self._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    self._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        self[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        self[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    self.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      self[i] = 0
    }
  }

  if (length > 0 && length <= Buffer.poolSize)
    self.parent = rootParent

  return self
}

function SlowBuffer (subject, encoding, noZero) {
  if (!(this instanceof SlowBuffer))
    return new SlowBuffer(subject, encoding, noZero)

  var buf = new Buffer(subject, encoding, noZero)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  if (a === b) return 0

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0

  if (length < 0 || offset < 0 || offset > this.length)
    throw new RangeError('attempt to write outside buffer bounds')

  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length)
    newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100))
    val += this[offset + i] * mul

  return val
}

Buffer.prototype.readUIntBE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100))
    val += this[offset + --byteLength] * mul

  return val
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readIntLE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100))
    val += this[offset + i] * mul
  mul *= 0x80

  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100))
    val += this[offset + --i] * mul
  mul *= 0x80

  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100))
    this[offset + i] = (value / mul) >>> 0 & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100))
    this[offset + i] = (value / mul) >>> 0 & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeIntLE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(this,
             value,
             offset,
             byteLength,
             Math.pow(2, 8 * byteLength - 1) - 1,
             -Math.pow(2, 8 * byteLength - 1))
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100))
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(this,
             value,
             offset,
             byteLength,
             Math.pow(2, 8 * byteLength - 1) - 1,
             -Math.pow(2, 8 * byteLength - 1))
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100))
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var self = this // source

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (target_start >= target.length) target_start = target.length
  if (!target_start) target_start = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || self.length === 0) return 0

  // Fatal error conditions
  if (target_start < 0)
    throw new RangeError('targetStart out of bounds')
  if (start < 0 || start >= self.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":3,"ieee754":4,"is-array":5}],3:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],4:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],5:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],6:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],7:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],8:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],9:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],10:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":11}],11:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))

},{"./_stream_readable":13,"./_stream_writable":15,"_process":9,"core-util-is":16,"inherits":7}],12:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":14,"core-util-is":16,"inherits":7}],13:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))

},{"./_stream_duplex":11,"_process":9,"buffer":2,"core-util-is":16,"events":6,"inherits":7,"isarray":8,"stream":21,"string_decoder/":22,"util":1}],14:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":11,"core-util-is":16,"inherits":7}],15:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))

},{"./_stream_duplex":11,"_process":9,"buffer":2,"core-util-is":16,"inherits":7,"stream":21}],16:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)

},{"buffer":2}],17:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":12}],18:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":11,"./lib/_stream_passthrough.js":12,"./lib/_stream_readable.js":13,"./lib/_stream_transform.js":14,"./lib/_stream_writable.js":15,"stream":21}],19:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":14}],20:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":15}],21:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":6,"inherits":7,"readable-stream/duplex.js":10,"readable-stream/passthrough.js":17,"readable-stream/readable.js":18,"readable-stream/transform.js":19,"readable-stream/writable.js":20}],22:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":2}],23:[function(require,module,exports){

var jsgui = require('../../../js/web/jsgui-html-client');
var Client_Page_Context = require('../../../js/web/client-page-context');
//var Web_Admin = require('../../../../js/web/controls/advanced/web-admin');
//var Web_Admin_Images = require('../../../../js/web/controls/advanced/web-admin-images');
//var Web_Admin_Flexidocs = require('../../../../js/web/controls/advanced/web-admin-flexidocs');
//var Flexidoc_Editor = require('../../../../js/web/controls/advanced/flexidoc-editor');
//var Flexidoc_Editor_Main = require('../../../../js/web/controls/advanced/flexidoc-editor-main');
//var Flexidoc_Container = require('../../../../js/web/controls/advanced/flexidoc-container');
//var Flexidoc_Component_Text = require('../../../../js/web/controls/advanced/flexidoc-component-text');
//var Flexidoc_Component_Image = require('../../../../js/web/controls/advanced/flexidoc-component-image');

var Panel = require('../../../js/web/controls/advanced/panel');
var Titled_Panel = require('../../../js/web/controls/advanced/titled-panel');
var List = require('../../../js/web/controls/advanced/list');
var Window = require('../../../js/web/controls/advanced/window');
var Horizontal_Menu = require('../../../js/web/controls/advanced/horizontal-menu');

var Button = require('../../../js/web/controls/advanced/button');
var Multi_Layout_Mode = require('../../../js/web/controls/advanced/multi-layout-mode');
var Menu_Node = require('../../../js/web/controls/advanced/menu-node');


var Object_KVP_Editor = require('../../../js/web/controls/advanced/editor/object-kvp');
var String_Editor = require('../../../js/web/controls/advanced/editor/basic/string');
var Number_Editor = require('../../../js/web/controls/advanced/editor/basic/number');

var Up_Down_Arrow_Buttons = require('../../../js/web/controls/advanced/editor/basic/up-down-arrow-buttons');

var Default_Page = require('./default-page');

var each = jsgui.each, stringify = jsgui.stringify;

var pc = new Client_Page_Context({
    'document': document
});

pc.update_Controls('panel', Panel);
pc.update_Controls('titled_panel', Titled_Panel);
pc.update_Controls('list', List);
pc.update_Controls('button', Button);
pc.update_Controls('multi_layout_mode', Multi_Layout_Mode);
pc.update_Controls('object_kvp_editor', Object_KVP_Editor);
pc.update_Controls('string_editor', String_Editor);
pc.update_Controls('number_editor', Number_Editor);
pc.update_Controls('up_down_arrow_buttons', Up_Down_Arrow_Buttons);
pc.update_Controls('window', Window);
pc.update_Controls('horizontal_menu', Horizontal_Menu);
pc.update_Controls('menu_node', Menu_Node);
pc.update_Controls('default_page', Default_Page);




window.onload = function() {
    // Let's show the omega Ω
    console.log('pre activate');

    var sock = new SockJS('/ws');

    sock.onopen = function() {
       console.log('open');
    };
    sock.onmessage = function(e) {
       console.log('message', e.data);
    };
    sock.onclose = function() {
       console.log('close');
    };

    //sock.send('test');

    jsgui.activate(pc);
}

},{"../../../js/web/client-page-context":44,"../../../js/web/controls/advanced/button":45,"../../../js/web/controls/advanced/editor/basic/number":48,"../../../js/web/controls/advanced/editor/basic/string":49,"../../../js/web/controls/advanced/editor/basic/up-down-arrow-buttons":50,"../../../js/web/controls/advanced/editor/object-kvp":52,"../../../js/web/controls/advanced/horizontal-menu":54,"../../../js/web/controls/advanced/list":56,"../../../js/web/controls/advanced/menu-node":57,"../../../js/web/controls/advanced/multi-layout-mode":58,"../../../js/web/controls/advanced/panel":59,"../../../js/web/controls/advanced/titled-panel":61,"../../../js/web/controls/advanced/window":68,"../../../js/web/jsgui-html-client":69,"./default-page":24}],24:[function(require,module,exports){
/**
 * Created by James on 05/06/2015.
 */


var jsgui = require('../../../js/web/jsgui-html-enh');
var Window = require('../../../js/web/controls/advanced/window');
var Control = jsgui.Control;
var stringify = jsgui.stringify;

//var File_Manager = require('../../ws/js/web/controls/advanced/file-manager').File_Manager;
//var Server_Page_Context = require("../../../js/web/server-page-context");

var Default_Page = jsgui.Client_HTML_Document.extend({


    'init': function(spec) {
        this._super(spec);
        this.__type_name = 'default_page';
        var that = this;
        // spec will have a filesystem_resource property.



        var context = this._context;
        context.ctrl_document = this;

        if (!spec.el) {
            var body = this.get('body');

            //var body = hd.body();




            // Need to set various styles on the server.
            //  Maybe have a class called Demo_Block

            // Also, with jsgui style, could refer to .border.radius

            // Just make a window with a menu
            //  Want to get context menus working too.

            // Perhaps we could have a control called 'Desktop' that contains windows?
            //  Or it's a Multi-Window Container?
            //  Just a Window Container? Window Context?


            var ctrl_0 = new Window({
                'context': context
            });
            ctrl_0.resizable();
            ctrl_0.active();

            // style should at least set the CSS.
            //

            ctrl_0.style('background-color', '#DDDDDD');
            ctrl_0.style('width', '800px');
            ctrl_0.style('height', '600px');



            // Would be nice to be able to set up a menu with some simple JSON like this.


            ctrl_0.menu({
                'file': ['New', 'Open', 'Save', 'Exit'],
                'edit': ['Select All', 'Copy', 'Paste', 'Cut', 'Undo']
            });

            // Should show a server status
            //  It would be nice if the client uses a websocket connection to stay connected to the server.

            // Want to possibly be getting frequent status info

            // Should get the server info on the server.
            //  Then most likely that server info is shared with websockets.

            // Want to get it broadcasting server status info to its clients.


            body.add(ctrl_0);

            this.active();


        }
    },
    'activate': function() {
        this._super();
        console.log('activate Default_Page control');




    }
});
module.exports = Default_Page;
/*
 return Default_Page;

 });

 */

},{"../../../js/web/controls/advanced/window":68,"../../../js/web/jsgui-html-enh":71}],25:[function(require,module,exports){
/*

if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(["./jsgui-lang-essentials", "./jsgui-data-structures", "./data-object", "./constraint"], function(jsgui, Data_Structures, Data_Object, Constraint) {

*/

var jsgui = require('./jsgui-lang-essentials');
var Data_Structures = require('./jsgui-data-structures');
var Data_Object = require('./data-object');
var Constraint = require('./constraint');

	// Collection... use sligntly more than essentials?
	// Likely to use the Data_Object class here.
	
	// Don't want this stuff growing much more in size
	//  There will be more features, should add them sparingly
	//   Maybe a more advanced layer... really for the server side or the most in-depth applications.
	//   Will want some kind of later loading, the later loading system in the core layer.
	
	// Don't think this needs much more code at the moment.
	//  It's got fairly large.
	//  It should be a very useful part of the system.
	
	// Global collection reference...
	//  want it so that a collection can reference another collection, so that every item gets put into this collection
	//   also gets put into the global collection. Will check unique conflicts as well... but the global collection could have different things to index on
	
	// Restricting objects in collection by data type.
	
	// Collection can operate a lot like a normal object anyway now. It can hold objects indexed by name, just like a normal map.
	//  However, the name property is now intrinsic to that object as well as something that gets indexed.
	
	// Need to deal with attached fields, like this:
	// {'attached': {'meta': 'name'}}

	var j = jsgui;
	var Class = j.Class;
	var each = j.each;
	var is_array = j.is_array;
	var is_dom_node = j.is_dom_node;
	var is_ctrl = j.is_ctrl;
	var extend = j.extend;
	var clone = j.clone;
	var x_clones = j.x_clones;
	var get_truth_map_from_arr = j.get_truth_map_from_arr;
	var get_map_from_arr = j.get_map_from_arr;
	var arr_like_to_arr = j.arr_like_to_arr;
	var tof = j.tof;
	var is_defined = j.is_defined;
	var stringify = j.stringify;
	var functional_polymorphism = j.functional_polymorphism;
	var fp = j.fp;
	var arrayify = j.arrayify;
	var mapify = j.mapify;
	var are_equal = j.are_equal;
	var get_item_sig = j.get_item_sig;
	var set_vals = j.set_vals;
	var truth = j.truth;
	var trim_sig_brackets = j.trim_sig_brackets;
	var iterate_ancestor_classes = j.iterate_ancestor_classes;
	var is_constructor_fn = j.is_constructor_fn;
	
	var is_arr_of_strs = j.is_arr_of_strs;
	var is_arr_of_arrs = j.is_arr_of_arrs;
	 
	var Sorted_KVS = Data_Structures.Sorted_KVS;
	var dobj = Data_Object.dobj;
	
	var input_processors = j.input_processors;
	var Data_Value = Data_Object.Data_Value;
	
	
	var constraint_from_obj = Constraint.from_obj;
	var native_constructor_tof = jsgui.native_constructor_tof;
	// Definitiely will help the website to power quite a few things.
	//  Having a really nice website of my own will definitely help.
	
	// Will have examples in different categories, such as data tools
	//  May make some kind of database available and viewable in a read-only form, then this would be usable for queries that are done by the users of my system.
	//  This would be good for demonstrating some front-end visualization code.
	
	// Will be nice to allow users / subscribers to manage some of their own data.
	
	
	// Upgrade to the Data_Object set_field...
	//  Will be able to process array of constructor function, meaning a collection of that type.
	
	var Collection_Index = Class.extend({
		'init' : function(spec) {
			// Could do some initialization here?
			//console.log('init Collection_Index');
			//console.log('spec.fields ' + stringify(spec.fields));
			if (is_defined(spec.fields)) {
				this.fields = spec.fields;
				
				// and if it is an array, save an alphabetically ordered copy.
				
				if (tof(spec.fields) == 'array') {
					// Not sure we can sort object fields by name like this?
					//  It seems to work?

                    // Fields in alphabetic order...
                    //  However, there will be the capability for nested fields, and intrinsic property references.



					this.alphabetic_fields = clone(spec.fields).sort();
				}

				// the fields held by the Collection_Index.
				//  some fields may represent fields on attached items.
				//   looks like there won't be anything to do on this simple field assignment?



				// this index will be quicker for matching.
			}
			
			this.__type = 'collection_index';
			
		},
		'add_object' : function(obj) {
			var tobj = tof(obj);

			//console.log('add_object Collection_Index');
			//console.log('***** tobj ' + tobj);

			if (tobj == 'array') {

				// check that all of the items can be added before adding any of
				// them???
				// or better to add them sequentially, because there could be
				// conflicts within the items themselves.
				// though, could check that first, but makes the code more
				// complex.
				// could do this by creating a parallel index with the same
				// properties, and have that load the data first.
				var that = this;
				each(obj, function(i, v) {
					that.add_object(v);
				});

			} else if (tobj == 'data_object') {
				//console.log('adding data_object');

				// chack if we can add it.

				//if (this.can_add_object(obj)) {
				// not doing uniqueness checking here.
				
					this.unsafe_add_object(obj);
				//}

				// then need to add the thing!

			}

		}

	// add_object
	// remove_object
	// iterate through objects...
	// default could be an array?
	// ?? get_object(key)

	// Index the whole collection... used when the index is created.

	// get_object(key, key)
	// get_object([keys])

	});

	// Ordered_Dict?

	var BPD_Collection_Index = Collection_Index.extend({
		'init' : function(spec) {
			// indexed with both the b+ tree and the dict.

		}
	})

	// Ordered collection index

	// Dict collection index

	// Ordered_Dict collection index - has both ordered and dict capabilities.
	// More space required, faster get operations through the dict.

	// Full_Text collection index?
	// This will be the most complicated to do. Would make data structures like
	// the Trie.
	// Could have that pluggable for more advanced data structures.

	// Dict, Ordered, and Full_Text seem like good index types.
	// Not saying how Ordered and Full_Text will be implemented.
	// Is it possible / easy for an index to be both full-text and ordered?

	// Could possibly even rate time complexity for each operation.
	// So program could even determine - we have 30,000 records, better download
	// a more efficient index.

	// Dict as the default index?

	// have dict_index(property_name) function?
	// sets up the index. di(pn, false) could remove it.

	// Seems good to separate these things out a lot.
	// Having it so that the index engines could get upgraded.

	// Would be worth approaching this in a very modular way, so that the data
	// structures could all be tested and optimized separately.
	// Swapped as well, as more advanced ones get written.

	//var index_key_separator = '*.oOo.*';
	
	var index_key_separator = ',';
	//  comma should work OK? Maybe not when reading out the values and knowing what they are from the key,
	//  but should be fine for comparisons and ordering
	
	// The trouble is, this could get written about!
	// Is there a way around using such a separator?
	// Not sure about more dict indexes at each level.
	// May not be a problem because we will be searching in the right indexes
	// anyway.

	// Attached fields... these will get indexed too.
	//  However, we won't have that much of an interface or abstraction for dealing with attached objects.
	//  They are simple object[attachmentName].

	// So in a collection, we want to be able to index attached fields.
	//  When querying them, we need to use a notation that indicated we are querying attached fields.
	//   It seems like they should be in the same index structure though.

	// Perhaps need to extend the indexes a bit to cover attached fields specifically in some places.

	// More thought about attached fields seems important.






	var Ordered_Collection_Index = Collection_Index.extend({
		'init': function(spec) {
			this._super(spec);
			// which field(s) get indexed?
			//this.fields = spec.fields;
			this.index_type = 'ordered';

		}

	// this will probably refer to the B+ implementation. need to wrap it
	// concisely.

	})

	// not so sure about this fn.
	var get_fields_key = function(fields) {
		var tf = tof(fields);
		if (tf == 'array') {
			return fields.join(index_key_separator);
		} else if (tf == 'string') {
			return fields;
		}
	}

    // We maybe need tests to do with adding Data_Objects to Collections, and seeing that they are automatically indexed.
    //  Currently having a problem accessing an Abstract Postgres Table through the Collection of tables.

    // Some unit tests to cover similar cases would help.

	var get_obj_fields_key = function(obj, fields) {
        //console.log('');
		//console.log('get_obj_fields_key');

		//var stack = new Error().stack
		//console.log( stack )

        //console.log('get_obj_fields_key obj', obj);
        //console.log('get_obj_fields_key stringify obj', stringify(obj));
        //console.log('tof obj', tof(obj));

		var tFields = tof(fields);

        //console.log('fields ' + stringify(fields));
		//console.log('tFields ' + tFields);

        // An attached field?
        //  So it's one object attached to another.

        //throw 'stop';
		if (tFields == 'string') {
			fields = [fields];
		}
		
		// var first = true;
		var arr_res = [];
		each(fields, function(i, field_definition) {

			// may check if it is a string or can be stringified.
			// maybe should call functions to get a string result too.

			// maybe will look at obj._ for the field value.
			// or use the get function.
			
			//console.log('field_name ' + stringify(field_name));


			var tFieldDef = tof(field_definition);
            //console.log('tFieldDef', tFieldDef);
			
			if (tFieldDef == 'array') {
				

				// gets more complicated with the array.
				//  commas will do fine for now.
				
				//var res = field_name.join(',');
				//console.log('res ' + res);
				//arr_res.push('[' + field_name.join(', ') + ']');
				//return res;
				arr_res.push(stringify(field_definition));
				
			} else if (tFieldDef == 'string') {

				// But for objects, we are getting potentially attached field values.




				//console.log('field_name ' + field_name);
                //console.log('field_definition', field_definition);
				var field_val = obj.get(field_definition);

                // Need to upgrade the object so it looks at intrinsic nested properties.

                //console.log('tof obj', tof(obj));
                //console.log('obj', stringify(obj));
                //console.log('obj', obj);

				//console.log('field_val ' + field_val);
                //console.log('tof field_val ' + tof(field_val));

               // throw 'stop';

                if (field_val) {
                    if (field_val.value) field_val = field_val.value();
                    arr_res.push(field_val);
                }




                //throw 'stop';

			} else if (tFieldDef == 'object') {
				//console.log('have an object fieldName, well its not really a simple field name it seems, could be an attached object\'s field.');

				// the key in the index is the value?
				//  is that what an index is in terms of key and value?

				// need a way of iterating through the attached fields?
				//  or deal with one level of attachment at this time?

                // 17/06/2014 - I'm needing this, and noticing that it's somewhat already been done.



				if (field_definition.attached) {
					// it will only be one attached item.
					var attachedObjName;
					var attachedObjFieldName;
					var c = 0;
					each(field_definition.attached, function(i, v) {
						attachedObjName = i;
						attachedObjFieldName = v;
						c++;
					})
					//console.log('c ' + c);
					if (c != 1) {
						throw 'unexpected number of items in attached definition';
					} else {
						var attachedObj = obj[attachedObjName];
						//console.log('attachedObj ' + stringify(attachedObj));
						var res = attachedObj.get(attachedObjFieldName);
						arr_res.push(res);
					}
				}


				//throw 'stop';

			}
			// object...


			// var field_val = obj[field_name];
		})

        var res = arr_res.join(index_key_separator);
        //console.log('get_obj_fields_key res', res);
		return res;
	}

	// Function to get the first or nth?

	
	
	var Sorted_Collection_Index = Collection_Index.extend({
		'init': function(spec) {
			this._super(spec);
			
			//this.fields = spec.fields;
			
			// the fields, sorted by name alphabetically
			//   could be done by Collection_Index
			this.index_type = 'sorted';
			
			// have something about its implementation?
			// could get that from the Sorted_KVS.
			//  Maybe as a function that applies to the type... getting more info about what underlying data structure it is using and the
			//   efficiency of various operations (high efficiency for sorted indexes)
			
			//this.unique_mode = true;
			
			// Can use the Sorted KVS. The fact it's using a tree is not very relevant here.
			
			this.sorted_kvs = new Sorted_KVS(12);
			
		},
		'each': function(callback) {
			return this.sorted_kvs.each(callback);
		},
		
		// this is not a constraint.
		
		/*
		'can_add_object': function(obj) {
			var fields_key = get_obj_fields_key(obj, this.fields);
			
			var count_with_fields_key = this.sorted_kvs.key_count(fields_key);
			
			// The collection index won't be operating unique mode.
			//  It will be a collection constraint, that makes reference to the index.
			
			// Have done a really large amount on this codebase.
			//  Need to do a fair bit more...
			//  Need to have it fully operating with constraints.
			
			// Then something relatively simple, set up with constraints and maybe some data, could be used to create the populated database
			
			// Quite a bit more to do on the general/back-end code.
			//  Then it won't be so hard to populate a few nice components with some text & images.
			
			
			
			
			
			//if (count_with_fields_key > 0) {
			//	if (this.unique_mode) return false;
				
			//}
			return true;
		},
		*/
		
		'unsafe_add_object': function(obj) {
			
			// if the object is just a string?
			//  object needs to be in a data_object though.
			//  that Data_Object can have a set type.
			//console.log('Sorted_Collection_Index unsafe_add_object');
			//console.log('Sorted_Collection_Index uao obj ' + stringify(obj));
			
			// but do we have the object's position/numerical index within the collection?
			
			// The fields key...
			//  The field's key?

			//console.log('this.fields ' + stringify(this.fields));


			// what is this function?
			//  gets a string
			//  gets the key for the object's values within this index's fields?

			// so that fields key would need to produce a string that allows the fields in the object
			//  to be indexed



			var fields_key = get_obj_fields_key(obj, this.fields);



			//console.log('this.fields ' + stringify(this.fields));
			//console.log('fields_key ' + stringify(fields_key));

			// so, we add it to the index.


			//throw ('5) stop');
			this.sorted_kvs.put(fields_key, obj);
			// so far, so good.

		},
		
		// get for one object?
		//  or find? Want flexibility where possible, so may provide arrays.
		
		'get': fp(function(a, sig) {
			//console.log('Sorted_Collection_Index get');
			// will be providing a key, or part of a key
			//  uses the prefix search.
			//console.log('sig ' + sig);
			
			if (sig == '[s]') {
				var search_term = a[0];
				//console.log('search_term ' + search_term);
				var kvps = this.sorted_kvs.get(search_term);
				//console.log('kvps ' + stringify(kvps));
				return kvps;
			}
			
			if (tof(a[0]) == 'array') {
				//throw ('stopping for array');
				var search_term = a[0].join(',');
				//console.log('search_term ' + search_term);
				//var keys = this.sorted_kvs.keys();
				//console.log('keys ' + stringify(keys));
				var kvps = this.sorted_kvs.get(search_term);
				//console.log('kvps ' + stringify(kvps));
				// should return keys and values
				return kvps;
			}
			
		}),
		'has': fp(function(a, sig) {
			if (sig == '[s]') {
				return (this.sorted_kvs.key_count() > 0);
			}
		}),
		'remove': function(obj) {
			// depends on what type of object the collection is holding too.
			//  When initialized as Collection(String).
			//   Has a collection data type constraint.
			//   The collection will still have items indexed.
			
			// So when a string item is added, it needs to get indexed. I'll trace that.
			
			var fields_key;
			if (tof(obj) == 'string') {
				fields_key = obj;
			} else {
				fields_key = get_obj_fields_key(obj, this.fields);
			}
			this.sorted_kvs.out(fields_key);
		}
		
		// when getting... do we have the fields?
	});
	
	// Map rather than dict?
	var Dict_Collection_Index = Collection_Index.extend({
		'init': function(spec) {
			this._super(spec);
			// which field(s) get indexed?
			//this.fields = spec.fields;
			this.index_type = 'dict';
			// also could do more than one field at once.
			// however, this one is no good for doing a search where the first
			// field in the multi-field index is specified but no others
			this.dict = {};
			// this should assume items are unique for the moment.
			// perhaps the Dict_Collection_Index could operate in unique_mode =
			// false as well.
			this.unique_mode = true;
		},

		'can_add_object' : function(obj) {
			// true / false?
			// won't have the error message.
			// perhaps another function could reveal the problem if asked.
			// this would be used for detecting if an object will be OK in a
			// number of different indexes before adding it to the collection.
			var fields_key = get_obj_fields_key(obj, this.fields);
			// is there already an object there? Different object?
			// same object?

			// Want to raise the right exception.
			var existing_obj = this.dict[fields_key];
			//console.log('existing_obj ' + existing_obj);
			if (is_defined(existing_obj)) {
				if (this.unique_mode === true) {

					// if (is_defined(existing_obj.__id) &&
					// is_defined(obj.__id)) {
					// if (existing_obj.__id === obj.__id) {
					// throw 'The same item (identified by ID) is already in the
					// collection, unique fields clash';
					//		
					// } else {
					// throw 'Unique fields clash';
					// }
					// }
					return false;
				}
			}
			return true;
		},

		'unsafe_add_object' : (function(obj) {

            //console.log('Dict_Collection_Index unsafe_add_object');
			//console.log('DICT unsafe_add_object');
			// it's currently unsafe to stringify some objects.
			//console.log('unsafe_add_object ' + stringify(obj));
			// should have a can_add_object function too,
			// possibly an unsafe_add function that does not do checking.
			// If something can't be added to one index, we don't want it added
			// to any of them.
			var fields_key = get_obj_fields_key(obj, this.fields);
			// won't be (directly) adding array objects to the collection.
			// will be adding collections to collections though.
			// console.log('tof(obj) ' + tof(obj));
			// console.log('Dict_Collection_Index add_object');
			// is this index doing multiple fields?
			// console.log('fields ' + stringify(this.fields));
			// for one field, no separator.
			this.dict[fields_key] = obj;
			// get the fields key from the field values.
			// this.dict[fields_key]

		}),
		'get': fp(function(a, sig) {
			// [s]
			// just one value, searching the index based on that value.
			
			// This one won't have the layer / wrapper for multiple values stored at one key (yet).
			
			// That would be a decent way of doing an index.
			//  The B+ tree would insert the multiple identical keys anyway.
			if (a.l == 1 && tof(a[0]) == 'string') {
				return this.dict[a[0]];
			}
			// array of values - will need to group them together and search the
			// index.
		})

	// some kind of search or retrieval function.
	// 'get' I think for this index.

	})

	// A whole system for collection indexes.
	// Maybe it should be in the collection class?
	// But maybe not if it encapsulates a fair bit of functionality and has a
	// simple enough API.

	// May make sense to keep the indexing system in one place.

	// Ensure there are various indexes...

	// May have both b+ and dict index at once?
	// Combined index? Like the KSVS?
	// Want the indexes to be fast and easy to set up primarily
	// Make it easy to use a b+ tree alongside a dict in indexing.

	// The the specific indexes...

	// Will add objects to them, and be able to do searches / get by key.

	// Want an index that is both b+ and dict.
	// Dict is used for the object retrieval from key
	// The b+ tree is used to ensure the correct order.

	// Collection always has items in an array...?
	// That array implementation could possibly change.
	// However, I think it will be OK for the moment.

	// Add and remove different types of index.
	// Possibly say what sort of index is needed...
	// Then the indexes could have different internal implementations
	//  

	// We may want to expand this in various ways.

	// Has a collection of indexes?
	// With them indexed?
	// In this situation, I think we need to do the indexing within the index
	// system on a lower level... a bit more code.
	// This indexing system will be used in a fair few places.
	// May wish to build on this (maybe separate module)
	// with a disconnected / async index system.
	// can make use of asyncronous data structures. These could be across a
	// network.

	// Collections will have different kinds of constraints to Data_Objects
	//  Though a collection constraint could be that field constraints are required.
	//  Data models defined using this system will then be more easily translated to DB and RDM formats.
	//   Could use these constraints here in JavaScript for checking before putting into an object database
	//   Can also use them in generating the SQL database and its CRUD functions.
	//    Likely to want to continue working on the parser. Being able to parse a variety of languages would prove very useful.
	//     It would also help for them to be integrated with the data model and JavaScript system I am using here.
	//     Being able to graphically illustrate what could go at any point in a document would be very useful...
	//      it would know what the objects are, and help / helpful windows could display information ready to be clicked on or tapped in order
	//      to add that text of function call. Would be nice to have an iPad next to the keyboard to tap things and view info interactively.
	//      Could easily be connected to an address over the LAN, I do think a Local_MB_Node system running in node.js could enhance people's
	//       experience as they use the website. 
	
	// For the moment, the single client is what matters.
	
	// As well as the index system, are the collection_constraints
	// These are different to field_constraints.
	// One collection_constrint will be applying field_constraints
	
	
	// When a collection is given a field constraint, it's a constraint that applies to the fields of all objects in the collection.
	
	// Not a Data_Object?
	//  It would probably be safe to make this a Data_Object.
	//  Making this Index_System use some lower level mechanisms for indexing. The index is not available here, this is used to implement indexing.
	
	// This kind of is the index index. Not so sure about a more complex index index inside this.
	//  Can put a few of the operations in functions to encapsulate index search.
	
	// Maybe don't create the index system if there is nothing to do.

	var Collection_Index_System = Class.extend({
		
		// I am now going to extend this so that it also can use B+ trees.
		//  B+ trees may be advantageous to use in many cases over dicts, but will likely be slower and use more memory, though will
		//  also provide prefix search and ordering functionality in addition to the dict index.
		
		
		'init' : function(spec) {

			// This could keep track of the primary_unique_index for get
			// operations.

			this.collection = spec.collection;

			// This should do a fair few things...
			// A new index can be added

			// New index created? Makes the index go and collect the
			// data by iterating through the array.

			// Will this System class make the CollectionIndexes all
			// work together smoothly in the Collection code?

			// The system will need to keep track of the indexes, kind
			// of provide an index to them.

			// Will this be tasked with carrying out the queries?
			// We have the indexes, we so we have access to the results.

			// The query planner or executer could go in this part.
			// Just need to make it so that collections do get indexed
			// OK, some separation of concerns may help.

			// This could really be in the Collection.

			// Could hook this up to listen for any item being added (or
			// removed) from the collection?
			// Or just have the collection notify it - not sure right
			// now.

			// This could expose an easier API.
			// Could also have a function that gets the index based on
			// which fields, and which index type.

			// Then with everything indexed within this system, it may
			// not be too hard to have this system carry out the
			// searches.

			// However, the searches could get a bit more complex...
			// searching non-indexed data.
			// Or sort, various functions.

			// Perhaps it will just be in the collection...
			// Or there could be an Index_System_Searcher object.
			// That would help encapsulate the functionality, have the
			// code express what it is doing at the same time.
			// So when a search query is given, it is the searcher that
			// queries the index system, finds out what indexes to use,
			// gets those indexes, then prepares the result.
			// It will know what final stages may be necessary to carry
			// out the query specified.

			// this.indexes = [];
			// just stored in an array?

			// or have them in some kind of object matrix?

			// a collection of indexes and then an index of them?

			// a reference to the primary index - the one that is used
			// when processing 'get' requests.

			// index types? dict, ordered_string, full_text?
			// 3 index types with defined capabilities...
			// could put in a full text index, with the full text index
			// API clearly defined.
			// then it would be a job to write some compressed dynamic
			// suffix tree JavaScript code.
			// that data structure would be interesting when run in a
			// distributed fashion, could have it as though very large
			// blocks of memory are available.

			// indexes by field...
			// indexes with multiple fields.

			// field object
			// single index
			// object containing indexes with nested indexes

			// index_map['last_name'].index_map['first_name'].indexes_by_type['dict']
			// one way of being able to get the indexes for a particular
			// field, of a particular type.
			// Think this is an OK way to store a map of the various
			// indexes that are used.
			// What about getting all indexes? Should we store them in
			// an array?
			// Not so sure for the moment, could iterate over these
			// indexes, and add and remove them without too much trouble
			// in this format.

			// get_indexes_by_type_by_fields(arr_field_names)
			// then those indexes are referred to by the type of index
			// (not the data structure used).
			// Though 'dict' works as a hash under the JS dict.

			// may be a little verbose specifying some indexes.
			// however, want a very functional index of indexes.
			// with the possibility of different types of indexes being
			// used.
			// being able to run relatively simple dict indexes on
			// collections for 'get' operations seems like a good plan.
			// have that within a flexible system that allows different
			// index types.

			// has a dict index (lookup / unique key) (could be set to
			// allow multiple items, so that all items at key get
			// returned)
			// or ordered_string? (allows multiple items more easily)
			// or full_text?

			// could get different implementations of these various
			// indexes.
			// for full text, could make a relatively simple tree index.
			// and could also experiment with some optimized full text
			// indexes. The unit testing would be useful for making
			// these indexes, and having a simple one could work
			// very well for testing and comparison.

			// Could have a data structures project where different ones
			// could be made.
			// Not so sure that the client in a web app would need this?
			// Searching would probably be done on the server.
			// However, these data structures could lead to server
			// implementations.

			// index_map['last_name'].indexes['dict']
			// and keeping track of the primary unique index.
			
			// There could be one index that is considered the primary_unique_index.
			//  Maybe determine the primary unique field?
			
			
			
			this.index_map = {};
			//  the indexes stored in the index map.
			//  may require searching at times.
			
			
		},

		// respond to events in the DataObjects / values stored within the collection.
		//  the normal system of propagating events up to the parents / ancestors?
		//  

		'notify_insertion': function(pos) {
			// need to code this.
			//  don't think its relevant for controls, which is what I'm working on right now.

			//console.log('TODO collection-index notify_insertion');
			return false;
		},
		
		
		'clear' : function() {
			this.index_map = {};
		},

		// re-index a whole collection / array...

		// add index by type by fields.

		// and set it as the primary index?
		// want to do that for quick retrieval with get operations.

		// Or set things as being a primary / unique field that will
		// work with get operations.
		// The indexing system is a little complex, but it won't take up
		// too much code when it's in place in the build.
		// Just a few hundred bytes I think.

		// Supporting get operations will make the Collection quite
		// useful.
		// Want it so that collections easily fit into place in code in
		// various situations.
		// Will often be defining which fields in an object are unique
		// Corresponding to unique columns / column constraints in a
		// database.

		// Want to make a nice IDE website, and use that to develop
		// version 2.
		// Saving database resources...
		// Likely to be storing classes and functions within the
		// database. Will be able to build them into modules.

		// Is a complicated way of going about things to have something
		// indexed with a dict...
		// But will save on code used in various objects. Some
		// complexity to be handled by the collection.
		// Will remove clutter from code that should be doing something
		// else apart from indexing a field.

		// Will get some examples with data working, then will get some
		// abstract postgres objects holding their objects using
		// Collection.
		// The Abstract Postgres code will be very clear, and easy
		// access to the objects will be provided.

		// Possibly will index a function matrix using multiple fields
		// in an index?
		// Will take time and effort to improve the collection, but then
		// it will be usable to store more things.
		// Ordering will not matter in many situations.
		// Will be able to sort a collection too, probably to keep it
		// sorted too.

		// Different implementation for get_by_position possible rather
		// than using array?
		// Perhaps these normal collections won't be so good for dealing
		// with large amounts of data, with the array operations.
		// Could maybe make a collection that does not use an array for
		// internal storage.
		// Right now, keeping track of the position in the array is
		// important.
		// Could perhaps make a B+ tree where items know their position.

		// search implies possibly returning multiple records.
		// we should know there won't be multiple records when searching
		// using a unique field / unique field combination.

		// could have 'get'?
		// a way of testing if things are stored in a unique index
		// system?

		// a non-unique dict system where new dicts get created at each
		// level?

		// get_by.
		//  will get by an indexed property.
		
		// get is fairly simple... need to have the index doing searches too.
		
		// also want to search the index system for indexes that are for various fields, but in any order.
		//  These indexes can be used to implement uniqueness constraints even if the order of keys does not match.
		//  Having this deal with some more complicated indexing patterns should make for a very powerful collection component.
		
		
		
		'search_for_index_with_fields': fp(function(a, sig) {
			// will be consulting the alphabetical list of fields.
			//  also, index could be indexed with its alphabetical list of fields.
			
			// scope for optimization through improved index index
			//  alphabetically sorted KVS of alphabetically sorted index fields.
			//  This is the kind of thing that will make this a good system!

			// Perhaps need different naming for attached fields?
			//  Need to be able to tell them apart from a list of fields.

			// an attached field:
			// ['attached', 'meta', 'name']
			//  could get confused with an array of three string field names.

			// '/.meta.name'
			//  /. could be convenient syntax for this, so we indicate that a field has been added that is
			//   an attached field.

			
			//console.log('search_for_index_with_fields ' + sig);
			//console.log('a ' + stringify(a));
			
			if (sig == '[s]') {
				return this.search_for_index_with_fields([a[0]]);
			}
			if (sig == '[a]') {
				
				// check the index in alphabetical order - any index with the right fields will do.
				
				//  may have option to continue search for the index with them matching in the right order.
				
				// could check for that one first.

				// OK, but to identify this is one field?
				//  Perhaps the whole field name as a string is better?

				
				//console.log('a[0] ' + stringify(a[0]));
				
				//var sorted_
				var idx = this.get_index_starting(a[0]);
				//console.log('idx', idx);
				return idx;
				
			}
			// how about looking through the indexes in this function?

			if (sig == '[o]') {
				var res;
				var matching_count = 0;

				this.iterate_indexes(function(index, stop) {
				
					
					
					//console.log('iterate_indexes index ' + index);
					//console.log('iterate_indexes index.fields ' + stringify(index.fields));
					//console.log('iterate_indexes index.fields ' + stringify(index.fields));
					//console.log('fields ' + stringify(fields));
					// compare the two arrays
					
					var i_fields = index.fields;
					if (tof(i_fields) == 'string') i_fields = [i_fields];
					
					//console.log('a[0] ' + stringify(a[0]));
					//console.log('i_fields ' + stringify(i_fields));

					var ae = are_equal([a[0]], i_fields);
					

					if (ae) {
						//matching_indexes.push(index);
						res = index;
						matching_count ++;
						//console.log('res ' + res);
						//return res;
					}
					
					//console.log('ae ' + ae);
					
					
					
					//throw ('iterate_indexes stop');
				});
				if (matching_count > 1) {
					throw 'unexpected matching_count > 1';
				} else {
					if (matching_count == 1) {
						return res;

					}
				}

			}
			
			
			
			
		}),
		
		
		// calling this find now.
		//  shorter, more positive sounding.
		'find': fp(function(a, sig) {
			
			// we can't really do search at the moment.
			//  21/06/2012, now we can. Good B+ implementation now in there.
			//  it looks like we can now... but maybe it's using 'get'.
			
			// however, do want full-text search.
			
			// will be doing searches with = or prefixes ok.
			
			//  (not all that well)
			// at a later stage we will have full-text search on indexes
			//  will search a lower case version of the text.
			
			// I think a trie will suffice for this functionality.
			//  Will do more experiments on this.
			//  May have an index of words and word occurrances within a collection.
			//   That would be a decent indexing system.
			//   Could also go for the full text index that could be more powerful and flexible.
			//   May want to be careful about setting word boundary search rules.
			
			// that could be done using a trie, prexix tree, suffix tree, suffix array, compressed dynamic suffix array, or other data structure.
			
			
			// can search one field for a name / value pair.
			//console.log('Collection_Index_System search sig: ' + sig);
			// searching multiple fields - multiple name value pairs.

			// nvp: [s,?]

			// do we have any indexes that cover all fields?
			// could do merging based on the results of more than one
			// index.

			// devising the search strategy becomes a bit more complex
			// when dealing with more than one index, being asked to
			// search by more than one field.

			// the indexing system does not hold all data anyway.
			// it won't be able to do all searches.

			// perhaps it should be queried to see what fields it does
			// index by before doing a search.
			// after doing a search with an index, may need to then
			// search through other fields without using the index.

			// searching by things in the order of the indexes
			// searching in other order, would be nice if it can consult
			// the right index.
			
			// var found = coll_presidents.find([['name', 'Franklin Pierce'], ['party', 'Republican']]);
			
			//console.log('Collection_Index_System find sig ' + sig);
			//console.log('a.l ' + a.l);

			if (sig == '[o]') {
				var objQuery = a[0];
				//console.log('objQuery ' + stringify(objQuery));

				//console.log('this.index_map ' + stringify(this.index_map));
				// so maybe if there is no index map we return false.
				//  not sure about indexed sub-items.

				//  may leave that for the moment.
				//   I'm sure it will be useful though.
				//    Perhaps they could be found through indexes in their own collections, so it's not down
				//     to the indexing system to find them apart from point them to the right item where it can.

				// Object query
				// ------------

				// Are we looking for a field that is indexed?
				//  Are we specifying multiple fields?

				// Dealing with searching for a single item with a query seems like a good case to handle.
				//  Other logic can deal with other cases.

				// indexes

				var indexes = this.indexes();

				// can't stringify the indexes.



				//console.log('t indexes ' + tof(indexes));
				//console.log('indexes.length ' + indexes.length);

				// then for each index, we see which fields it is...
				var map_single_field_indexes_by_field = {};
				each(indexes, function(i, v) {
					if (v.fields.length == 1) {
						//console.log('tof v.fields[0] ' + tof(v.fields[0]));

						var field = v.fields[0];
						var tField = tof(field);

						if (tField == 'string') {
							map_single_field_indexes_by_field[field] = v;
						}

						
					}
					//console.log('v.fields ' + stringify(v.fields));
				});

				// OK, so we see what it's indexed by.
				//  We also need to use the index to find the items by the object key.

				// {key: value}

				// Will need to look through the properties of the object given to this.
				var c = 0;
				var keys = [];

				each(objQuery, function(key, value) {
					//console.log('key ' + key);
					//console.log('value ' + value);
					c++;
					keys.push(key);
				});
				//console.log('c ' + c);

				if (keys.length == 1) {
					var index = map_single_field_indexes_by_field[keys[0]];

					if (index) {
						var res = index.get(objQuery[keys[0]]);
						//console.log('res ' + stringify(res));
						return res;
					} else {
						//throw 'no index found';

						return false;
					}

					
				}
				// we see which 


				// Want to search any indexes that match. May need to look through different sets if we are searching
				//  for more than one thing?




				throw 'stop';


				//console.log('Collection_Index_System search does not handle object query.');
				//  not yet? that will be a field name type thing, can look for fields on an attached
				//   object.
				//throw 'stop';
				return false;
			}



			if (sig == '[a]') {
				
				// .find('Donald Tsang < name < Jamie Oliver')
				// .find('Jamie Oliver > name > Donald Tsang') // in reverse order - it could notice that a > b and do the DESC query.
				
				//.find()
				
				// We could do a bit of interpretation on what is being looked for.
				//  There could be a search expression here.
				//  At the moment the search expression is just the field value, without the field name
				
				// '[indexed_field_value] = Jamie Oliver'
				// '= Jamie Oliver'
				// 'Jamie Oliver'
				
				// Index parsing for the queries should be useful.
				//  Also want things able to be done not in strings...
				//   Don't want to fall into the 'SQL Trap' of creating a string representation dynamically only to have to parse it again.
				
				// .find(['Donald Tsang', '<', 'name', '<', 'Jamie Oliver'])
				
				// the default will be <=
				// .find(['Donald Tsang', '<=', 'name', '<=', 'Jamie Oliver'])
				//                           ==
				// .find(['Donald Tsang', 'name', 'Jamie Oliver'])
				
				// .find({
				//    'name': ['Donald Tsang', 'Jamie Oliver'] // not saying inclusive or exclusive, could be inclusive by default
				//    'name': [['Donald Tsang', false], ['Jamie Oliver', false]] // exclusive
				//     exclusive(str) -> [str, false]
				//  Will need to do more specifying and testing for non-string values in indexes.
				//   Getting numerical indexes right with the comparison function would be nice.
				//    stores the number as a string... but stores it in numerical order.
				//     Would probably be best to parse it to a number for the comparison.
				//      Could try with numeric keys directly - they could work with comparisons.
				// })
				
				//  slightly odd syntax, but it makes sense.
				//   having the 'name' field in the middle... does make sense.
				//  expresses the operands - as if it has been parsed, the next stage.
				// searching for this one value.
				// not all indexes... need to have a default index.
				// primary index?
				//  may be spacifying the name of the field in many cases.
				//  this will be most useful when only one index is set up.
				//console.log('Index System find a[0] ' + stringify(a[0]));
				// primary index?
				//  may be the case when there is only one index.
				//  may specify primary indexes at other times.
				
				var indexes = [];
				
				this.iterate_indexes(function(finding_index) {
					//console.log('finding_index ' + finding_index);
					indexes.push(finding_index);
				});
				//throw('stop');
				//console.log('indexes.length ' + indexes.length);
				//console.log('this.index_map ' + stringify(this.index_map));
				
				// So, asking each index for the answer?
				
				//console.log('indexes.length ' + indexes.length);
				//console.log('a[0] ' + stringify(a[0]));
				
				var search_fields = [];
				var search_values = [];
				
				
				
				each(a[0], function(i, v) {
					//console.log('v ' + stringify(v));
					
				
					search_fields.push(v[0]);
					search_values.push(v[1]);
				});
				
				//console.log('search_fields ' + stringify(search_fields));
				
				/*
				
				if (indexes.length > 0) {
					
					// search for the right index.
					
					
					
					// consult the first index.
					
					var res = indexes[0].get(a[0]);
					
					//if (res.length == 1) {
					//	return res;
					//}
					//console.log('item ' + stringify(item));
					
					return res;
					
				}
				*/
				var equal_indices = [];
				//console.log('indexes ' + stringify(indexes));
				
				each(indexes, function(i, idx) {
					var idx_fields = idx.fields;
					//console.log('idx_fields ' + stringify(idx_fields));
					
					if (idx_fields.length >= search_fields.length) {
						// get the first part of the idx_fields
						
						// if it is an array...
						var idx_fields_to_check;
						if (tof(idx_fields) == 'array') {
							idx_fields_to_check = idx_fields.slice(0, search_fields.length);
						} else {
							idx_fields_to_check = [idx_fields];
						}
						
						
						
						
						//console.log('idx_fields_to_check ' + stringify(idx_fields_to_check));
						
						if (are_equal(idx_fields_to_check, search_fields)) {
							//console.log('they are equal');
							
							equal_indices.push(idx);
							
						}
						
					}
					
					//if (is_equal(idx_fields, search_fields))
					
					
				});
				
				//console.log('equal_indices.length ' + equal_indices.length);
				//return equal_indices[0];
				
				if (equal_indices.length > 0) {
					// use that index
					
					// will give that index two values to look for, in an array
					
					// will also do some testing with non-string values, and indexing them at some point.
					//  may do some lower level work in the B+ tree to get this right.
					
					var idx = equal_indices[0];
					//console.log('idx ' + stringify(idx));
					
					var res_indices_get = equal_indices[0].get(search_values);
					
					//console.log('res_indices_get ' + stringify(res_indices_get));
					
					return res_indices_get;
					
					
					
				}
				
				
			}
			
			/*
			if (sig == '[s]') {
				// it's searching for an index with a single field. Easy if there is just one of them found.
				
				// then split that string, it could be separated by commas.
				//  what about split with ', '?
				//  could have a new split function that maybe uses regexes to split like that?
				//  split, removing whitespace after commas.
				//  would go in util / essentials.
				
				var field_str = a[0];
				
				if (field_str.indexOf(',') > -1) {
					throw ('Multiple fields search through a string not yet implemented.');
				}
				var res = [];
				
				this.iterate_indexes(function(index) {
					if (index.fields.length == 1) {
						//res.push()
						if (index.fields[0] == field_str) {
							res.push(index);
						}
					}
				})
				if (res.length <= 1) return res[0];
				return res;
			}
			*/
			if (sig == '[o,s]') {
				// an object which represents the field.
				//  May need to read / understand that object.
				//   however, it could have been put into the index as a JSON field.
				//    so it will get recorded in the index under that string name.
				var fieldDef = a[0];
				//var strField = stringify(fieldDef);
				//console.log('strField ' + strField);

				// will search through and retrieve from the index (system)

				// can put in the object to the search.
				//  will it get stringified later?
				//   this needs to be used as a key for a string field though.
				var index = this.search_for_index_with_fields(fieldDef);
				//var index = this.search_for_index_with_fields(strField);
				//  may consult different indexes / look for them in a specific order when doing a lookup operation.
				//console.log('index ' + stringify(index));
				if (index) {
					//console.log('a[1] ' + stringify(a[1]));
					var res = index.get(a[1]);
				}
				//console.log('res ' + stringify(res));
				return res;
				//throw 'stop';


			}


			// That looks like multiple fields specified.
			if (a.l == 2 && tof(a[0]) == 'array') {
				//console.log('sig ' + sig);
				//console.log('4) a ' + stringify(a));
				//var index = this.search_for_index_with_fields(stringify(a[0]));
					
				// put them in an array to indicate they are one field?

				var index = this.search_for_index_with_fields([a[0]]);

				//  may consult different indexes / look for them in a specific order when doing a lookup operation.
				//console.log('index ' + stringify(index));
				if (index) {
					//console.log('a[1] ' + stringify(a[1]));
					var res = index.get(a[1]);
				}
				//console.log('res ' + stringify(res));
				return res;
			}

			if (a.l == 2 && tof(a[0]) == 'string') {
				// it's a single name-value pair.
				// is it?
				
				//console.log('sig ' + sig);
				//console.log('a ' + stringify(a));
				
				
				// search for the single index.
				// just use a dict index for the moment.
				// searching a dict is a 'get' operation.
				// maybe we need to search a full text index only?
				// the b+ index can do the prefix search, which is a
				// start.
				// more general searches, such as with a regex? becomes
				// more complex.

				
				//console.log('this.index_map ' + stringify(this.index_map));
				
				//var index = this.index_map[a[0]]['indexes_by_type']['dict'];
				
				// use a get_index function for this.
				var index = this.search_for_index_with_fields(a[0]);
				
				
				//  may consult different indexes / look for them in a specific order when doing a lookup operation.
				//console.log('index ' + index);
				//console.log('index ' + stringify(index));

				// then we search the index?
				// what API to lookup the value with the key?

				// return a search of the index.
				// a dict index... should maybe have 'get' rather than
				// search.
				//console.log('a[1] ' + a[1]);
				
				if (index) {
					var res = index.get(a[1]);
					//console.log('res ' + stringify(res));
					//console.log('a[1] ' + a[1]);
					//console.log('sig ' + sig);
				}
				
				//console.log('res ' + stringify(res));
				return res;
			}
		}),

		// This is going to be replaced with the system of constraints.
		//  There is the index
		//  Then there is the unique constraint
		//  Then it is the primary key, or similar to it, will be a field/column or a combination of them that gets used extensively in the
		//   database.
		
		// This will need to be tested fairly thoroughly, then it will be documented on the website.
		//  I think the website will have quite a lot of documentation, and I'll be able to modify it using a CMS.
		
		// Some documentation will be generated from the code.
		//  Will be able to edit API reference documents, they'll be viewable using a nice interface.
		// I think that could help take-up of this library quite considerably.
		//  That will be quite a big project.
		//  I think quite a lot of material about this, and JavaScript programming will go on my site.
		//  It would be good to have an active discussion forum as well.
		// The demos area, consultancy area, Web development work - getting back to people with a quote.
		//  It may be possible to put together good sites, quickly, for not all that much.
		// Could be recruiting contractors on that site. Would be a good interface with the programming community.
		//  Could possibly have a chat service, but answering people's questions quickly, or directing them to the forum, may be a useful thing to do.
		
		// I think this system would be a very solid technological basis for the site.
		//  Would be paticularly good for having other processes running that keep up-to-date backups.
		//  Also interested in connecting the web server with other MetaBench nodes that happen to be on and running.
		
		
		// There is no such thing as the primary unique index.
		//  There is the 'constraints' system.
		
		/*
		
		'primary_unique_index': fp(function(a, sig) {
			// just a string - the field name
			// dicts serve uniqueness checking well, though other data structures can do that too.
			
			//console.log('primary_unique_index sig ' + sig);
			
			if (sig == '[s]') {
				// ensuring there is that unique index, with that field
				// as the key.
				var field_name = a[0];
				// get the index for that field.
				// not sure it will already exist.

				// however, may want to first look to see if there are
				// any indexes for that field.
				// ensuring the dict index is the right way of doing
				// things for the moment.
				// will later do more development of the indexing system
				// so that other types of index can be used as a unique
				// index.
				// and so that the dict index can be used as a
				// non-unique index.
				//this._primary_unique_index = 
				this.ensure_index(field_name, 'dict');
			}
			if (sig = '[]') {
				//console.log('this._primary_unique_index ' + this._primary_unique_index);
				return this._primary_unique_index;
			}

		}),
		*/
		
		
		'get_index_starting': function(fields) {
			// will be starting with just one field?...
			//  get indexes starting...
			
			//console.log('get_index_starting ' + stringify(fields));
			
			if (tof(fields) == 'string') {
				fields = [fields];
			}
			//console.log('get_index_starting fields ' + stringify(fields));
			// go through all indexes, looking for the index which has got the right match.
			//  what about consulting an index of indexes?
			//  this could be done later, really won't be many indexes to search through.
			
			// look at the index map... get the fields as a string which will get used in the index lookup?
			//  want to be looking at all indexes at the moment.
			
			
			// want the stop function in iterate_indexes
			
			var matching_indexes = [];
			
			this.iterate_indexes(function(index, stop) {
				
				
				
				//console.log('iterate_indexes index ' + index);
				//console.log('iterate_indexes index.fields ' + stringify(index.fields));
				//console.log('fields ' + stringify(fields));
				// compare the two arrays
				
				var i_fields = index.fields;
				if (tof(i_fields) == 'string') i_fields = [i_fields];
				
				var ae = are_equal(fields, i_fields);
				
				if (ae) {
					matching_indexes.push(index);
				}
				
				//console.log('ae ' + ae);
				
				
				
				//throw ('iterate_indexes stop');
			});
			
			//console.log('matching_indexes.length ' + matching_indexes.length);
			
			if (matching_indexes.length > 1) {
				throw 'get_index_starting, more than 1 matching index found. Needs implementation';
				// May return the best match
				//  The best match could be found through an index.
				
				
			} else {
				return matching_indexes[0];
			}
			
			
		},
		
		
		'ensure_index': fp(function(a, sig) {
			// index may be given as the field(s)
			// single string field, or an array of fields.

			// index type as well...
			// we could have a default index type.

			// could try some benchmarks later on, judge difference
			// between b+ index and the dict index for retriveing
			// values.
			// dict will probably be much faster in JS because it uses
			// native code behind it, probably with a good string
			// hashing algorithm.

			// fields, index_type
			// field, index_type

			// and ensuring a unique index too?
			// perhaps the 'dict' index is unique.
			// could choose to operate the indexes on 'unique mode' or
			// not.

			// Want it easier to create a new index with the code.
			//  May have unsafe_add_index, or just be clearer about what code is used.
			
			// may ensure a single index.
			
			// may be given an array of strings.
			//   if so, it is a single index.
			
			
			//console.log('ensure_index sig ' + sig);
			
			if (a.l == 1 && is_arr_of_strs(a[0])) {
				// not specifying the type of index here.
				//  it is assumed to be the sorted (B+) index.
				
				
				// want to see if there is an existing index.
				
				/// hmmmm not sure... 
				
				var new_index_spec = a[0];
				//console.log('new_index_spec ' + stringify(new_index_spec));
				
				//throw('stop');
				// then create the actual (sorted) index.
				
				// will manually put this into the index map.
				//  may keep the index map, it's detailed, but also have a field_index_index where it points to the relevant index.
				//  may make other more direct objects in the index_system to refer to indexes.
				
				var sci = new Sorted_Collection_Index({
					'fields': new_index_spec
				});
				// then populate the index.
				
				// can add_object with an array to the index.
				sci.add_object(this.collection._arr);
				
				// then add the index into the index_system.
				
				// perhaps the map could be done in a heirachy like in nested?
				//  will have some code that is a bit complex and single-purpose here.
				//   it will be supporting the collection and index system.
				
				// May create light collection and data_object components. May have been better earlier, but then would have made things more complex too, this has been
				//  OK for developing.
				
				
				
				// not so sure about having the single field name?
				//  but they could be indexed here by their string fields key
				
				// this.index_map[field_name]['indexes_by_type'][index_type] = idx;
				
				//  could have the field names in sequence in the index - a little like the nested system.
				//  that would allow searching the index when looking sequentially for an index for fields.
				
				// though the sorted KVS with prefix search could actually help retrieve the index here.
				//  That would possibly be a useful data structure
				
				
				// The index map is already pretty unwieldy, perhaps it can be imprved.
				//  I think a specialized index index will be what is needed in a bit. At least there won't need to be so much specialized indexing code.
				//  Some kind of specialised code to power the indexing engine makes a lot of sense.
				
				// Will use the map and the fields_key for the moment.
				
				var fields_key = get_fields_key(new_index_spec);
				//console.log('2) fields_key ' + fields_key);
				
				this.index_map[fields_key] = this.index_map[fields_key] || {};
				this.index_map[fields_key]['indexes_by_type'] = this.index_map[fields_key]['indexes_by_type'] || {};
				this.index_map[fields_key]['indexes_by_type']['sorted'] = sci;
				
				return sci;
				
				//throw('4) stop');
				
			}
			
			// maybe change this interface.
			if (a.l == 2) {
				if (tof(a[1]) == 'string') {
					var index_type = a[1];
					if (tof(a[0]) == 'array') {
						var fields = a[0];
						
						return this.ensure_index[a[0]];
						
					}
					
					// what about when there are multiple fields to index.
					//  could try indexing president's party affiliations too.
					
					
					if (tof(a[0]) == 'string') {
						var field_name = a[0];

						// ensure a dict index...
						// think we will have to run through the types
						// sequentially here.

						// if (index_type == 'dict') {
						// see if there is a dict index already for that
						// field.

						// }

						// see if there is an existing index for that
						// field.

						var e_idx = this.get_index_by_type_by_fields([ field_name ], index_type);
						if (!is_defined(e_idx)) {
							// need to create the index.

							// should probably start it up with the
							// existing dataset.

							var idx = new Dict_Collection_Index({
								'fields' : [ field_name ]
							});
							// then want to load all the data in the
							// collection into the index.

							// Need to put the index in the index map.
							// Will do some ll_set or ll_ensure code to
							// make this shorter.
							this.index_map[field_name] = this.index_map[field_name] || {};
							this.index_map[field_name]['indexes_by_type'] = this.index_map[field_name]['indexes_by_type'] || {};
							this.index_map[field_name]['indexes_by_type'][index_type] = idx;
							
							// a dict of indexes, ordered by the field names of the index (comma separated), with an array of indexes that
							//  satisfy that combination of fields.
							// would be fast to search that array for particular fields - search all with that combination,
							//  then search for the fields in the particular order.
							
							// Sorted_KVS
							// .indexes_by_alphabetic_fields
							//  a prefix search on this could quickly get the required index
							// It would indeed be a fast way to get the index.
							//  Collection is getting quite big... it will be nice to get it back down to only a few KB.
							//  I wonder if the framework will wind up being quite hefty?
							//   Seems like a LOT of comments here. I think the collection itself, with the index system and data types etc, could be
							//   fairly small, a few K when wrapped up with other things.
							
							// I do want to provide an impressively small library, perhaps it will be around 30-40K?
							//  Once I have got a decent system, I can do refactoring and building.
							
							// I think an automated compilation / build process will be very useful.
							//  This one will put more things as local variables.
							//  Some object-oriented functions may be re-written as non-oo so that they work in the local scope, getting called from the local scope.
							//  Will also build up string names for strings that get used - can compress things a fair bit that way.
							//   With various compression means, it should be possible to get this down to a very small size.
							
							// The automatic linking (var removal) will prove useful when building this.
							//  Having this on the server, with an interface for producing builds will be useful.
							
							
							// a sorted KVS for storing the indexes by alphabetical fields...
							//  that would be nice for retrieving all of the indexes with a given alphabetical fields key.
							
							// Will take some more testing and checking to get the various things that are needed working.
							//  Am looking forward to creating the abstract rdb model, then translating that to an abstract Postgres model,
							//   then persisting that abstract Postgres model to a Postgres database.
							// All this middleware will make for some very convenient interfaces eventually.
							//  Having the data structure infrastructure to support them will help a lot.
							
							// as well as mapping it by type, and just one field name...
							//  need to have it indexing by the alphabetically sorted list of fields.
							// I think these things will take some more examples and testing, will test things with multiple indices as well.
							
							// Ordered indexes
							//  May be able to get them ordered by one of the sorted indexes.
							
							// Iterate through it, or get records, or get keys
							//  Will want to index the indexes with their fields stored alphabetically.
							//  this will matter when there are multiple fields in the indexes.
							
							
							
							
							

							// have made add_object into
							// unsafe_add_object that does not do
							// checking.
							// perhaps that unsafe method could be a
							// private function???

							// console.log('this.collection._arr ' )

							idx.add_object(this.collection._arr);

							// need to access the collection's array.
						}
					}
				}
			}
		}),



		// seems like the best way to index the indexes.
		// by field, then by index type.
		//  Would be good to have a clearer name / description of this function.

		'set_index_by_type_by_fields': function(index, arr_fields, index_type) {
			// In the Collection_Index_System

			//console.log('set_index_by_type_by_fields');
			// the fields for the index... possibly restricted to named fields, and do that check.
			//  make disabling some checks optional. Could also remove them at the build stage.
			
			// needs to go through the indexed fields
			// will create the dict maps saying which fields are getting
			// indexed.

			// Automatically indexing by automatically generated IDs?
			// That seems uncertain.

			// arr_fields ["attached", "meta", "name"] - that looks like one field.
			//  want a way of specifying a field is attached in some way.
			//  

			//console.log('index ' + stringify(index));
			//console.log('arr_fields ' + stringify(arr_fields));
			//console.log('index_type ' + stringify(index_type));

			
			// hmmm indexing by multiple fields.
			//  making a multi-level index map object.

			var c = 0, l = arr_fields.length;
			var i = this;
			//console.log('l ' + l);
			
			while (c < l) {
				var field = arr_fields[c];

				var tField = tof(field);
				//console.log('tField ' + tField);
				//throw 'stop';
				if (tField == 'string') {
					if (!i.index_map[field]) {
						i.index_map[field] = {};
					};
					i = i.index_map[field];
				} else {
					//console.log('tField ' + tField);
					// The field could be given as an array.

					// if it's an attached field...
					//  probably best to index it as an attached field.

					// object fields...
					//  need to be careful about adding these indexes for attached objects' fields.
					//  it needs to register so that when objects are added, the relevant indexes are
					//  notified, and know to check the attached object field.

					if (tField == 'object') {
						//console.log('is object');
						//console.log('field ' + stringify(field));

						// processing attached fields here?

						var fieldStr = stringify(field);
						if (!i.index_map[fieldStr]) {
							i.index_map[fieldStr] = {};
						};
						i = i.index_map[fieldStr];


						// Then would need something for when the object is added.

						//throw 'stop';

					}



					if (tField == 'array') {
						// record it in the index as a stringified array.
						//  that would be an attached field.
						//   attached(fieldName) would look neater, but not be JSON.

						var fieldStr = stringify(field);
						if (!i.index_map[fieldStr]) {
							i.index_map[fieldStr] = {};
						};
						i = i.index_map[fieldStr];




					}


					// Could set it by the name of the field even if it's attached?
					//  Or the attachment becomes part of the name?
					//  I think fields referring to attachments could make sense.
					//   Need to keep this consistant however.
					//console.log('field ' + stringify(field));

					// if the field is an array, such as ['attached', attachedObjName, attachedObjField]
					// an attached field.







					//throw '3) stop';
				}


				
				c++;
			}
			i['indexes_by_type'] = i['indexes_by_type'] || {};
			i['indexes_by_type'][index_type] = index;
		},
		
		// may just be called index() in the collection, but more in-depth name here.
		'set_index' : function(index) {
			this.set_index_by_type_by_fields(index, index.fields, index.index_type);
		},

		'get_index_by_type_by_fields': function(arr_fields, index_type) {
			// needs to go through the fields, moving through the
			// indexes.
			var c = 0, l = arr_fields.length;
			var i = this;
			while (c < l) {
				i = i.index_map[arr_fields[c]];

				c++;
			}
			// perhaps the index has not been defined.
			if (i) {
				var index = i['indexes_by_type'][index_type];
			}

			// could there be multiple indexes of the same index type?
			// possibly could make it hold indexes with different
			// engines / data structures... but I don't think that's
			// necessary.
			// but not sure the index exists...

			return index;

		},
		
		'indexes': fp(function(a, sig) {
			if (a.l == 0) {
				var res = [];
				this.iterate_indexes(function(index) {
					res.push(index);
				});
				return res;
			} else {
				throw 'Setting indexes not supported here (yet)';
			}
		}),

		// with 'stop' function in callback
		'iterate_indexes': function(index_callback) {

			//console.log('ii');
			
			// recursive function inside to do the iteration.
			//console.log('beginning index iteration. this.index_map: ' + stringify(this.index_map));
			// the index map needs to be updated when indexes are added.

			// will be used when adding an object to the indexes.
			// also when removing object from indexes.

			// stop in this code... a bit more complex.
			
			var iterate_level = function(level) {
				each(level, function(i, v, stop1) {
					//console.log('i ' + i);
					//console.log('v ' + stringify(v));

					// i is the field name.

					var ibt = v['indexes_by_type'];
					if (ibt) {
						each(ibt, function(i2, v2, stop2) {
							// is an index, I think.
							
							var full_stop = function() {
								stop2();
								stop1();
							}
							index_callback(v2, full_stop);
						});
					}

				})

				// each(level['indexes_by_type'], function(i, v) {
				// console.log('v ' + stringify(v));
				// each(v, function(index_type, index) {
				// index_callback(index);
				// })

				// });

			}
			//console.log('this.index_map ' + stringify(this.index_map));
			iterate_level(this.index_map);

		},

		// this will be checking it against constraints instead.
		/// depricated... will be removed.
		'_____can_add_object': function(obj) {
			// think we just check for single objects right now

			var tobj = tof(obj);
			//console.log('can_add_object tobj ' + tobj);

			if (tobj == 'data_object') {
				// go through the indexes to see if all the indexes can
				// add it.
				
				// does it match the acceptance criteria?
				/*
				if (this._accepts) {
					// check whether the obj matches this._accepts
					
					// ._accepts as constraints / a Data_Object as constraints?
					//  a Data_Object with its fields set as constraints?
					//  or would the fields be fine by themselves?
					
					// want a function to test a Data_Object against fields
					
					// the indexing system does not do the acceptance test for data validation, only checking it's not conflicting.
					
					console.log('this._accepts ' + this._accepts);
					
					
				}
				*/
				
				var can_add = true;

				this.iterate_indexes(function(index) {
					// a problem iterating the indexes.

					//console.log('*ii index ' + stringify(index));

					// when adding an object to an index, it could raise
					// an error.
					// may be best to check all indexes first to see if
					// the object will be addable.

					// index.add_object(obj);

					var index_can_add = index.can_add_object(obj);

					//console.log('index_can_add ' + index_can_add);

					if (!index_can_add) {
						can_add = false;
						// break from iteration, like is possible in
						// jQuery?
					}

				});

				return can_add;

			} else {
				return false;
				
			}

		},

		'add_object': function(obj) {
			//console.log('Index System add_object ' + stringify(obj));
			return this.unsafe_add_object(obj);
			/*
			
			if (this.can_add_object(obj)) {
				return this.unsafe_add_object(obj);
			} else {
				throw 'Can\'t add object. Check unique key collisions.';
			}
			*/
		},

		
		// The index no longer will have a problem with multiple items with the same key being added.
		//  It's the uniqueness constraints which may have something to say about it. They would consult the indexes.
		
		'unsafe_add_object': function(obj) {

            //console.log('Collection_Index_System unsafe_add_object');
			// NOT adds an index.
			// should add an object to all indexes.
			// a way to iterate through all indexes?
			// maybe they won't be stored in a normal array.
			//console.log('Collection_Index_System unsafe_add_object ' + stringify(obj));
			//console.log('obj.meta ' + jsgui.stringify(obj.meta));

			// The object may have attached objects.
			//  There could be attached metadata, but we want a general way for indexing (fields on)
			//   attached data.

			// It will still get put into the object index, but the index will have to be set up to
			//  deal with attached fields properly.

			// These are not subfields... there may not be any more than just metadata.
			//  meta seems most applicable to the Resource system, and get and set will be useful
			//  methods for interacting with the resource itself. The name could possibly be available
			//   through non-meta, but that could possibly have security / reliability issues.

			this.iterate_indexes(function(index) {
				// a problem iterating the indexes.
				// It seems like the indexes were not set up.
				//console.log('2) ii index ' + stringify(index));
				// when adding an object to an index, it could raise an
				// error.
				// may be best to check all indexes first to see if the
				// object will be addable.
				index.unsafe_add_object(obj);
			});

		},
		
		
		'remove': function(obj) {
			// was remove_object
			
			// need to locate the object.
			// it may be in all indexes.
			
			// tell all indexes to remove that object, if they have it.
			
			this.iterate_indexes(function(index) {
				index.remove(obj);
				
			});
			// remove it from the sorted_kvs.
		},
		// This is going to be changed to collection_constraints
		'accepts': fp(function(a, sig) {
			// may be expressed in terms of a Data_Object
			if (sig == '[D]') {
				// we set the acceptance criteria to the Data_Object. Every object that gets potentially added to this gets checked against
				//  the Data_Object's check acceptance criteria method (though this may call other, non-oo methods)
				this._accepts = a[0];
				// could check all existing items against acceptance criteria (first)?
				
			}
			// if it's an object, could save that object? test against that?
			
			if (sig == '[o]') {
				throw 'Map object as acceptance criteria not yet supported in Collection';
				
			}
		})
		
		/*
		'clear' : function() {

		}
		*/
		
		// a function to get the appropriate index for the given fields.
		//  check if it has such an index?

	// ensure index by type and rows.

	});

	var Collection_Index = {
		'System': Collection_Index_System,
		'Sorted': Sorted_Collection_Index
	}

	//return Collection_Index;
module.exports = Collection_Index;

//});

},{"./constraint":27,"./data-object":29,"./jsgui-data-structures":36,"./jsgui-lang-essentials":38}],26:[function(require,module,exports){

/* * @module core/collection */

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(["./jsgui-lang-essentials", "./jsgui-data-structures", "./data-object", "./data-object-fields-collection", "./constraint",
	"./collection-index"],
	*/

var jsgui = require('./jsgui-lang-essentials');
var Data_Structures = require('./jsgui-data-structures');
var Data_Value = require('./data-value');
var Data_Object = require('./data-object');
var Data_Object_Field_Collection = require('./data-object-fields-collection');
var Constraint = require('./constraint');
var Collection_Index = require('./collection-index');
//

//function(jsgui, Data_Structures, Data_Object, Data_Object_Field_Collection, Constraint, Collection_Index) {

// Collection... use sligntly more than essentials?
var Collection_Index_System = Collection_Index.System;
var Sorted_Collection_Index = Collection_Index.Sorted;

var j = jsgui;
var Class = j.Class;
var each = j.each;
var eac = j.eac;
var is_array = j.is_array;
var is_dom_node = j.is_dom_node;
var is_ctrl = j.is_ctrl;
var extend = j.extend;
var clone = j.clone;
var x_clones = j.x_clones;
var get_truth_map_from_arr = j.get_truth_map_from_arr;
var get_map_from_arr = j.get_map_from_arr;
var arr_like_to_arr = j.arr_like_to_arr;
var tof = j.tof;
var is_defined = j.is_defined;
var stringify = j.stringify;
var functional_polymorphism = j.functional_polymorphism;
var fp = j.fp;
var arrayify = j.arrayify;
var mapify = j.mapify;
var are_equal = j.are_equal;
var get_item_sig = j.get_item_sig;
var set_vals = j.set_vals;
var truth = j.truth;
var trim_sig_brackets = j.trim_sig_brackets;
var iterate_ancestor_classes = j.iterate_ancestor_classes;
var is_constructor_fn = j.is_constructor_fn;

var is_arr_of_strs = j.is_arr_of_strs;
var is_arr_of_arrs = j.is_arr_of_arrs;

var Sorted_KVS = Data_Structures.Sorted_KVS;
var dobj = Data_Object.dobj;

var input_processors = j.input_processors;

var constraint_from_obj = Constraint.from_obj;
var native_constructor_tof = jsgui.native_constructor_tof;

var dop = Data_Object.prototype;

// wrap the old set_field function
var old_set_field = dop.set_field;

var new_set_field = fp(function(a, sig) {
    // some polymorphic cases which are not checked by the old one.
    if (sig == '[s,[f]]') {
        // It's a constraint / field that is a collection.
        //  The collection actually gets created, _.field_name set to be that collection.

        //console.log('new_set_field sig ' + sig);

        // then create the data type constraint...
        //  the data type for that field is a collection, and that collection has a given type that it accepts.
        var field_name = a[0];
        //console.log('field_name ' + field_name);
        var dt_constructor = a[1][0];

        //console.log('dt_constructor ' + dt_constructor);

        var coll = new Collection(dt_constructor);
        coll._data_type_constraint = new Constraint.Collection_Data_Type(dt_constructor);
        this.set(field_name, coll);

        //throw '12) new_set_field stop';
    } else {
        old_set_field.apply(this, a);
    }
});

dop.set_field = new_set_field;

/**
* @param obj
* @param query
*/
var obj_matches_query_obj = function(obj, query) {
    //console.log('obj_matches_query_obj');
    //console.log('obj ' + stringify(obj));
    //console.log('query ' + stringify(query));

    var matches = true;
    each(query, function(fieldName, fieldDef) {
        var tfd = tof(fieldDef);
        //console.log('fieldName ' + fieldName);
        //console.log('tfd ' + tfd);

        if (tfd == 'string' || tfd == 'boolean' || tfd == 'number') {
            matches = matches && obj[fieldName] === fieldDef;
            //if (!matches) stop();
        } else {
            throw 'need more work on more complex queries for collection find, iterative search'
        }
    })
    return matches;
}


// In the definition of a control's extension, we may include a 'data_type'.
//  That will translate to a _data_type_constraint being applied to all collections
//   of that defined type.
//  constraint(D);

// May need to make a new extend function to handle 'data_type' being specified at the top
//  level of the definition, similar to 'fields'.

// May add some parameters into extend, so that this will accept a function that processes
//  this value upon initialization.

// 28-Dec-2013
//  This lacks insert_at. That seems like an important part of a collection.
//  Maybe not important with various indexing systems, but important for basic usage.
//   Like inserting a control into another control's contents as the first.


/*
 * @constructor
 */

/**
* A module representing a collection.
* @exports core/collection
*/
var Collection = Data_Object.extend({

    'init': function(spec, arr_values) {
        //console.log('Collection init');
        //console.log('spec ' + stringify(spec))
        spec = spec || {};
        // Probably should act differently for an abstract collection.
        this.__type = 'collection';
        if (spec.abstract === true) {
            //console.log('init abstract collection');

            // An abstract collection does no have an index system - though maybe has got abstract indexes?
            // We may initialise it using a constructor for another function.
            //  eg Collection(Table)

            // In this case hold the item type.
            //  It is a constraint.
            //  Any objects in the collection must be an instanceOf the type given.


            // Just meaning it is a collection of a certain type.
            //  Fields will get declared in the abstract, eg when defining a Database class, it has tables as a field.

            // Will do this as the collection having a data type constraint.

            var tspec = tof(spec);
            if (tspec === 'function') {
                this.constraint(spec);
            }



            // Abstract collection of type.

            // Will not have an actual index system in abstract mode.

        } else {
            this._relationships = this._relationships || {};
            this._arr_idx = 0;
            this._arr = [];

            // Maybe some collections don't need indexing?
            this.index_system = new Collection_Index_System({
                // The collection index system could have different default ways of indexing items.
                //  Each item that gets indexed could get indexed in a different way.
                'collection' : this
            });

            var spec = spec || {};

            if (tof(spec) == 'array') {
                spec = {
                    'load_array': spec
                };
            } else {
                if (tof(spec) == 'function') {
                    if (spec.abstract === true) {
                        //throw 'Collection with abstract spec function';

                        this._abstract = true;
                    } else {

                        if (is_constructor_fn(spec)) {

                            var chained_fields = Data_Object.get_chained_fields(spec);

                            var chained_fields_list = Data_Object.chained_fields_to_fields_list(chained_fields);

                            //console.log('***** chained_fields_list ' + stringify(chained_fields_list));

                            var index_field_names = [], field_name, field_text;
                            each(chained_fields_list, function(i, v) {
                                field_name = v[0];
                                field_text = v[1];

                                var isIndexed = field_text.indexOf('indexed') > -1;
                                var isUnique = field_text.indexOf('unique') > -1

                                if (isIndexed || isUnique) {
                                    index_field_names.push([field_name]);
                                }
                            });

                            // So, that does it :)
                            var old_spec = spec;
                            spec = {
                                'constraint': spec
                            };

                            if (old_spec == String) {
                                spec.index_by = 'value';
                            }

                            if (index_field_names.length > 0) {
                                spec.index_by = index_field_names;
                            }

                        }

                    }

                } else if (tof(spec) == 'string') {
                    // May be like with the constraint above.
                    // still need to set up the constructor function.

                    var map_native_constructors = {
                        'array': Array,
                        'boolean': Boolean,
                        'number': Number,
                        'string': String,
                        'object': Object
                    }

                    var nc = map_native_constructors[spec];

                    if (nc) {
                        spec = {
                            'constraint': nc
                        };
                        if (nc == String) {
                            spec.index_by = 'value';
                        }
                    }
                }
            }

            if (is_defined(spec.items)) {
                spec.load_array = spec.load_array || spec.items;
            }
            if (arr_values) {
                console.log('load arr_values ------------');
                spec.load_array = arr_values;
            }

            // keeping these things below the expected public interface.
            if (is_defined(spec.accepts)) {
                this._accepts = spec.accepts;
            }


            if (jsgui.__data_id_method == 'init') {
                // but maybe there will always be a context. May save download size on client too.
                if (this._context) {
                    this.__id = this._context.new_id(this.__type_name || this.__type);
                    this._context.map_objects[this.__id] = this;
                } else {
                    // don't think we want a whole bunch of objects mapped like this....
                    //  IDs will be very useful when they are controls... but maybe not always needed.

                    //this.__id = new_collection_id();
                    //map_jsgui_ids[this.__id] = this;
                }

            }

            if (!this.__type) {


            }
        }


        this._super(spec);
    },

    // maybe use fp, and otherwise apply with the same params and context.

   /**
    * @func
    * @param value
    */
    'set': function(value) {
        // get the tof(value)
        var tval = tof(value);

        //console.log('tval ' + tval);
        //throw('stop');
        var that = this;
        if (tval == 'data_object') {
            this.clear();
            return this.push(value);
        } else if (tval == 'array') {
            // for an array... clear, then add each.

            this.clear();
            // Not sure about making a new collection here... but maybe we could get it defined as a normal point.

            // But we could make a DataValue for the points.
            //  Could specify that points are stored as Data_Values.
            //   Maybe fixed length of 2.

            each(value, function(i, v) {
                that.push(v);
            });

        } else {
            if (tval == 'collection') {
                // need to reindex - though could have optimization that checks to see if the indexes are the same...
                throw 'stop';
                this.clear();
                value.each(function(i, v) {
                    that.push(v);
                })

            } else {
                return this._super(value);
            }


        }

    },

   /**
    * @func
    */
    'clear': function() {
        this._arr_idx = 0;
        this._arr = [];

        this.index_system = new Collection_Index_System({
            // The collection index system could have different default ways of indexing items.
            //  Each item that gets indexed could get indexed in a different way.
            'collection' : this
        });

        this.trigger('change', {
            'type': 'clear'
        })
    },

   /**
    * @func
    */
    'stringify': function() {
        var res = [];
        if (this._abstract) {
            // then we can hopefully get the datatype name

            // if it's abstract we detect it, otherwise it should be in there.
            var ncto = native_constructor_tof(this._type_constructor);

            res.push('~Collection(')
            if (ncto) {
                res.push(ncto);
            } else {

            }
            res.push(')');

        } else {
            res.push('Collection(');
            //console.log('obj._arr ' + stringify(obj._arr));

            var first = true;
            this.each(function(i, v) {
                if (!first) {
                    res.push(', ');
                } else {
                    first = false;
                }
                res.push(stringify(v));

            })

            res.push(')');
        }
        return res.join('');
    },

   /**
    * @func
    */
    'toString': function() {
        return stringify(this._arr);

    },

   /**
    * @func
    */
    'toObject': function() {
        var res = [];
        this.each(function(i, v) {
            res.push(v.toObject());
        });
        return res;
    },

   /**
    * @func
    * @param ...
    */
    'each' : fp(function(a, sig) {
        // was callback, context
        // ever given the context?

        if (sig == '[f]') {
            return each(this._arr, a[0]);
        } else {

            if (sig == '[X,f]') {
                // X for index

                // we use the order of the index.
                //  possibly we can iterate using the index itself, maybe with that same callback.

                var index = a[0];
                var callback = a[1];
                return index.each(callback);

            } else {
                if (a.l == 2) {
                    return each(this._arr, a[0], a[1]);
                }
            }
        }
    }),

    'eac' : fp(function(a, sig) {
        // was callback, context
        // ever given the context?

        if (sig == '[f]') {
            return eac(this._arr, a[0]);
        } else {

            if (sig == '[X,f]') {
                // X for index

                // we use the order of the index.
                //  possibly we can iterate using the index itself, maybe with that same callback.

                var index = a[0];
                var callback = a[1];
                return index.eac(callback);

            } else {
                if (a.l == 2) {
                    return eac(this._arr, a[0], a[1]);
                }
            }
        }
    }),


   /**
    * @func
    */
    '_id' : function() {
        // gets the id.


        if (this._context) {
            this.__id = this._context.new_id(this.__type_name || this.__type);
        } else {
            if (!is_defined(this.__id)) {

                // get a temporary id from somewhere?
                //  but the collection should really have a context...
                //  or without a context, the collection is its own context?

                // Won't go setting the ID for the moment.

                //this.__id = new_collection_id();
            }
        }
        return this.__id;

    },


   /**
    * @func
    */
    'length': function() {
        return this._arr.length;
    },


   /**
    * @func
    * @param ...
    */
    'find': fp(function(a, sig) {


        // var found = coll_presidents.find([['name', 'Franklin Pierce'], ['party', 'Republican']]);

        // it can be an array of fields.
        //console.log('collection find ' + sig);
        //console.log('a ' + stringify(a));
        if (a.l == 1) {

            // Make it so that index_system handles object queries...
            //  field: value

            var index_system_find_res = this.index_system.find(a[0]);
            //console.log('index_system_find_res ' + index_system_find_res);

            // How to know if these have been indexed or not.
            //  Perhaps the index system will only do certain queries.
            //  index_system.can_find would help.
            if (index_system_find_res === false) {
                // let's do the search ourself.
                // need to go through every object to see if it matches the search query.
                // Though the results may be better returned as a collection.
                var foundItems = [];
                each(this, function(index, item) {
                    //console.log('index ' + index);
                    //console.log('item ' + stringify(item));


                    // check each data item for the match.
                    throw 'stop';
                })
            } else {
                return index_system_find_res;
            }
            // if there is only one index in the system then the search will be simple.
        }

        // [o,s]
        //  finding a string value that's been specified using an object.
        //   It may indicate an attached field.
        //   We'll still be asking the index_system to find it.
        //   Need to be sure that [o,s] fields get indexed properly, and other indexes who's fields
        //    are specified by an object.
        //   {fieldName: {}} equivalent to 'fieldName'
        //    this will allow extended information to be added.
        //   We will be aware of what we are indexing, such as attached field names.
        //    Code when the index gets created
        //    Code when an item gets added to that index.
        //     Will need to check attached objects.

        if (sig == '[o,s]') {
            return this.index_system.find(a[0], a[1]);
        }

        //




        // and if looking for more than one thing...
        if (sig == '[s,s]') {
            return this.index_system.find(a[0], a[1]);
        }
        if (sig == '[a,s]') {
            return this.index_system.find(a[0], a[1]);
        }
        if (sig == '[s,o]') {
            var propertyName = a[0];
            var query = a[1];
            //console.log('propertyName ' + propertyName);
            //console.log('query ' + stringify(query));
            // Maybe return a Collection, not an array.
            // don't consult the index system.
            var foundItems = [];
            // for each object we need to go deeper into the fields.
            each(this, function(index, item) {
                //console.log('index ' + index);
                //console.log('item ' + stringify(item));

                //var matches = item.match(query);

                var itemProperty = item.get(propertyName);
                //console.log('itemProperty ' + stringify(itemProperty));

                //console.log('tof(itemProperty) ' + tof(itemProperty));
                var tip = tof(itemProperty);

                if (tip == 'array') {
                    // possibly should be a collection
                    each(itemProperty, function(i, v) {
                        //console.log('v ' + stringify(v));
                        var matches = obj_matches_query_obj(v, query);
                        //console.log('matches ' + matches);

                        if (matches) {
                            foundItems.push(v);
                        }
                    })
                }
                // check each data item for the match.
                //throw '!stop';
            })
            return new Collection(foundItems);
        }
    }),
    // get seems like the way to get unique values.


   /**
    * @func
    * @param ...
    */
    'get' : fp(function(a, sig, _super) {




        // integer... return the item from the collection.
        //console.log('collection get sig ' + sig);
        if (sig == '[n]' || sig == '[i]') {
            return this._arr[a[0]];
        }

        // getting by it's unique index?
        //  this may again refer to getting a property.

        if (sig == '[s]') {

            var ix_sys = this.index_system;
            var res;
            if (ix_sys) {
                //console.log('ix_sys', ix_sys);
                var pui = ix_sys._primary_unique_index;
                res = pui.get(a[0])[0];
            }

            if (res) {
                return res;
            }



            // Works differently when getting from an indexed collection.
            //  Need to look into the index_system
            //  there may be a primary_unique_index




            return Data_Object.prototype.get.apply(this, a);

        }
        // may take multiple params, specifying the fields in the
        // unique index.

    }),


    // insert_before could be useful.
    //  In some HTML controls want to insert one control before another one.


    // Will a control always know what position it's in?

   /**
    * @func
    * @param ...
    */
    'insert': function(item, pos) {
        // use array splice...
        //  then modify the index somehow.
        //  perhaps add 1 to each item's position past that point.
        //  may mean n operations on the index.
        //   some kind of offset tree could be useful for fast changes and keeping accurate lookups.

        this._arr.splice(pos, 0, item);

        // index system notify_insertion
        //  so the index system can make the adjustments to the other items.


        // then call the change event.
        //  and have event details saying an item i has been inserted at position p.
        //   for controls, that should be enough to render that control and put it onto the screen
        //   if the context is active.

        this.index_system.notify_insertion(pos);


        this.trigger('change', {
            'name': 'insert',
            'item': item,
            'pos': pos
        });




    },

    // may have efficiencies for adding and removing multiple items at once.
    //  can be sorted for insertion into index with more rapid algorithmic time.

   /**
    * @func
    * @param ...
    */
    'remove': fp(function(a, sig) {
        var that = this;

        //console.log('sig ' + sig);
        //throw 'stop';

        if (sig == '[n]') {

            var own_id = this._id();

            // remove the item at that position.

            var pos = a[0];
            var item = this._arr[pos];

            var o_item = item;
            //console.log('*');
            //console.log('item ' + stringify(item));

            var spliced_pos = pos;
            this._arr.splice(pos, 1);
            this._arr_idx--;
            var length = this._arr.length;
            while (pos < length) {

                // reassign the stored position of the item

                var item = this._arr[pos];

                item.relationships[own_id] = [that, pos];
                //console.log('');
                //console.log('item._parents[own_id] ' + stringify(item._parents[own_id]));
                pos++;
            }

            // need to remove that item from the index system as well.

            this.index_system.remove(o_item);
            // but is it no longer actually there?
            //  seems to be gone now.

            var e = {
                'target': this,
                'item': item,
                'position': spliced_pos
            }

            this.raise_event(that, 'remove', e);
        }

        // and if we are removing by a string key...

        if (sig == '[s]') {
            var key = a[0];

            // get the object...

            var obj = this.index_system.find([['value', key]]);

            //console.log('obj ' + stringify(obj));
            //console.log('tof(obj) ' + tof(obj));
            //throw 'stop'

            // and get the position within the parent.

            var my_id = this.__id;
            //console.log('my_id ' + my_id);
            //throw 'stop';

            var item_pos_within_this = obj[0]._relationships[my_id];
            //console.log('item_pos_within_this ' + item_pos_within_this);
            //throw 'stop';

            this.index_system.remove(key);
            this._arr.splice(item_pos_within_this, 1);

            // then adjust the positions downwards for each item afterwards.



            for (var c = item_pos_within_this, l = this._arr.length; c < l; c++) {
                //console.log('c ' + c);
                var item = this._arr[c];
                item._relationships[my_id]--;
            }

            var e = {
                'target': this,
                'item': obj[0],
                'position': item_pos_within_this
            }

            this.raise_event(that, 'remove', e);

        }

    }),

   /**
    * @func
    * @param obj_key
    */
    'has': function(obj_key) {
        // will operate differently depending on how the collection is being used.
        //console.log('this._data_type_constraint ' + stringify(this._data_type_constraint));
        if (this._data_type_constraint) {
            //console.log('this._data_type_constraint.data_type_constructor ' + stringify(this._data_type_constraint.data_type_constructor));
            if (this._data_type_constraint.data_type_constructor) {
                if(this._data_type_constraint.data_type_constructor === String) {
                    // collection of strings - does it have that string?
                    //console.log('this.index_system ' + stringify(this.index_system));
                    var found = this.index_system.find('value', obj_key);
                    //console.log('found ' + stringify(found));
                    //throw 'stop';
                    //return !!found;
                    return found.length > 0;
                }
            }
        }
    },

    // Set still operates as it does from the Data_Object.

    // Unique index being replaced with a constraint, and it also makes the index when the constraint is put in place if the index is not already there.


   /**
    * @func
    * @param ...
    */
    'get_index': fp(function(a, sig) {
        if (sig == '[s]') {
            return this.index_system.search(a[0]);
        }

    }),

    // has_index may be useful... perhaps this should be changed to index_by?
    //  other people may think this means it has an index (int) and returns that.

    // just need to be very clear about what this function does, could have an index_by function too.

    //

    // renamed index(), was index_by()

    // 'index' is actually going to be setting up constraints.
    //  // dealing with a layer of constraints may make sense, but it should probably be exposing the indexes.

    // Don't want to change the syntax, and make developers have to type 'Constraint' all the time, but I think that Constraints is the right
    //  way of expressing the underlying system, partly to aid transitions to databases, and its proven to be a flexible (inflexible) model.

   /**
    * @func
    * @param field
    */
    'find_unique_constraint': function(field) {
        // can be one field, or an array.

        // Perhaps the order of the fields here should be rearranged to alphabetical?
        //  In a constraint, the order of the fields should not matter - except it would set up an index using the order of the fields specified.
        //  the constraint could have the fields rearranged in alphabetical order.

        // There will be a bit of code bloat in some lower level components because they are not using Data_Object and Constraint classes themselves.
        //  Finding the right constraint out of the existing constraints is necessary when potentially adding a new constraint.
        //  Constraints having an alphabetically sorted list of fields?
        //  It is as though we can't use unique constraint code for this where otherwise it could have been used.

        // fields in alphabetical order...

        // want to be able to break out of each loops as well.
        //  posibly (i, v, break) and call the break function?

        var item = null;

        if (tof(field) == 'array') {

        } else if (tof(field) == 'string'){
            // it's just one string.
            each(this._unique_constraints, function(i, v, stop) {
                // does it match the field?
                if (v.fields === field) {
                    item = v;
                    stop();
                }
            })
        }
        //console.log('item ' + item);
        return item;
    },

    // The constraints will also be available, but they will likely make for a less user-friendly interface than fields.


   /**
    * @func
    * @param ...
    */
    'fields': fp(function(a, sig) {

        //console.log('Collection fields sig ' + sig);
        //console.log('Collection fields a ' + stringify(a));
        var that = this;
        // this will refer to the fields of the data_object_constraint.

        if (sig == '[o]') {
            // use a field definition constraint
            //  (a different way of doing the constraint, using json-like object, not using a Data_Object constructor.

            each(a[0], function(i, v) {
                that.set_field(i, v);
            });

            // set the constraints

            that.constraint(a[0]);

        } else {
            if (!this._data_object_constraint) {
                this._data_object_constraint = Constraint.from_obj(new Data_Object());
            }
            var doc = this._data_object_constraint;

            if (a.l == 0) {
                return doc.data_object.fc.get();
            }
            // if given an array, set the fields.

            //console.log('a.l ' + a.l);

            if (a.l == 1 && tof(a[0] == 'array')) {
                //console.log('array 1');
                return doc.data_object.fc.set(a[0]);
            }
        }


    }),

    // Getting quite in depth with generality and polymorphism here.
    //
    //  Perhaps there should be a _fields object.
    //  So far we have used constraints - there will be field constraints when fields are specified.
    //   Maybe it makes sense... a 'field' may correspond with indexes as well.

    // May be the fields from the prototype, as well as fields that have been added.

   /**
    * @func
    * @param ...
    */
    'set_field': fp(function(a, sig) {
        //console.log('set_field');
        // sets a field?
        //  maybe 'set' is a better word because it would overwrite existing fields.

        // will be able to add an individual field
        //  name and field type as string...
        var that = this;
        // we may have a data_def_constraint?
        //var that = this;

        // Fields get created using constraints.


        // Constraint from a new Data_Object?
        //  Not sure of the need of this.
        var doc = that._data_object_constraint = that._data_object_constraint || Constraint.from_obj(new Data_Object());


        //var doc = that._data_object_constraint ||
        //console.log('doc ' + stringify(doc));



        //console.log('set_field sig ' + sig);
        //console.log('set_field a ' + stringify(a));

        // Setting a field on a collection...
        //  Setting a constrinat?


        //if (doc) {
            if(a.l == 2 && tof(a[0]) == 'string') {
                doc.data_object.fc = doc.data_object.fc || new Data_Object_Field_Collection();

                // May need to set up indexing on the fields as well.


                return doc.data_object.fc.set(a[0], a[1]);
            }
        //}


    }),


   /**
    * @func
    * @param ...
    */
    'remove_field': fp(function(a, sig) {
        var doc = this._data_object_constraint;

        if (doc) {
            if (sig == '[s]') {
                return doc.data_object.fc.out(a[0]);
            }
        }


    }),
    // A constraint may reference an index.
    // It may need to create the index if it does not already exist.

    // Give a data type to give a type constraint.

   /**
    * @func
    */
    'get_data_type_constraint': function() {
        // there may just be one ._data_type_constraint.
        //  not having all the constraints listed together.

        return this._data_type_constraint;


    },

   /**
    * @func
    * @param ...
    */
    'constraint': fp(function(a, sig) {
        if (sig == '[]') {
            // Get all of the constraints.

            // if no constraints, return null.
            var res = null;

            if (this._data_type_constraint) {
                res = {
                    'data_type': this._data_type_constraint
                }
            }
            if (this._data_object_constraint) {
                res = res || {};
                res.data_object = this._data_object_constraint;
            }
            if (this._data_def_constraint) {
                res = res || {};
                res.data_def = this._data_def_constraint;
            }
            return res;
        }

        if (sig == '[o]') {
            this._data_def_constraint = new Constraint.Collection_Data_Def(a[0]);
        }

        if (sig == '[f]') {
            if (a[0] === Number) {
                //var cdtc = new Constraint.Collection_Data_Type(a[0]);
                this._data_type_constraint = new Constraint.Collection_Data_Type(a[0]);
                return this._data_type_constraint;
            }
            if (a[0] === String) {
                //var cdtc = new Constraint.Collection_Data_Type(String);
                this._data_type_constraint = new Constraint.Collection_Data_Type(a[0]);
                //console.log('this._data_type_constraint ' + this._data_type_constraint);
                return this._data_type_constraint;
            } else if (is_constructor_fn(a[0])) {

                //console.log('is_constructor_fn ');
                var data_type_constructor = a[0];
                // set up the data type constraint.
                //  can have a Type_Constraint on a collection... each object in the collection must satisfy that type.
                //   different to having it satisfy a particular data_object's constraints.
                var dtc = this._data_type_constraint;
                if (dtc) {
                    var cdtc = this._data_type_constraint.data_type_constructor;
                    if (cdtc && cdtc === data_type_constructor) {
                        //console.log('returning dtc');
                        return dtc;
                    }
                }
                this._data_type_constraint = new Constraint.Collection_Data_Type(data_type_constructor);
                //console.log('this._data_type_constraint ' + this._data_type_constraint);
                return this._data_type_constraint;
                // have a look at the existing data_type_constraint

            }
        }
        // ['unique', 'isbn-13']
        // ['unique', ['school_id', 'school_assigned_student_id']]

        // will need to ensure there is an index for that set of fields.

        // is it an array?
        //  could be an array of different constraints

        if (sig == '[D]') {
            var constraint = constraint_from_obj(a[0]);
            this._data_object_constraint = constraint;
        }
        if (sig == '[[s,s]]') {
            // A single constraint, with one string parameter (probably its field)

            var constraint_def = a[0];
            var constraint = constraint_from_obj(constraint_def);

            var c_type = constraint._constraint_type;
            //console.log('c_type ' + c_type);

            if (c_type == 'unique') {
                // ensure it has that unique constraint.
                //  this will mean going through all unique constraints, or checking its own index of them
                //  may have a bit of optimization here, but not using collections to implement this.
                //  collections will be used in many other things though. Will be useful for representing data models as well.

                // unique constraints,
                // NOT NULL,
                // Relationship
                // Check

                // The relationship constraints, when set up, will assist in creating the data models that accuratly model those relationships.
                // check if it already has that unique constraint.
                this._unique_constraints = this._unique_constraints || [];
                // get the index...
                // index_system.find_indexes_with_fields
                // get_unique_constraint?
                // find_unique_constraint(fields)
                //  that will be a function that does the specific search for an existing unique constraint with those fields.
                //  returns false if not found.
                // will use find_unique_constraint to see if there are already matching unique constraints.
                var field_name = constraint_def[1];
                //console.log('field_name ' + field_name);
                var existing_unique_constraint = this.find_unique_constraint(field_name);
                //console.log('existing_unique_constraint ' + existing_unique_constraint);

                if (existing_unique_constraint) {
                    return existing_unique_constraint;
                } else {

                    // look to see if there is an index that supports the constraint.
                    //  does not have to be a sorted index, necessarily.

                    // let's get an index, with those fields.

                    // it may be worth having the fields of various indexes sorted by name automatically.
                    //  would be useful for quick algorithmic comparison of which fields they are indexing.

                    // The optimal one would be the index in the same order, but failing that, an index with the fields in a different order can be used.
                    //  The order on the constraints does not matter so much, but it is nice to preserve whichever order the user specified initially.
                    // This will take more time and effort... but not a massive amount before the system is ready to be used.

                    // I think I should get my site running so it can host discussion about the system.
                    //  Having documentation on my site would be very good. It would be nice to measure the traffic and interest.

                    // There will be some features about doing some specific things.
                }
            }
        }
    }),

    // also could be expressed as a constraint and then the index is automatically put in place.
    // However, when an index is set, it's not setting a unique constraint automatically.

    // basically ensure_index for the moment.
    //  however, will also return the index, and with no params will get all indexes.
    //  will have nice syntax with ensuring multiple indexes at once.

    // Should possibly present nicer syntax to MongoDB with a wrapper.
    //  May have some different data wiring / connection options.
    // Likely to be best to do a lot in the abstract so changes can be viewed before being made.

   /**
    * @func
    * @param fields
    */
    'get_unique_constraint': function(fields) {
        if (tof(fields) == 'string') fields = [fields];
        each(this._unique_constraints, function(i, unique_constraint) {
            var uc_fields = unique_constraint.fields;
            //console.log('uc_fields ' + stringify(uc_fields));

            if (are_equal(uc_fields, fields)) return unique_constraint;
        });
    },

   /**
    * @func
    * @param ...
    */
    'unique': fp(function(a, sig) {
        var that = this;
        //console.log('a[0] ' + stringify(a[0]));

        if (sig == '[s]') {
            return this.unique([a[0]]);
        }
        if (tof(a[0]) == 'array') {
            if (is_arr_of_arrs(a[0])) {
                //console.log('is_arr_of_arrs');
            }
            if (is_arr_of_strs(a[0])) {
                var existing_uc = this.get_unique_constraint(a[0]);
                if (existing_uc) return existing_uc;
                var new_uc = new Constraint.Unique({
                    'fields': a[0]
                });
                this._unique_constraints = this._unique_constraints || [];
                this._unique_constraints.push(new_uc);
                var idx = this.index(a[0]);
                //console.log('');
                //console.log('idx ' + stringify(idx));
            }
        }
    }),

    // indexes
    //  will get all the indexes... may set a particular index? Or replace the indexes?

   /**
    * @func
    * @param ...
    */
    'indexes': fp(function(a, sig) {
        if (a.l == 0) {
            // get all indexes.
            // will look at the index system, and get the indexes from that.
            var index_system = this.index_system;
            //console.log('index_system ' + index_system);
            var indexes = index_system.indexes();
            return indexes;
        }
    }),
    // index_by - it sounds nice, reads well in code / samples.
    //  may just use the index() method, but that could call index_by to make things a bit clearer.


   /**
    * @func
    * @param ...
    */
    'index_by': fp(function(a, sig) {
        var that = this;
        //console.log('index_by a ' + stringify(a));
        //console.log('a.l ' + a.l);
        //console.log('index_by sig ' + sig);
        //console.log('a', a);
        //throw('stop');
        //console.log('tof(a[0]) ' + tof(a[0]));
        //if (a.l == 1 && tof(a[0]) == 'array') {
        if (sig == '[a]') {
            console.log('a[0] ' + stringify(a[0]));

            if (is_arr_of_strs(a[0])) {
                // then it's a single index.
                //console.log('is_arr_of_strs ' + stringify(a[0]));
                var relevant_index = this.index_system.get_index_starting(a[0]);
                //console.log('relevant_index ' + relevant_index);
                if (relevant_index) {
                    return relevant_index;

                } else {
                    var index_spec = a[0];
                    var new_index = this.index_system.ensure_index(index_spec);
                    return new_index;
                }
            }
            // If it's an array of arrays... it's an array of indexes.
            if (is_arr_of_arrs(a[0])) {
                // deal with each of them in turn.
                //console.log('it is_arr_of_arrs');
                each(a[0], function(i, specified_index) {
                    that.index(specified_index);
                });
            }
        }

        // otherwise, we'll be taking a map of what to index and what type of index to use there.

        // get the index, based on that name?
        if (sig == '[s]') {

            // Tell the index to sort itself based on that value.



            return that.index({
                'sorted': [[a[0]]]
            });
        }

        if (sig == '[o]') {
            //console.log('object sig');

            var index_map = a[0];
            //console.log('index_map ' + stringify(index_map));

            each(index_map, function(index_type, index_definition) {

                //console.log('index_definition', index_definition);
                //console.log('index_type ' + index_type);
                if (index_type == 'sorted') {
                    // set up the individual index of the specified type.

                    //if (index_type == 'sorted') {
                    //console.log('index_definition ' + stringify(index_definition));
                    if (tof(index_definition) == 'array') {
                        // is it an array of strings? then it is the fields?
                        // is it an array of arrays?
                        if (is_arr_of_arrs(index_definition)) {
                            // each index, each field in the index
                            var indexes = [];



                            each(index_definition, function(i, individual_index_fields) {
                                // then will have a bunch of fields
                                //console.log('individual_index_fields ' + stringify(individual_index_fields));

                                // Setting the fields of a Collection_Index...
                                //  need to be careful when the field is an attached object.
                                //   may use JSON notation for the attachement.
                                //   likely to disallow quotes and (square) brackets in field names.



                                // Make it so Sorted_Collection_Index can handle attached objects.
                                //  fields set like [{"attached": {"meta": "name"}}]
                                //  where a field is specified as an object,

                                // So the index gets created.
                                //  It has those fields...
                                //   where to they get made within the Sorted_Collection_Index constructor?

                                //console.log('individual_index_fields', individual_index_fields);


                                var index = new Sorted_Collection_Index({
                                    'fields' : individual_index_fields
                                });

                                // These collection indexes should have a 'get' function.

                                that.index_system.set_index(index);
                                indexes.push(index);

                            });

                            //console.log('indexes', indexes);

                            that.index_system._primary_unique_index = indexes[0];
                            return indexes[0];
                        }
                        if (is_arr_of_strs(index_definition)) {
                            // one index, with fields
                        }

                    }

                    //}
                }
            })
        }
    }),

   /**
    * @func
    * @param ...
    */
    'index': fp(function(a, sig) {

        if (a.l == 1) {
            return this.index_by(a[0]);
        }


    }),


   /**
    * @func
    * @param obj
    */
    'test_object_against_constraints': function(obj) {
        // will do the test for the various constraints
        //console.log('test_object_against_constraints');
        //var res_test_data_object_constraint =
        //console.log('this._type_constructor ' + this._type_constructor);
        //console.log('this._data_object_constraint ' + stringify(this._data_object_constraint));
        //console.log('this._data_type_constraint ' + stringify(this._data_type_constraint));

        //console.log('obj ' + stringify(obj));
        // Could also have a constructor type - can check instance of

        if (this._type_constructor) {
            if (!obj instanceof this._type_constructor) return false;
        }

        if (this._data_object_constraint) {
            // not sure why this will have a _data_object_constraint in various cases.
            //console.log('this._data_object_constraint', this._data_object_constraint);

            if (!this._data_object_constraint.match(obj)) return false;
        }

        if (this._data_type_constraint) {
            // test against that constraint
            if (!this._data_type_constraint.match(obj)) return false;
        }

        var that = this;

        var res = true;
        each(this._unique_constraints, function(i, unique_constraint) {
            //console.log('unique_constraint ' + stringify(unique_constraint));
            // then test against that unique constraint.

            // get the fields of the constraint, then try to get a record with those fields

            var uc_fields = unique_constraint.fields;
            //console.log('uc_fields ' + stringify(uc_fields));

            // then attempt to 'get', using these fields.
            //  performing a record count would be more efficient though.
            //  'has' search, returns boolean

            var find_params = [];
            each(uc_fields, function(i, field_name) {
                // get the value

                var field_value = obj.get(field_name);
                find_params.push([field_name, field_value]);

            });
            //console.log('find_params ' + stringify(find_params));

            var found = that.find(find_params);
            //console.log('found ' + stringify(found));

            if (found && found.length > 0) {
                res = false;
            }
        });
        return res;
    },


   /**
    * @func
    * @param value
    */

    // Sometimes wrap a normal JS obj as a Data_Value, Data_Object or Collection?



    'push': function(value) {

        var tv = tof(value);
        //console.log('1) collection push value: ' + stringify(value));
        //console.log('--------------------')
        //console.log('push tv ' + tv);

        if (tv == 'object') {

            var dtc = this._data_type_constraint;
            //  but we can have an object definition constraint?
            //  is that a type of data_type_constraint?
            //console.log('dtc ' + dtc);

            if (dtc) {
                var dtcon = dtc.data_type_constructor;
                //console.log('dtcon ' + dtcon);
                value = new dtcon(value);
            } else {
                var ddc = this._data_def_constraint;
                //console.log('ddc ' + stringify(ddc));

                // need to see if it matches the constraint.
                //console.log('value ' + stringify(value));
                // Will need something recursive to see if something matches a data_def.
                //  in the data_def_constrint code.
                var match = true;
                if (ddc) match = ddc.match(value);
                //console.log('match ' + match);

                if (!match) {
                    throw 'Does not match data_def constraint';
                } else {
                    // need to create a new data_object with that data_def?
                    //  or could set the fields?
                    //  Fields could respond to data_def.
                    //   But data_def could encompass more than just fields.

                    // And a Data_Object could have a data_def_constraint too.
                    //  That would also set its fields.

                    // Will just set the fields with the data_def for now???
                    //value = dobj(value);
                    // Would be better to make an enhanced_data_object here

                    //value = new
                    //console.log('* value ' + stringify(value));
                    if (ddc) {
                        value = dobj(value, ddc.data_def);
                    } else {
                        value = dobj(value);
                    }
                    //console.log('value ' + stringify(value));
                    // set its constraints...
                    value.constraints(ddc);
                    // Using the collection data definition constraint, should be able to set the inner constaint of the
                    //  data_object. May just use the same object rather than cloning it.
                }

                //value = dobj(value);
            }
            tv = tof(value);
            //console.log('tv ' + tv);
            //console.log('value ' + value);
        }

        //console.log('collection push tv: ' + tv);
        //console.log('2) collection push value: ' + stringify(value));
        // so, a data_item gets added at this._arr_idx

        // also need to be add a collection to the collection.
        //  that will be a lot like with Data_Object.
        //   There can't really be full automatic indexing here.

        if (tv == 'collection') {
            //console.log('1) pre test_object_against_constraints');
            var constraints_test_res = this.test_object_against_constraints(value);
            //console.log('constraints_test_res ' + constraints_test_res);
            if (constraints_test_res) {
                this.index_system.unsafe_add_object(value);
                var pos = this._arr.length;
                this._arr.push(value);

                // but does this have a context?
                //  A content collection should have the same context as the control it's in.
                value.parent(this, pos);

                var e = {
                    'target': this,
                    'item': value,
                    'position': pos,
                    'type': 'insert'
                }
                //console.log('adding collection to collection event being raised');
                // raise a change event.
                //  have a change type, like add or insert.

                //this.raise_event('add', e);
                this.raise_event('change', e);

                this._arr_idx++;
            } else {
                var stack = new Error().stack
                //console.log( stack );
                throw('Collection constraint(s) not satisfied');
            }
        }
        if (tv == 'data_object' || tv == 'control') {

            //console.log('pre constraints test');
            //console.log('2) pre test_object_against_constraints');
            var constraints_test_res = this.test_object_against_constraints(value);
            //console.log('post constraints test');
            // the uniqueness test is an important one too.
            //  when a unique constraint is set up, the index should be created.
            //console.log('constraints_test_res ' + constraints_test_res);
            // would be testing against a unique constraint.
            //  can test to see if a new object would violate a collection constraint?
            //console.log('constraints_test_res ' + constraints_test_res);
            if (constraints_test_res) {

                //console.log('pre unsafe_add_object value', stringify(value));

                //console.log('pre this.index_system.unsafe_add_object');

                this.index_system.unsafe_add_object(value);

                //console.log('post this.index_system.unsafe_add_object');
                // gets added to the index... but is its position within this collection stored too?
                //console.log('post unsafe_add_object');
                // Things do get a bit complicated with needing the positions within the collection to do various things.
                // Don't want to rely on it always being stored in the indexes though.

                var pos = this._arr.length;
                this._arr.push(value);
                // the position within the parent / the parent's array.
                //console.log('pos ' + pos);
                var e = {
                    'target': this,
                    'item': value,
                    'position': pos,
                    'type': 'insert'
                }
                //value._relationships[this._id()] = this._arr_idx;
                //console.log('adding data_object to collection event being raised');
                // this, and the position it's going to.


                // Should set the parent and the position within the parent.
                //  __index perhaps?

                value.parent(this, pos);

                // item can have multiple parents... that should be possible.
                //console.log('pre raise add event');

                // This bit is taking a while.
                //  Not sure why!!! Has to do with objects being put in a large collection probably.
                //  Too many things, in the wrong context, getting notified.
                //console.log('pre collection raise change event');

                this.raise_event('change', e);
                // raise event being called, but not fired as expected???

                //console.log('post raise change event');


                //console.log('post raise add event');
                // accessed using a 'parent' array / mini-collection?
                // mini-collection, handling collections without the bells and whistles?
                //  or collections with some things disabled?

                // value.parent(this)

                // location within parent...
                //  should probably / possibly make this clearer in code?
                //  not so sure that the position tracking will work all the times.
                //  may be best to separate the position, or give it some kind of variable name.
                // will do more work and testing on this later.
                this._arr_idx++;
            } else {
                var stack = new Error().stack
                //console.log( stack );
                throw('Collection constraint(s) not satisfied');
            }
            // check if the index system can add the object.
        }

        if (tv == 'array') {
            // wrap it or not? could put it in another collection.
            //  will that be useful for a function's parameters?
            //  that would maintain the whole system with the wrapper and relationships.
            // I think we do that... turn it into a new collection and put it in there.
            //  Will get for some more complex behaviours, but they could prove pretty useful.
            // Could make a copyleft licence wrapper - any code that runs it needs to be wrapped by that function.
            // for the moment, I think we create a new collection wrapper to hold the array.
            // need to basically add an array object to the collection, but have it wrapped.

            //var coll = new Collection(value);
            //return this.push(coll);
            return this.push(new Collection(value));
        }

        if (tv == 'string' || tv == 'number') {

            //console.log('tv ' + tv);
            // still need to check if it matched the collection constraint(s).
            //console.log('3) pre test_object_against_constraints');



            var constraints_test_res = this.test_object_against_constraints(value);
            //console.log('constraints_test_res ' + constraints_test_res);
            if (constraints_test_res) {
                var dv = new Data_Value({'value': value});
                //console.log('dv ' + stringify(dv));
                var pos = this._arr.length;
                // Should not need a context or ID just to be put in place.
                this._arr.push(dv);
                var e = {
                    'target': this,
                    'item': dv,
                    'position': pos,
                    'type': 'insert'
                }
                this.raise_event('change', e);

                if (tv == 'string') {
                    // indexing the value
                    this.index_system.unsafe_add_object(dv);
                }
            } else {
                console.trace();
                throw('wrong data type');
            }
        }
        //this._arr_idx++;
        return value;
    },


   /**
    * @func
    * @param value
    */
    //'add': function(value) {
    //    return this.push(value);
    //},


   /**
    * @func
    * @param arr
    */
    'load_array': function(arr) {
        var that = this;
        //console.log('load_array arr ' + stringify(arr));
        // there could be a data type that this is expecting... a constraint?
        //  could have a data type constructor.
        // so, if the item given is not a Data_Object, we can try making the Data_Object, and putting it in place.
        var dtc = this._data_type_constraint;
        //console.log('dtc ' + dtc);

        // May also need to change ID values on the objects?
        //  Create clones of the objects with different ID values?

        // Be able to accept items being pushed that will have IDs changed?

        // Should have a data_type_constructor with typed collections.



        if (dtc) {
            // is a Collection_Data_Type_Constraint
            var data_type_constructor = dtc.data_type_constructor;
            //console.log('data_type_constructor ' + data_type_constructor);

            /*
            each(arr, function(i, v) {
                that.push(v);
            });
            */
            for (var c = 0, l = arr.length; c < l; c++) {
                that.push(arr[c]);
            }


        } else {
            /*
            each(arr, function(i, v) {

                that.push(v);
            });
            */
            for (var c = 0, l = arr.length; c < l; c++) {
                that.push(arr[c]);
            }
        }
        this.raise_event('load');
    },


   /**
    * polymorphic version
    * @name values
    * @func
    * @param {string} parm1 - param description
    * @memberof module:core/collection
    * @inner
    */

   /**
    * @func
    * @param ...
    * @variation 2
    */
    'values': fp(function(a, sig) {
        if (a.l == 0) {
            return this._arr;
        } else {
            var stack = new Error().stack;
            //console.log(stack);
            //console.log('');
            //console.log('sig ' + sig);
            // should be setting the values.
            throw 'not yet implemented';
        }
    }),


   /**
    * @func
    */
    'value': function() {
        var res = [];
        this.each(function(i, v) {
            if (typeof v.value == 'function') {
                //res[i] = v.value();
                res.push(v.value());
            } else {
                res.push(v);
            }

        });
        return res;
    }

    // insert_at seems very important.



    // all the collection's values
    // values() will get or set all the values.

// Could use a (new) extension of Data_Object.extend.
//  We want it so that we can specify a 'data_object' when defining a class, and this
//   sets up a ._data_object_constraint using .constraint(D)
//    though we are giving it a Data_Object subclass constructor.





});

var p = Collection.prototype;
p.add = p.push;


/**
 * @function
 * @static
 */
Collection.extend = function() {
    var a = arguments;
    var args = [a[0]];
    // call Data_Object.extend with another function for post-initialization?

    if (a[0].data_object) {
        //console.log('extending a Collection with .data_object');
        args.push(function() {
            // post-init function to get called after the init function.

            this.constraint(a[0].data_object);
        })
        //throw 'stop';
    }
    // execute a post-init function in order to set the constraint in some circumstances?
    //var args = [a[0]]


    var res = Data_Object.extend.apply(this, args);


    return res;

}

module.exports = Collection;

	//return Collection;
//});

},{"./collection-index":25,"./constraint":27,"./data-object":29,"./data-object-fields-collection":28,"./data-value":30,"./jsgui-data-structures":36,"./jsgui-lang-essentials":38}],27:[function(require,module,exports){
/*

if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(["./jsgui-lang-essentials"], function(jsgui) {
	
    */
    var jsgui = require('./jsgui-lang-essentials');

    /**
    * Constraints module.
    *
    *  #####  Classes hierarchy:
    *
    * &nbsp;&nbsp;&nbsp;      {@link module:core/constraint.Constraint|Constraint} <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;       <mark>  {@link module:core/constraint.Data_Object_Constraint|Data_Object_Constraint} </mark><br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;         {@link module:core/constraint.Data_Object_Def_Constraint|Data_Object_Def_Constraint} <strong>Data_Object_Def_Constraint</strong> <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;         {@link module:core/constraint.Field_Constraint|Field_Constraint}  <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;            {@link module:core/constraint.Not_Null_Constraint|Not_Null_Constraint} <strong>Not_Null</strong> <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;            {@link module:core/constraint.Field_Data_Type_Constraint|Field_Data_Type_Constraint} <strong>Field_Data_Type</strong> <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;               {@link module:core/constraint.Text_Constraint|Text_Constraint} <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;               {@link module:core/constraint.Guid_Constraint|Guid_Constraint} <strong>Guid</strong> <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;               {@link module:core/constraint.Number_Constraint|Number_Constraint} <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;                  {@link module:core/constraint.Int_Constraint|Int_Constraint} <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;         {@link module:core/constraint.Collection_Constraint|Collection_Constraint} <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;            {@link module:core/constraint.Collection_Data_Def_Constraint|Collection_Data_Def_Constraint} <strong>Collection_Data_Def</strong> <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;            {@link module:core/constraint.Collection_Data_Type_Constraint|Collection_Data_Type_Constraint} <strong>Collection_Data_Type</strong> <br />
    * &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;            {@link module:core/constraint.Unique_Constraint|Unique_Constraint} <strong>Unique</strong> <br />
    *
    * @module core/constraint
    * @exports Constraint
    */



	// This will define some constraint items.
	//  Not so sure about adding more things to the jsgui namespace, perhaps best just to provide the Constraint object
	
	
	// Constraint won't be or use a Data_Object...
	//  There may be some code that will make use of Data_Object interfaces, not sure.
	//  Mainly, this will be for validating JavaScript values against each other for use in the Data_Object, Collection, and other things.
	
	// Having this so it does not use a lot of other references will be helpful in keeping things modular,
	//  and quickly being able to use some validation code without too much supporting it.
	


	var j = jsgui;
	var Class = j.Class;
	var each = j.each;
	var is_array = j.is_array;
	var is_dom_node = j.is_dom_node;
	var is_ctrl = j.is_ctrl;
	var extend = j.extend;
	var clone = j.clone;
	var x_clones = j.x_clones;
	var get_truth_map_from_arr = j.get_truth_map_from_arr;
	var get_map_from_arr = j.get_map_from_arr;
	var arr_like_to_arr = j.arr_like_to_arr;
	var tof = j.tof;
	var is_defined = j.is_defined;
	var stringify = j.stringify;
	var functional_polymorphism = j.functional_polymorphism;
	var fp = j.fp;
	var arrayify = j.arrayify;
	var mapify = j.mapify;
	var are_equal = j.are_equal;
	var get_item_sig = j.get_item_sig;
	var set_vals = j.set_vals;
	var truth = j.truth;
	var trim_sig_brackets = j.trim_sig_brackets;
	var ll_set = j.ll_set;
	var ll_get = j.ll_get;
	var is_constructor_fn = j.is_constructor_fn;
	
	// Data Types are also similar to constraints.
	//  They are being used in the nested system with HTML.
	//  For the moment, I want to constinue to develop the Constraints system.
	//   They will be using something similar to Data_Type specifications for putting together the more compliacted constraints.
	
	// For the moment, these constraints will be used in preparation of mapping to a database (not nested, so far)
	//  At a later stage they will then be adapted further for the nested requirements of HTML correction and interpretation.
	
	// Perhaps the constraints, like for RGB, would be useful when putting things in a DB.
	//  Not sure how much of the translation would be done in the DB layer, but it could be done in JavaScript, with the database accepting
	//   less flexible data.
	
	// However, more flexibility and polymorphism in the database could be developed.
	//  We already have a bit, but it's not parsing RGB values. Not that keen on getting into the SQL coding, but there could
	//   be various functions that are made, library functions, that get put in.
	
	
	// I also think the whole system could run as a JavaScript file, but also have a huge declarative JSON section when a large application is running on the
	//  server.
	//  Not sure.
	
	// For the moment, this will be unifying what has been done on Data_Objects and nested objects, and serving as a general basis
	//  for RDB and other DB abstractions, and schemas.
	// Could be very useful for validating XML schemas, for example.
	
	// Some constraints that apply to collections may not apply to database tables.
	//  An example is if a collection needs to have 1 or more element. In a DB there can be an empty table, but some collections may specify it needs
	//   one or more object to be valid (but not to exist, necessarily?)
	
	// Getting these working, then mapping over to databases is quite a bit of code.
	//  Will be a useful basis for translating to abstract RBB
	
	// I think an abstract RDB set of classes would be quite useful.
	
	// Postgres RDB classes could inherit from many of them, for example.
	
	// There would also be a function to translate from generic RDB classes to Postgres ones.
	//  And to translate back too.
	
	// Then the Postgres classes are used to generate code, and functions that manipulate those tables / objects in the DB, which generate code
	
	// Advanced ORM is one of the things that this system really needs. It's going to be obtaining data and data models from other systems.
	//  Possibly would be run to quickly interoperate / import and export data to / from existing systems.
	// Could possibly have extra (very user friendly) modules operating over a legacy database application.
	//  Could do very specific things, as required for new functionality. Would then be in a position for the jsgui/metabench system
	//  to be fully activated and replace a legacy system, either keeping the existing database, or having exported and mirrored everything,
	//   could switch to Mongo or other DB designed by / using the application, or continue mirroring changes.
	
	// The whole middleware side of things will make integration tasks very quick.
	//  The Resource system and interface will be used for much of this.
	
	
	
	
	// Constraints could apply to various different things.
	//  Generally they will apply to a value.
	//  They will be testable against values to see where those values do or do not comply with the constraints.
	//  Not sure if it would be worth using this system to test against XML schemas. It could make sense. Perhaps the system for testing the XML
	//   schemas would be using this, perhaps it would even directly be this but with the correct options set.
	
	// This could get quite large, so this will really be a core constraint tester.
	//  It will be part of the core, but not the essentials. They will be useful for other programs in various places, and will be really small when
	//  compressed. In this case, I'll have a larger core. There will be builds / distributions available for clients.
	// Some will have client-side shims built in, like an IE6-7 build perhaps.
	
    /**
    * Creates the Constraint.
    * @constructor
    * @classdesc Base class for the constraints.
    * @memberof module:core/constraint
    */
    
	var Constraint = Class.extend({
		'init': function(spec) {
			// if the spec is a string, then parse the string.
			
			// it may make reference to various data types.
			//  text, restricted or unrestricted length
			//  ints, numbers, etc
			//  various tests will be carried out, beyond tof.
			
			if (tof(spec) == 'string') {
				
			}
			
			// A constraint can be / contain multiple other constraints.
			//  Maybe it should have that logic inside it, and these other constraints can be particular ones.
			
			// Code execution path... may be important getting that working before long, but now it does seem that specifying and
			//  validating these various types in JavaScript seems like an important thing to do.
			
			// 
			
			
		}
	// 'matches'
		
	
	})


    /**
    * Returns true if the `obj` value matches the `constraint` definition.
    * @func
    * @param {object} obj - object to check
    * @param {string} constraint - constraint definition
    * @memberof module:core/constraint
    * @example
    * obj_matches_constraint(1, "int") ==> true
    * obj_matches_constraint("1", "int") ==> false
    * obj_matches_constraint("1", "text(3)") ==> true
    */
	var obj_matches_constraint = function (obj, constraint) {
		//console.log('obj_matches_constraint ');
		//throw('stop');
		
		if (tof(constraint) == 'string') {
			constraint = constraint_from_str(constraint);
			
			return constraint.match(obj);
		}
		
	}


    /**
    * Creates the data object constraint.
    * @constructor
    * @classdesc <mark>the class does nothing, and not public.</mark>.
    * @memberof module:core/constraint
    */
    // Data_Object_Constraint

    // Or include this in Data_Object?
    // May be best to make its own module as we should not require Data_Object here?



    //var Data_Object = require('./data-object');

	var Data_Object_Constraint = Constraint.extend({
	    'init': function (spec) {
	        this.__data_type = 'data_object_constraint';
	    },
        'match': function(obj) {

            // Don't have Data_Object here??, as Data_Object is used by this
            //var res = obj instanceof Data_Object.constructor;

            var res = tof(obj) == 'data_object';
            //console.log('res', res);
            return (res);
        }
	});




	var Data_Object_Def_Constraint = Constraint.extend({

	    /** 
        * @classdesc Data object definition constraint.
        * @constructs module:core/constraint.Data_Object_Def_Constraint 
        * @param {object} spec - data definition
        * 
        */
		'init': function(spec) {
		    this.__data_type = 'data_object_def_constraint';
		    //
		    if (tof(spec) === 'object') {
		        this.data_def = spec;
		    }
		},

	    /**
        * Returns `true` if the `value` matches the constraint.
        * @param {object} value - object to check
        * @memberof module:core/constraint.Data_Object_Def_Constraint
        * @instance
        * @example
        * var c = new Constraint.Data_Object_Def_Constraint({ name: "string", age: "number" });
        * c.match({ name: "John", age: 25 })  ==> true
        * c.match({ name: "John", age: "25" })  ==> false
        * c.match({ name: "John" })  ==> false
        */
		'match': function (value) {
			// value must be an object?
			var that = this;

			var tv = tof(value);
			if (tv == 'object') {
				//console.log('value ' + stringify(value));

				// need to see if the value matches the items in the data_def.
				var allMatch = true;

				each(this.data_def, function(field_name, field_def, stop) {
					var match = object_matches_def(value[field_name], field_def);
					//console.log('match ' + match);

					allMatch = allMatch && match;
					if (!allMatch) stop();
				});
				return allMatch;
				//throw 'stop';
			}
            //
			return false;
		} 
	});



	// Data_Object_Def_Constraint
	//  Though putting them in as individual field constraints may make sense...
	//   But the field constraints sound more like constraints on individual fields. Useful to validate a particular field,
	//    but the object validation may work differently.

	
	var Field_Constraint = Constraint.extend({

	    /** 
        * @classdesc Field constraint base class. The class is private.
        * @constructs module:core/constraint.Field_Constraint 
        * 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			
			// it may make reference to various data types.
			//  text, restricted or unrestricted length
			//  ints, numbers, etc
			//  various tests will be carried out, beyond tof.
			
			this.__data_type = 'field_constraint';
			
			//if (tof(spec) == 'string') {
				
			//}
			
			// A constraint can be / contain multiple other constraints.
			//  Maybe it should have that logic inside it, and these other constraints can be particular ones.
			
			// Code execution path... may be important getting that working before long, but now it does seem that specifying and
			//  validating these various types in JavaScript seems like an important thing to do.
			
			// 
			
			
		}
	// 'matches'
		
	
	})
	



	// A Data_Object_Constraint could help

	// Data_Object_Def_Constraint
	//  A single constraint, with the definition of various fields given concisely.
	//   This could have better performance as it's not instatiating as many objects to carry out the constraints.
	//    But it may be a problem with having different ways of doing the same things.

	// Defining fields in more detail may make sense, using Field objects.
	//  They make sense for DBs

	// But for object definitions, it may be useful to just jave the simplest form of input - they could be translated to
	//  the field system. We may have two ways of modifying the same data, and have them working together well.
	
	
	// Field constraints,
	//  Will translate to data types, and possibly further checks / validation that is done in the DB layer on input
	
	// Will 
	
	
	// Collection constraints
	//  These will translate to table constraints
	
	
	// data_type_constraint
	// field_data_type_constraint
	
	//  not null is not (really) a data type constraint.
	//  same with some check constraints. Does not seem like a very definite boundary though.
	
	var Field_Data_Type_Constraint = Field_Constraint.extend({

	    /** 
        * @classdesc Typed field constraint base class. 
        *
        * The class public name is <strong>Field_Data_Type</strong> (e.g. `new Constraint.Field_Data_Type()`).
        * @constructs module:core/constraint.Field_Data_Type_Constraint 
        * 
        */
	    'init': function (spec) {
			
			// also hold the data type itself.
			
			
			
			this._super(spec);
		}
	});
	
	
	
	var Text_Constraint = Field_Data_Type_Constraint.extend({

	    /** 
        * The constructor is private. Use from_obj() or {@link module:core/constraint.from_str|from_str()} to create this constraint.
        * @classdesc Text field constraint: checks value type (string) and possibly max length.
        * @constructs module:core/constraint.Text_Constraint 
        * @param {object} spec - constraint properties: `{}` or `{length: maxlength}`
        * 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			
			// it may make reference to various data types.
			//  text, restricted or unrestricted length
			//  ints, numbers, etc
			//  various tests will be carried out, beyond tof.
			
			//if (tof(spec) == 'string') {
			//	
			//}

			this._super(spec);
			if (is_defined(spec.length)) {
				this.length = spec.length;
			}
			
			// A constraint can be / contain multiple other constraints.
			//  Maybe it should have that logic inside it, and these other constraints can be particular ones.
			
			// Code execution path... may be important getting that working before long, but now it does seem that specifying and
			//  validating these various types in JavaScript seems like an important thing to do.
			
			// 
			
			
	    },

	    /**
        * Returns `true` if the `value` matches the constraint.
        * @param {*} value - value to check
        * @memberof module:core/constraint.Text_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("text(3)");
        * c.match("123")  ==> true
        * c.match(123)  ==> false
        * c.match("1234")  ==> false
        *
        * var c = Constraint.from_obj("text");
        * c.match("1234567890")  ==> true
        */
	    'match': function (v) {
		    if (is_defined(this.length)) {
		        return (tof(v) == 'string' && v.length <= this.length);
		    } else {
		        return (tof(v) == 'string');
		    }
	    },

	    /**
        * Returns the constraint information object. The object can be following:
        * - `["text", length]` - if the constraint contains a maxlength restriction
        * - `"text"` - if the constraint does not contains a maxlength restriction
        * @memberof module:core/constraint.Text_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("text(3)");
        * c.to_info_obj()  ==> ["text", 3]
        *
        * var c = Constraint.from_obj("text");
        * c.to_info_obj()  ==> "text"
        */
	    'to_info_obj': function () {
			if (is_defined(this.length)) {
				return ['text', this.length];
			} else {
				return 'text';
			}
			
			
		}
	// 'matches'
		
	})
	
	var Not_Null_Constraint = Field_Constraint.extend({
		
	    /** 
        * @classdesc "Not null" constraint: checks a value to be not null. 
        *
        * The class public name is <strong>Not_Null</strong> (e.g. `new Constraint.Not_Null()`).
        * @constructs module:core/constraint.Not_Null_Constraint 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			this._super(spec);
			
			
	    },

	    /**
        * Returns `true` if the `value` matches the constraint (i.e. value != undefined && value != null).
        * @param {*} value - value to check
        * @memberof module:core/constraint.Not_Null_Constraint
        * @instance
        * @example
        * var c = new Constraint.Not_Null();
        * c.match("123")  ==> true
        * c.match(null)  ==> false
        */
	    'match': function (v) {
			return is_defined(v) && v != null;
		}
	});
	
	// Objects that represent the data types themselves?
	//  Probably not going to use classes for that, just JS objects like arrays, maps.
	
	var Guid_Constraint =  Field_Data_Type_Constraint.extend({

	    /** 
        * @classdesc GUID field constraint: checks a value to a GUID string (e.g. `"{86DCA9A5-31AC-4F20-B552-4D1503D0D11C}"`). 
        *
        * The class public name is <strong>Guid</strong> (e.g. `new Constraint.Guid()`).
        * @constructs module:core/constraint.Guid_Constraint 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			this._super(spec);
			
			
	    },

	    /**
        * Returns `true` if the `value` matches the constraint (i.e. value is a GUID string).
        * @param {*} value - value to check
        * @memberof module:core/constraint.Guid_Constraint
        * @instance
        * @example
        * var c = new Constraint.Guid();
        * c.match("{86DCA9A5-31AC-4F20-B552-4D1503D0D11C}")  ==> true
        * c.match("86DCA9A5-31AC-4F20-B552-4D1503D0D11C")  ==> false
        */

	    'match': function (v) {
			//return tof(v) == 'number';
			
			// string of a given length...
			
			//  this will really be for translating to Mongo or SQL Server or other DB GUID types.
			
		    // "{86DCA9A5-31AC-4F20-B552-4D1503D0D11C}"
		    if (tof(v) === "string") {
		        var reg = /^{[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}}$/;
		        return reg.test(v);
            }
            //
		    return false;
			
	    },

	    /**
        * Returns the constraint information object (i.e. "guid" string).
        * @memberof module:core/constraint.Guid_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("guid");
        * c.to_info_obj()  ==> "guid"
        */
	    'to_info_obj': function () {
			return 'guid';
		}
		
	})
	
	
	var Number_Constraint = Field_Data_Type_Constraint.extend({

	    /** 
        * The constructor is private. Use from_obj() or {@link module:core/constraint.from_str|from_str()} to create this constraint.
        * @classdesc Number field constraint: checks value to be a number.
        * @constructs module:core/constraint.Number_Constraint 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			this._super(spec);
	    },

	    /**
        * Returns `true` if the `value` matches the constraint (i.e. value is a number).
        * @param {*} value - value to check
        * @memberof module:core/constraint.Number_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("number");
        * c.match(1)  ==> true
        * c.match("1")  ==> false
        */
	    'match': function (v) {
			return tof(v) == 'number';
		},

	    /**
        * Returns the constraint information object (i.e. "number" string).
        * @memberof module:core/constraint.Number_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("number");
        * c.to_info_obj()  ==> "number"
        */
		'to_info_obj': function () {
			return 'number';
		}
		
	})
	
	var Int_Constraint = Number_Constraint.extend({

	    /** 
        * The constructor is private. Use from_obj() or {@link module:core/constraint.from_str|from_str()} to create this constraint.
        * @classdesc Int field constraint: checks value to be an integer number.
        * @constructs module:core/constraint.Int_Constraint 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			this._super(spec);
	    },

	    /**
        * Returns `true` if the `value` matches the constraint (i.e. value is an integer number).
        * @param {*} value - value to check
        * @memberof module:core/constraint.Int_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("int");
        * c.match(1)  ==> true
        * c.match(1.5)  ==> false
        * c.match("1")  ==> false
        */
	    'match': function (v) {
			return tof(v) == 'number' && parseInt(v) === v;
		},

	    /**
        * Returns the constraint information object (i.e. "int" string).
        * @memberof module:core/constraint.Int_Constraint
        * @instance
        * @example
        * var c = Constraint.from_obj("int");
        * c.to_info_obj()  ==> "int"
        */
	    'to_info_obj': function () {
			return 'int';
		}
		
	})
	
	
	// Type_Constraint
	
	
	// Collection constraints as well
	//  These may not necessirily apply to JSGUI collections, but could be for translating to Table Constraints in SQL.
	
	
	// Collections will have different types of constraints.
	
	// Could be that every item needs to follow a set of field constraints.
	// Could also be that there are unique keys.
	//  May have fields specified.
	
	// This will work very well indeed when this is done. Should be intuitive to create the models, then these models will be very useful for 
	//  translating to different things. Some of the indexing functionality of the DB gets replicated on the client in a relatively small amount of code,
	//  allowing for some things to run in a very optimized way even on IE6.
	
	// It will be nice to see the things working fine in IE6 as well as modern browsers.
	
	
	
	
	
	var Collection_Constraint = Constraint.extend({
		
	    /** 
        * The class is private. 
        * @classdesc Collection constraints base class.
        * @constructs module:core/constraint.Collection_Constraint 
        */
	    'init': function (spec) {
			// if the spec is a string, then parse the string.
			
			// it may make reference to various data types.
			//  text, restricted or unrestricted length
			//  ints, numbers, etc
			//  various tests will be carried out, beyond tof.
			this.__data_type = 'collection_constraint';
			//if (tof(spec) == 'string') {
				
			//}
			
			// A constraint can be / contain multiple other constraints.
			//  Maybe it should have that logic inside it, and these other constraints can be particular ones.
			
			// Code execution path... may be important getting that working before long, but now it does seem that specifying and
			//  validating these various types in JavaScript seems like an important thing to do.
			
			// 
			
			
		}
	// 'matches'
		
	
	});
	
	// Not so sure about this being the same Data_Type_Constraint for Data_Objects...
	
	
	// May also have 
	
	// This can force a collection to hold only a particular type of object, tested with instanceof
	
	//  And not using the field system?
	//   So we could restrict a collection to only holding a String this way.
	
	var object_matches_def = function(value, def) {
		//console.log('object_matches_def');
		//console.log('value ' + stringify(value));
		//console.log('def ' + stringify(def));

		var tv = tof(value);

		//if (def == 'string') {
		//	return tv == 'string'
		//}
		//console.log('tv ' + tv);

		if (tv == def) {
			return true;
		}

		return false;

	}

	
	var Collection_Data_Def_Constraint = Collection_Constraint.extend({

	    /** 
        * @classdesc Collection fields definition constraint.
        *
        * The class public name is <strong>Collection_Data_Def</strong> (e.g. `new Constraint.Collection_Data_Def({})`).
        * @constructs module:core/constraint.Collection_Data_Def_Constraint 
        * @param {object} spec - data definition
        * 
        */
	    'init': function (spec) {

		    this._super();

		    //if (tof(spec) == 'function' && is_constructor_fn(spec)) {
			//	this.data_type_constructor = spec;
			//}
			//console.log('tof(spec) ' + tof(spec));
			//console.log('tof(String) ' + tof(String));
			
			if (tof(spec) === 'object') {
				this.data_def = spec;
			}
			
			// Def is not the data_type in terms of a constructor
			this._constraint_type = 'data_def';
			
		},

	    /**
        * Returns `true` if the `value` matches the fields constraint.
        * @param {object} value - object to check
        * @memberof module:core/constraint.Collection_Data_Def_Constraint
        * @instance
        * @example
        * var c = new Constraint.Collection_Data_Def({ name: "string", age: "number" });
        * c.match({ name: "John", age: 25 })  ==> true
        * c.match({ name: "John", age: "25" })  ==> false
        * c.match({ name: "John" })  ==> false
        */
	    'match': function (value) {
			// value must be an object?
			var that = this;

			var tv = tof(value);
			if (tv == 'object') {
				//console.log('value ' + stringify(value));

				// need to see if the value matches the items in the data_def.
				var allMatch = true;

				each(this.data_def, function(field_name, field_def, stop) {
					var match = object_matches_def(value[field_name], field_def);
					//console.log('match ' + match);

					allMatch = allMatch && match;
					//console.log('allMatch ' + allMatch);
					if (!allMatch) stop();
				});
				return allMatch;
				//throw 'stop';
			}

		} 
	});
	
	// Perhaps rename to Collection_Data_Type_Constructor_Constraint
	var Collection_Data_Type_Constraint = Collection_Constraint.extend({

	    /** 
        * @classdesc Collection item type constraint.
        *
        * The class public name is <strong>Collection_Data_Type</strong> (e.g. `new Constraint.Collection_Data_Type(Object)`).
        * @constructs module:core/constraint.Collection_Data_Type_Constraint 
        * @param {function} spec - item type constructor function
        * 
        */
	    'init': function (spec) {

		    this._super();

		    //if (tof(spec) == 'function' && is_constructor_fn(spec)) {
			//	this.data_type_constructor = spec;
			//}
			//console.log('tof(spec) ' + tof(spec));
			//console.log('tof(String) ' + tof(String));
			
			if (tof(spec) === 'function') {
				this.data_type_constructor = spec;
			}
			
			this._constraint_type = 'data_type';
			
		},
	    /**
        * Returns `true` if the `value` matches the item type constraint.
        * @param {object} value - object to check
        * @memberof module:core/constraint.Collection_Data_Type_Constraint
        * @instance
        * @example
        * var c = new Constraint.Collection_Data_Type(Number);
        * c.match(1)  ==> true
        * c.match("1")  ==> false
        * 
        * 
        * var c2 = new Constraint.Collection_Data_Type(MyBook);
        * c2.match(new MyBook())  ==> true
        * c2.match(new Number(1))  ==> false
        * 
        */
	    'match': fp(function (a, sig) {
			//console.log('');
			//console.log('*  match sig ' + sig);
			//console.log('this.data_type_constructor ' + this.data_type_constructor);
			//console.log('a[0] ' + a[0]);
			//console.log('tof(a[0]) ' + tof(a[0]));
			//console.log('a[0] instanceof this.data_type_constructor ' + (a[0] instanceof this.data_type_constructor));
			
			var ta0 = tof(a[0]);
			//console.log('ta0 ' + ta0);
			if (ta0 == 'number') {
				//console.log(this.data_type_constructor === Number);
				if (this.data_type_constructor === Number) return true;
			}
			// But can perform casting / conversion.
			if (ta0 == 'string') {
				//console.log(this.data_type_constructor === Number);
				if (this.data_type_constructor === String) return true;
			}
			
			if (this.data_type_constructor && a[0] instanceof this.data_type_constructor) {
				return true;
			}
			
			//if (sig == '[D]') {
			//	// matching a Data_Object against these constraints.
				
			//	//var c_res = this.data_object.obj_matches_field_constraints(a[0]);
			//	//return c_res;
				
			//	if (this.data_type_constructor) {
			//		return a[0] instanceof this.data_type_constructor;
			//	}
				
			//	//return 
				
			//}
			
			//// May be given a collection here.
			//if (sig == '[C]') {
			//	// A collection may hold constraints for a type of collection.
				
			//	// Database holds Tables Collection, which is of the Table item.
				
			//	// let's have a look at that collection.
			//	var obj = a[0];
			//	//console.log('obj ' + stringify(obj));
				
			//	// eg collection of tables.
			//	///  probably should have its data type constraint?
				
			//	var obj_name = obj.get('name');
			//	//console.log('obj_name ' + obj_name);
				
				
				
			//	// we may be able to get the data_type_constraint of that collection.
			//	//  It may be a dtc that implies it can take a collection, maybe a collection of a particular type of object.
				
			//	//console.log('obj._data_type_constraint ' + stringify(obj._data_type_constraint));
			//	// so, a collection when given a typed collection as it's data_type will need to respond correctly.
			//	//  setting its _data_type_constraint
				
			//	//console.log('obj._data_type_constraint.data_type_constructor ' + stringify(obj._data_type_constraint.data_type_constructor));
				
			//	//data_type_constructor
				
			//	//console.log('this.data_type_constructor ' + stringify(this.data_type_constructor));
			//	//var stack = new Error().stack
			//	//console.log( stack )				
			//	//throw('13) stop');
				
			//	//var res = obj instanceof obj._data_type_constraint.data_type_constructor;
			//	var res = obj instanceof this.data_type_constructor;
			//	//console.log('res ' + res);
			//	// nice, seems to work.
				
			//	return res;
			//	// see if the collection's _data_type_constraint matches the constructor in this constraint.
				
				
			//	// this does get a bit complicated with the same code being used on different nested levels.
			//	//  I'll need to cut down on feature addition on this, and make sure the API is working and stable.
			//	//  Document it too.
				
			//	// Just need it to generate these relational, or semi-relational databases.
			//	//  Need to get the whole web platform running.
				
			//	// The system has got pretty big, still will need a bit more for the whole database support.
			//	//  Will likely make some database connected extensions... or maybe more sync code in the 'Database' class.
								
			//	//return 
			//}
			//
			return false;
			
		})
	});
	
	// Will be used for checking every Table that gets put into a Database is a Table etc.
	//  Used to enforce ststic typing.
	
	// Something very similar could be used to enforce static typing on Data_Objects.
	//  That will restrict the objects that can get put into Data_Objects to being a particular class / subclass chain.
	
	// Collection_Data_Object_Constraint
	//  Used for making a Collection like a Table in a DB.
	//  This way the Collection is constrained to storing one type of object.
	
	// Could be a data type constraint... used for holding the required fields.
	//  Not just for checking the data_type... must check that the objects conform to the Data_Object's constraints.
	//  May be able to make a data_object that can't be constructed without the right fields...
	
	//var Collection_Data_Object_Constraint = Collection_Constraint.extend({
	//	'init': function(spec) {
	//		if (tof(spec) == 'data_object') {
	//			this.data_object = spec;
	//		}

	//		// May also want to define a table data object constraint like:
	//		//  {"address": "string", "family": "string", "internal": "boolean"}
	//		//  (is it a constraint really? or just a collection of fields?)
	//		//   I think it's a constraint because it restricts their types.

	//		//console.log('Collection_Data_Object_Constraint tof(spec) ' + tof(spec));


			
	//		this._constraint_type = 'data_object';
			
	//	},
	//	'match': fp(function(a, sig) {
	//		//console.log('match sig ' + sig);
	//		//console.log('match a ' + stringify(a));
	//		if (sig == '[D]') {
	//			// matching a Data_Object against these constraints.
				
	//			var c_res = this.data_object.obj_matches_field_constraints(a[0]);
	//			return c_res;
	//		}
			
	//		// May be given a collection here.
	//		if (sig == '[C]') {
	//			// A collection may hold constraints for a type of collection.
				
	//			// Database holds Tables Collection, which is of the Table item.
				
	//			// let's have a look at that collection.
	//			var obj = a[0];
	//			//console.log('obj ' + stringify(obj));
				
	//			// get the constraint for that field...
	//			//  it should have been put in when the field gets specified.
				
	//			//each(obj, function(i, v) {
	//			//	console.log('i ' + i);
	//			//	console.log('v ' + v);
	//			//});
				
	//			// a lower level each?
	//			//  The Collection object has got fairly big and complicated.
	//			//  want to be able to view all its constraints easily.
				
	//			// it may have a data_type_constraint.
	//			/*
	//			var coll_dtc = obj._data_type_constraint;
	//			console.log('coll_dtc ' + coll_dtc);
	//			//console.log('coll_dtc ' + stringify(coll_dtc));
				
				
				
				
	//			var stack = new Error().stack
	//			console.log( stack )
				
				
	//			throw('14) stop');
	//			*/
	//			return true;
				
				
	//		}
			
	//	})
		
	//});
	
	
	
	
	// One of these can be set to primary. The first one is by default.
	//  The order of the unique indexes matters.
	
	var Unique_Constraint = Collection_Constraint.extend({

	    /** 
        * @classdesc Collection unique constraint.
        *
        * The class does not provide the `match()` method, but provides `.fields` property for the unique field names.
        *
        * The class public name is <strong>Unique</strong> (e.g. `new Constraint.Unique()`).
        * @constructs module:core/constraint.Unique_Constraint 
        * @param {string|string[]} spec - unique field name(s)
        * 
        */
	    'init': function (spec) {
			this._super(spec);
			
			//this.set('constraint_type', 'unique');
			
			this._constraint_type = 'unique';
			
			// field (name) or actual field (reference to a field constraint).
			
			// but field could be plural too
			//  will be a convention that the singular here can sometimes refer to plural.
			//  maybe plural would be better?
			if (is_defined(spec.fields)) this.fields = spec.fields;
			
			if (tof(this.fields) == 'array') {
				this._sorted_fields = clone(this.fields).sort();
			}		
	    }

	    /** 
        * @name fields
        * @member
        * @type {string|string[]}
        * @memberof module:core/constraint.Unique_Constraint
        * @instance
        * @example
        * var c = new Constraint.Unique("ID");
        * c.fields  ==> "ID"
        * 
        */


		// not really sure the constraint will do much here... it requires an index to be set up.
		//  perhaps tells the index not to accept duplicates?
	
		// test the constraint?
		//  do that outside for the moment
	
	
	});
	
	
	
	
	//var Relationship_Constraint = Collection_Constraint.extend({
	//	'init': function(spec) {
	//		this._super(spec);
			
	//		// which other collection(s) and field(s) does it reference?
			
	//		// what form does the relationship take?
			
	//		// files in a folder
	//		//  aggregation
	//		//  has (composed of)
	//		//  many-to-one
	//		//   aggregation_to_item (but maybe we would be saying the folder 'has' files)
			
			
	//		// friends
	//		//  many-to-many
	//		//  association
	//		//  has (as friend) / is associated with
	//		//   use join table
	//		//   association_between_items
			
	//		// employees-projects
	//		//  many-to-many
	//		//  association
	//		//  is associated with 
	//		//   use join table
	//		//   association_between_items
			
			
	//		// user_roles
	//		//  aggregation? 
	//		//  maybe association
	//		//  one-to-many
	//		//  user is associated with roles
			
	//		// employee-pay_band
	//		//  association?
	//		//  one_to_one
	//		//  user has that pay band
			
	//		// Compositon for sub-items?
			
	//		// May be interested in mapping inheritance for this object system
	//		//  At the moment, need to just map the JavaScript structures into the database, then we'll get to work with
	//		//  building up the database and components of it that deal with website functionality.
			
	//		// Once things can quickly be declared and then created in the database, it should be relatively fast to implement programmatic
	//		//  components that work quickly with the DB and also can be created quickly.
			
	//		// There is some more to do with this work, but now it is at a really good stage where it is able to do a lot of things in the background.
	//		//  With some more coding, it will do a whole bunch more things.
			
	//		// Will do some more work on the XML / HTML transformation.
	//		//  That would be one of the really amazing things if I were to release it with that.
			
	//		// The declarative writing of these pages would be very interesting and get people interested with the JSGUI platform.
	//		//  That part is also something it would be interesting to get written in C++ or C.
			
	//		// Also, will be interesting to have bits and pieces about technology on the website.
	//		//  Presentations.
			
	//		// I think it could be very good advertising for my own services, and releasing the JSGUI open source framework will do a lot to help this.
	//		//  I'm likely to release the client-side framework, as well as a server distribution.
	//		//  I doubt it would be the full / development / internal distribution, but one that has various very useful features.
			
	//		// I would likely license commercial modules as well, such as a Postgres Connector.
	//		//  Also would have a marketplace for those who wish to sell their own components - and may well be selling advertising to those who
	//		//  want to sell their own components for it, possibly through Google.
			
	//		// May do deals with component makes, could have sponsored listings? 
			
	//		// The basic framework should probably be released as open-source, then I should be set for employing people and getting paid to develop this code
	//		//  further for clients in their systems.
			
	//		// I think this could make it easy to get a high performance web server running.
	//		//  That will be very nice indeed. I think both the ease of use and customizability will be high.
			
	//		// It will be very nice to have an advanced admin interface going alongside it.
	//		//  Won't require installing files, images etc, could be using a few vector images.
	//		//  It may surprise people when they see it, thinking, where did that come from, when they are doing simple, easily,
	//		//   but there is quite a complicated enabling system allowing it to work.
			
	//		// Am getting much closer to the software goals.
	//		//  Think I'll get a really nice system online. Don't know quite how long.
	//		//  I'll get a lot done over the next few days.
			
	//		// There may be a few more things to get really right along the execution path.
	//		//  There is quite a lot to do with the HTML that needs to work.
	//		//  Some of this will be expressed in terms of field corrections and constraints.
			
	//		// There is maybe another 3000 more lines that needs to be written for this?
			
	//		// The server side library will be big, but will be focused on producing efficient client-side output
	//		//  I'll do work on documenting it.
			
	//		// It would be interesting to see how big a build (sequentially ordered) of the JavaScript file is.
	//		//  Perhaps some things would need to be renamed so that lots of vars in the global namespace would work together.
	//		//  There would be a large amount of gain possible in the build process.
			
	//		// The size of the small client library is nudging upwards. Perhaps it will be a 24KB download? Even 32?
	//		//  It will definitely be impressive though, will enable lots of things, useful business interactions.
			
	//		// Could have a very useful system for conference attendees.
	//		//  However, need to do the constraints.
			
			
			
			
	//		// Likely to go into more detail on the relationship constraints when actually making them.
	//		//  Perhaps will be related to something in the same collection or Data_Object?
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	//		// Could talk to D about setting up the implementations of it.
	//		//  
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	//		// Also like the idea of having a donate for feature box.
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	//		/*
	//		 * �Each Order is associated with one or more OrderLines.�

	//			�Each OrderLine is associated with one and only one Order.�
				
	//			�Each OrderLine is associated with one and only one Product.�
				
	//			�Each Product is associated with zero or more OrderLines.�
	//		 * 
	//		 */
			
			
			
	//	}
	//	// not really sure the constraint will do much here... it requires an index to be set up.
	//	//  perhaps tells the index not to accept duplicates?
	//});
	
	
	// Relationship
	
	// Foreign_Key constraint?
	//  Maybe call this a Reference or Relationship constraint.
	
	// Expressed in the data model, this could describe a many-to-many relationship that gets expressed using a links table in an RDB.
	//  Possibly using a links, or the general links / relationships table in an ODB.
	
	
	
	
	
	// Not so sure about specifying primary keys here...
	//  The things used as PKs in this system may not be PKs in the database. The PKs may all be incrementing numeric IDs in the database.
	//   That could make a lot more sense, but not in all situations.
	
	// Primary Unique Index in this situation... that will be a constraint that gets translated to unique index.
	
	
	
	
	
	// With collections, they will be saying that records are to have a property, and some uniqueness conditions should be satisfied.
	
	// NOT NULL - collection
	// UNIQUE - collection
	// PRIMARY KEY - collection
	// FOREIGN KEY - collection
	// CHECK - field but likely applied through the collection
	// DEFAULT - field but likely applied through the collection
	
	// There is quite a bit to do to get this data model working within JavaScript.
	//  Then it will be a question of getting it translating itself to other languages.
	//  Creating the RDB model, then the Postgres model, then the actual code used to create it, then running that code.
	//  These translation steps will result in a fairly substantially sized piece of software, quite powerful too.
	//   The functionality could still be fairly small in a download.
	
	// I think this could make a very nice app on the iPad, there would be quite a lot that could be made in terms of database design.
	//  Then emailing the setup code, maybe running the setup code from the iPad.
	// Being able to view all the code, a fairly focused IDE for making Postgres code.
	//  Could do quite a lot on the iPad without selling an app, and then sell an app as well.
	
	// They kind of all refer to fields, but it's to do with how these fields interact with other fields and fields in other tables/collections that
	//  make them either field or collection constraints
	
	// Text_Constraint
	// Number_Type_Constraint
	// Integer_Type_Constraint
	
	// These type constraints could also be able to parse data that does not match the constraint.
	//  Perhaps a regex could be run on a string if it's expecting something else.
	
	// Multiple_Constraint (different constraints get satisfied)
	
	
	// Indexed_Array_Constraint
	
	// All basically run tests on the object to see if it meets the constraint or not.
	
	// also get the constraint from an object.
	// some things will be expressed as (nested) JavaScript objects.
	
	// This, as well as sorting out this parsing system to be like ASP.NET, will take a while longer.
	//  On the server, it will be possible to use much more code to do what is needed.
	//  On the client, making use of existing DOM parsing would make more sense.
	
	
	
	// Different types of constraint.
	//  I think types like 
	/* from_obj instead
	var value_as_field_constraint = function(val) {
		// more flexible than getting it from a string.
		//  may be dealing with nested things too.
		
		
		
		
	}
	*/


	
    /** 
    * Creates a constraint using the definition string. See {@link module:core/constraint.from_str|from_str()} for possible definition strings.
    * @func
    * @name from_obj
    * @variation 1
    * @param {string} str - constraint definition string
    * @memberof module:core/constraint
    * @example
    * c = Constraint.from_obj("int");
    * c = Constraint.from_obj("text(10)");
    */

    /** 
    * Creates a constraint using the "string and number" definition. The following definitions are supported:
    * - `["text", <length>]` - creates {@link module:core/constraint.Text_Constraint|Text_Constraint}, where "`<length>`" is the max text length allowed
    * @func
    * @name from_obj
    * @variation 2
    * @param {array} arr_of_str_and_num - constraint definition
    * @memberof module:core/constraint
    * @example
    * c = Constraint.from_obj(["text", 10]);
    */

    /** 
    * Creates a constraint using the "string and string" definition. The following definitions are supported:
    * - `["unique", <fieldName>]` - creates {@link module:core/constraint.Unique_Constraint|Unique_Constraint}, where "`<fieldName>`" is the unique field name
    * @func
    * @name from_obj
    * @variation 3
    * @param {array} arr_of_str_and_str - constraint definition
    * @memberof module:core/constraint
    * @example
    * c = Constraint.from_obj(["unique", "SomeID"]);
    */




	var from_obj = fp(function(a, sig) {
		// Should be able to interpret things as either Field or Collection constraints.
		//  Nice how Field constraints will be applyable to a Collection.
		//   This will be like setting columns in the database.
		
		// This sophisticated data model will be applicable to many database situations / scenarios.
		//  Should make it really fast to produce a database with CRUD SPs.
		//  Easy to translate from the requirements into the finished product.
		//   Convenient GUI tools for specifying the requirements.
		
		// Would be good to directly monetize this software pretty soon.
		//  I can get something impressive online soon that will get me customers and income from adverts.
		
		// Will definitely put together a good online presence.
		
		// Together with resources, ORM, and Je-Suis XML... will take some time.
		//  Also needing the web database interface.
		
		// It all has been coming on a lot very recently.
		//  Need to do more to turn it into a comprehensive web platform.
		
		// Will be a whole application including CMS.
		
		// For the moment, will continue with the single goal of getting the framework running, fully displaying my HTML website.
		
		//  I envisage my website will make use of some nice animations, and have some nice demos.
		//  A few animations in a portfolio section too.
		//   Section on work I have done (hype Brandon Generator a little bit).
		//  Technology demostrations.
		
		// Will get this whole website very polished, and will see how many people start using it.
		//  I think I could get some more widespread usage of the library, then get consultancy work regarding it.
		// Interact with the customers through the website.
		
		// OK... need to do more on this constraint system.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		//console.log('constraint.js from_obj sig ' + stringify(sig));
		
		if (sig == '[s]') {
			return constraint_from_str(a[0]);
			
		}

		if (sig == '[D]') {
			//return constraint_from_str(a[0]);

			//console.log('a[0]', a[0]);
			//throw 'stop';

			var res = new Data_Object_Constraint({});
			res.data_object = a[0];
			return res; 
			
		}
		
		
		
		if (a.l == 1 && tof(a[0]) == 'array') {
			//console.log('constraint.js from_obj sig ' + stringify(sig));
			//console.log('constraint.js from_obj obj ' + stringify(a[0]));
			
			var obj = a[0];
			
			var obj_sig = get_item_sig(obj, 1);  // was get_item_sig(obj);
			//console.log('obj_sig ' + obj_sig);
			//console.log('obj ' + stringify(obj));
			
			// could be given [s,n]
			// eg ['text', 32]
			
			if (obj_sig == '[s,n]') {
				var data_type_name = obj[0];
				var length = obj[1];
				
				if (data_type_name == 'text') {
					var constraint = new Text_Constraint({'length': length});
					return constraint;
				}
				
			}
			
			
			if (obj_sig == '[s,s]') {
				var constraint_type = obj[0];
				//  then another parameter, if it's a unique constraint then the other param is the field_name
				//console.log('constraint_type ' + constraint_type);
				if (constraint_type == 'unique') {
					var field_name = obj[1];
					
					// we don't have the actual field, but got its name.
					//  the name would do for the moment.
					var constraint = new Unique_Constraint({
						'fields': field_name
					});
					//console.log('constraint ' + constraint);
					return constraint;
					
					
					
				}
				
				if (constraint_type == 'text') {
					
					
				}
				
				// if it's a text constraint... that's a field type.
				
				
				
				
				
				
			}
			
			
			
		}
		
		//if (sig == '[D]') {			
		//	var constraint = new Collection_Data_Object_Constraint(a[0]);
		//	//console.log('constraint ' + constraint);
		//	return constraint;
		//}
		
		
		
		
		// Need to really do a lot on the execution path of this.
		//  I think the whole database transformation system is necessary to get it to run, it's an integral part of the system.
		//  Getting access to relational databases is critical for the whole software to perform its intended functions.
		
		
		
		
		
		
		// an array, 2 strings...
		
		// may wind up using a variery of constraint definitions
		//  they will be interpreted here into constraint objects, which can be put in collections, and these used to test DataObjects.
		
		// Can be used for making abstract definitions of things, before data goes in.
		//  Then these abstract definitions are used in order to create the database and interact with it
		
		// Made loads of progress with the object system, constraints are going to be a very powerful feature.
		//  Requirements may also be there as a different API, perhaps requiring constraints to be matched,
		//  also some more advanced programmatic checks that would get expressed in JavaScript, whereas the constraints are 
		//  a system that will be translatable into different particular methodologies.
		
		
		
		
		
		
		
		
		
		
		
		//throw ('stop');
		
	})
	
	
    /**
    * Creates a constraint using the definition string. The following definitions are supported:
    * - "int" - creates {@link module:core/constraint.Int_Constraint|Int_Constraint}
    * - "number" - creates {@link module:core/constraint.Number_Constraint|Number_Constraint}
    * - "text" - creates {@link module:core/constraint.Text_Constraint|Text_Constraint} without max length restriction
    * - "text(<length>)" - creates {@link module:core/constraint.Text_Constraint|Text_Constraint}, where "<length>" is the max text length allowed
    * - "guid" - creates {@link module:core/constraint.Guid_Constraint|Guid_Constraint}
    * @func from_str
    * @param {string} str - constraint definition
    * @memberof module:core/constraint
    * @example
    * c = Constraint.from_str("int");
    * c = Constraint.from_str("text(10)");
    */
	var constraint_from_str = function (str) {
		//console.log('constraint_from_str str ' + str);
		// will check the cache for it though.
		
		// will need to choose the type of the constraint.
		
		// if it's a string it won't be that complicated, I think.
		//  may be best to use regular expressions to detect what kind of constraint it is.
		
		// It may be a string with some parameters.
		// Not really wanting essentials to get bigger, but thing some extra string processing may be of use before this.
		//  Jsgui-util currently has the data types, so that one is fairly big.
		
		// Functionality will be brought over from Nested... except it will work differently
		//  In nested, there is a Data_Type_Instance.
		//  In this case, I think it will be Constraints, and more declarative descriptions of the data types.
		
		// It will be intended to mirror in some ways the data types and constraints that are in databases.
		//  Constraints could apply to collections, saying that key values must be unique, eg no one has the same NI number.
		
		
		// examples
		// 'string', 'int', 'text', 'text(32)', 
		
		// Perhaps these are like Data_Type_Instance objects, but they'll be called constraints here.
		//  They may not be limited to being data types, but they should do the same jobs.
		// The data types they reference... not so sure about making Data_Type_Instances or not.
		// Constraints as a concept makes more sense, especially when defining databases.
		
		// I think this system before too long could produce some really advanced functionality.
		//  With this abstraction made it will be possible to get development work uing it I hope.
		
		// Not quite sure how or if this will be competing with backbone.
		//  I think having the jsgui domain, having it there, with a demo and discussion, talking about it on twitter,
		//  showing the twitter feed on the website using nuce UI components...
		
		// Some simple downloadable pieces / builds
		// A system using node.js that will provide the right JavaScript client library to the clients
		// Make it easy to get running from downloads, easy-to-view examples and documentation within the downloads.
		
		// I think it could make a very sophisticated website system. Could have a graphical IDE where componets can be put in place, it generates the code for
		//  that.
		
		
		// Go through, looking for some patterns as regular expressions.
		//  If we have identified them, we have the values needed for the constraint.
		
		var rx_specified_length_text = /^text\((\d+)\)$/;
		// the data type could possibly be handled by input processors.
		//  I think that makes sense, moving input_processors out of nested and into essentials.
		//   It's an expandable system, the basis for it will not take much. The relevant input processors could be added by Data_Object, but 
		//   then be available throughout the system, such as for dealing with function calls, or data types which can have a length.
		
		
		
		
		
		var match_slt = str.match(rx_specified_length_text);
		
		//console.log('match_slt ' + match_slt);
		
		if (match_slt) {
			var length = parseInt(match_slt[1]);
			//console.log('length ' + tof(length));
			var constraint = new Text_Constraint({
				'length': length
			})
			return constraint;
		}
		
		if (str === 'text') {
		    var constraint = new Text_Constraint({})
		    return constraint;
		}

		if (str === 'int') {
		    var constraint = new Int_Constraint({})
		    return constraint;
		}

		if (str === 'number') {
			var constraint = new Number_Constraint({})
			return constraint;
		}
		
		if (str === 'guid') {
			var constraint = new Guid_Constraint({})
			return constraint;
		}
		
		
		
		
		//throw('stop');
		
		
		
		
	}
	
	Constraint.from_obj = from_obj;
	
	Constraint.from_str = constraint_from_str;
	Constraint.obj_matches_constraint = obj_matches_constraint;
	
	Constraint.Not_Null = Not_Null_Constraint;
	Constraint.Unique = Unique_Constraint;
	Constraint.Data_Object_Def_Constraint = Data_Object_Def_Constraint;
	//Constraint.Collection_Data_Object = Collection_Data_Object_Constraint;
	Constraint.Collection_Data_Type = Collection_Data_Type_Constraint;
	Constraint.Collection_Data_Def = Collection_Data_Def_Constraint;
	Constraint.Field_Data_Type = Field_Data_Type_Constraint;
	Constraint.Guid = Guid_Constraint;

    module.exports = Constraint;

	//return Constraint;
//});

                                                   

},{"./jsgui-lang-essentials":38}],28:[function(require,module,exports){

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(["./jsgui-lang-essentials", "./jsgui-data-structures", "./constraint"], function(jsgui, Data_Structures, Constraint) {
	*/
var jsgui = require('./jsgui-lang-essentials');
var Data_Structures = require('./jsgui-data-structures');
var Constraint = require('./constraint');

	// May need to test controls and data objects separately before running a document server with them.

	// Constraints as well as a modular bolt-on?

	// Creates the Constraints data type... so a constraint specified with a string can be tested against
	//  also a cache of the constraints that have been made through the string - quick to get them again for reuse when testing.

	// Constraint objects can be saves and used in various places.
	//  They may not always be referred to directly, that would save on the amount of code needed.

	// They will help in making a model of what gets put into a database.
	//  A few constraints put in place in the domain model or similar will help with its translation to a database model.

	// These wide-ranging things should help a lot with creating a wide range of performant databases quickly.
	// It will also be a good tool in itself.

	// Interaction between the fields collection and the indexes...
	//  need to have it so that fields get indexed when appropriate.
	// When constructing a Data_Object or Collection, the fields may get set, and the fields need to be indexed accordingly.





	var j = jsgui;
	var Class = j.Class;
	var each = j.each;
	var is_array = j.is_array;
	var is_dom_node = j.is_dom_node;
	var is_ctrl = j.is_ctrl;
	var extend = j.extend;
	var get_truth_map_from_arr = j.get_truth_map_from_arr;
	var get_map_from_arr = j.get_map_from_arr;
	var arr_like_to_arr = j.arr_like_to_arr;
	var tof = j.tof;
	var is_defined = j.is_defined;
	var stringify = j.stringify;
	var functional_polymorphism = j.functional_polymorphism;
	var fp = j.fp;
	var arrayify = j.arrayify;
	var mapify = j.mapify;
	var are_equal = j.are_equal;
	var get_a_sig = j.get_a_sig;
	var get_item_sig = j.get_item_sig;
	var set_vals = j.set_vals;
	var truth = j.truth;
	var trim_sig_brackets = j.trim_sig_brackets;
	var ll_set = j.ll_set;
	var ll_get = j.ll_get;
	var input_processors = j.input_processors;
	var iterate_ancestor_classes = j.iterate_ancestor_classes;
	var is_arr_of_arrs = j.is_arr_of_arrs;
	var is_arr_of_strs = j.is_arr_of_strs;
	var is_arr_of_t = j.is_arr_of_t;
	var clone = jsgui.clone;

	var data_value_index = 0;
	var data_value_abbreviation = 'val';

	// do data objects get an ID when they are initialized.
	jsgui.__data_id_method = 'init';

	var obj_matches_constraint = Constraint.obj_matches_constraint;
	var native_constructor_tof = jsgui.native_constructor_tof;

	var value_as_field_constraint = Constraint.value_as_field_constraint;

	var Ordered_String_List = Data_Structures.Ordered_String_List;

	// When setting the fields, indexes may need to be set too...


	// gets a value as a field_constraint object.
	//var ensure_data_type_data_object_constructor = j.ensure_data_type_data_object_constructor;


	// So, Data_Objects may have a Page_Context, Application_Context, or just Context.
	//  The Context would include info such as which browser is being used.
	//   Controls will render differently depending on the context.

	// jsgui.data_types_info and data_type will become much more closely integrated into this.
	//  Perhaps there should be another module level for this.

	// Not sure about introducing it here. Maybe in lang-essentials? Don't want that to get too big.

	// Data_Object Flags is the next thing here...
	//  But that requires a Collection.
	// Can make Enhanced_Data_Object?
	//  Or make Data_Object enhance itself once it has a Collection.
	//  Or could do Flags on a lower level.

	// Quite a complicated question.
	//  Flags running as a collection of strings makes a lot of sense.
	//   Will be ordered etc.

	var parse_field_text = function(field_text) {
		field_text = field_text.replace(/not null/g, 'not_null');
		var is_unique = false;
		var is_indexed = false;
		var is_not_null = false;
		var is_read_only = false, is_pk = false;
		var field_words = field_text.split(' ');
		var flag_words = [];
		var str_data_type;
		var word;
		for (var c = 0, l = field_words.length; c < l; c++) {
			word = field_words[c];
			if (c < l - 1) {
				flag_words.push(word);
			} else {
				str_data_type = word;
			}
		}
		each(flag_words, function(i, v) {
			if (v == 'unique') {
				is_unique = true;
			}
			if (v == 'pk') {
				is_pk = true;
			}
			if (v == 'indexed') {
				is_indexed = true;
			}
			if (v == 'not_null') {
				is_not_null = true;
			}
			if (v == 'readonly' || v == 'read_only' || v == 'read-only') {
				is_read_only = true;
			}
		});
		var data_type = parse_data_type(str_data_type);
		var res = {
			//'is_unique': is_unique,
			//'is_indexed': is_indexed,
			//'is_not_null': is_not_null,
			'data_type': data_type
		}
		if (is_read_only) {
			res.read_only = is_read_only;
		}
		if (is_pk) {
			res.pk = is_pk;
		}
		if (is_unique) {
			res.unique = is_unique;
		}
		if (is_not_null) {
			res.not_null = is_not_null;
		}
		if (is_indexed) {
			res.indexed = is_indexed;
		}
		return res;
	}


	var parse_data_type = function(data_type_text) {

		//console.log('data_type_text ' + data_type_text);
		// will return the data type info as an object / array

		// could just return a string
		// could return [dt_name, length]

		// should not begin with a number

		//var rx_dt = /^(([a-z]|[A-Z]|_)\w*)(\([a-z]|[A-Z]|_\w+\))?$/;
		var rx_dt = /^(([a-z]|[A-Z]|_)\w*)(\((\d+)\))?/;

		// then check to see the match.

		var match = data_type_text.match(rx_dt);


		//console.log('match ' + stringify(match));

		if (match) {
			var dt_name = match[1];
			var dt_length = parseInt(match[4]);

			if (is_defined(dt_length) &! isNaN(dt_length)) {
				return [dt_name, dt_length];
			} else {
				return dt_name;
			}
		}

		//throw('parse_data_type stop');
	}


	var field_obj_to_text = function(field_obj) {
		//var res = [];

		var words = [];
		if (field_obj.unique) {
			words.push('unique');
		}
		if (field_obj.pk) {
			words.push('pk');
		}
		if (field_obj.indexed) {
			words.push('indexed');
		}
		if (field_obj.not_null) {
			words.push('not_null');
		}
		if (field_obj.read_only) {
			words.push('read_only');
		}


		/*

		if (is_defined(field_obj.length)) {
			words.push(field_obj.data_type);
			words.push('(');
			words.push(field_obj.length);
			words.push(')');
		} else {
			words.push(field_obj.data_type);
		}
		*/

		if (tof(field_obj))

		return words.join(' ');
	}


	// Could make a basic Data_Object too?
	//  Basic_Collection?

	// Then have different levels?
	var Fields_Collection = Class.extend({
		// a way of getting all the field names?

		// The Field_Collection could hold the context perhaps.

		'init': function(spec) {

			// could have a map of positions of fields?
			//  also, a Linked_List may be useful here.

			// That way fields could be quickly added. Order gets maintained.

			// Fields are really used as a system of influencing the lower-level constraints and indices.
			//  They are a convenient way of representing information about a field.

			// Perhaps an Ordered_List makes sense.
			//  Like a Linked_List, a wrapper that uses a Linked List for the Ordered List functionality.

			// Fields are definitely kept in order that way.
			//  Linked_Map seeming like a useful data structure.

			// Not storing a context for the fields?

			this.okvs = new Data_Structures.Ordered_KVS();
			//this.containing_object = spec.containing_object;


		},

		'_get_field_index': function(field_name) {
			//var res = -1;
			//each()

			// Maybe a linked list would work best... that way we can search through it (iterate until stop) to find the relevant item.
			//  linked list with an index as well? map holding a link to the node that holds the field item.

		},


		// Could maybe test just the fields collection?
		//  So we make a new collection of fields not associated with a control?


		// Needs more work on this part...
		//  Making it polymorphic and flexible, covering all or at least enough cases.

		// Non polymorphic version would be a lot faster.
		//  Perhaps using an inner function for the [string, value] operations, and the
		//   iterative version makes use of that.
		//'set': fp(function(a, sig) {
		'set': (function() {
	      var a = arguments;
	      a.l = arguments.length;
	      var sig = get_a_sig(arguments, 1);

			// Prime candidate for optimization here.

			// When setting an indexed array Data_Object, it sets a field collection.
			//  This is the case with a Color Data_Object.
			//   It has fields for red, green, blue. Perhaps alpha.


			/* This needs to work:

			'fields': {
				'products': Products_Collection
			},

			*/

			// [field name, function (constructor)]

			// will add the field to the array.

			//console.log('Fields_Collection set a ' + stringify(a));
			//console.log('Fields_Collection set sig: ' + sig);
			//console.log('Fields_Collection set a ' + stringify(a));
			// and when this has 2 strings...

			//throw 'stop';

			//console.log

			// [[n,s],[n,a]] - That looks possibly wrong anyway.

			// Using a (constructor) function in the field defintion.
			// ['networkInterfaces', NetworkInterfaces]

			var that = this;
			//var containing_object = that.containing_object;
			// str, str
			//  field_name, str_field_def
			// what about setting a single field with an array?

			// can check the formats - string, anything

			// Will have fairly versitile field definitions.

		    // [[['content', ['collection', 'control]]]]
			//console.log(">>> sig=" + sig);
			if (sig == '[a]') {

				//console.log('a.l ' + a.l);

				var item_or_arr = a[0];
				//var ioa_sig = get_item_sig(item_or_arr);
				var ioa_sig = get_item_sig(item_or_arr, 2);

				// want the signature that will go into the array.
				//  need to use a new option on get_item_sig
				//console.log('ioa_sig ' + ioa_sig);
				//console.log('item_or_arr ' + stringify(item_or_arr));
				// need to sort out this code...

				// But we don't want to misinterpret a single field as an array of fields.


				// ioa_sig [[s,~C],[s,s],[s,s],[s,~C],s]

				// array, string

				// [a,a]
				//  data type info is on the left.
				//  then the value(s) are on the right.


				//console.log('item_or_arr ' + stringify(item_or_arr));

				if (ioa_sig == '[s,s]') {
					// string name with string field representation
					var field_name = item_or_arr[0];
					var field_str_def = item_or_arr[1];

					//console.log('field_name ' + field_name);

					//console.log('*** *** field_str_def ' + field_str_def);

					var field_obj = parse_field_text(field_str_def);
					//console.log('field_obj ' + stringify(field_obj));


					var field_arr = [field_name, field_str_def, field_obj];

					//console.log('setting with field_arr ' + stringify(field_arr));

					this.set(field_arr);

					//field_obj.parent(containing_object);

				} else if (ioa_sig == '[s,f]') {
					// the function is a constructor function (should be one, maybe test this?)

					// A Class field.

					var field_name = item_or_arr[0];
					var field_str_def = 'Class';
					var field_obj = item_or_arr[1];

					var field_arr = [field_name, field_str_def, field_obj];

					// then actually do the set.

					//  find the index of the item
					//console.log('putting in okvs field_name: ' + field_name);
					//console.log('putting in okvs field_name: ' + field_name);
					this.okvs.put(field_name, field_arr);

					//throw 'ioa stop';

				} else if (ioa_sig == '[s,s,o]') {
					// string name with string field representation
					var field_name = item_or_arr[0];
					var field_str_def = item_or_arr[1];
					var field_obj = item_or_arr[2];
					//var field_arr = [field_name, field_str_def, field_obj];
					//this.set(field_arr);



					var field_arr = [field_name, field_str_def, field_obj];

					// then actually do the set.

					//  find the index of the item
					//console.log('putting in okvs field_name: ' + field_name);
					//console.log('putting in okvs field_name: ' + field_name);
					this.okvs.put(field_name, field_arr);
					//field_obj.parent(containing_object);

				} else {
					//console.log('other array, check for arr_of_arrs');
					//var ioa_sig = get_item_sig(item_or_arr);

					//console.log('ioa_sig ' + ioa_sig);

					// But there could be a collection - perhaps an abstract collection.
					//  I think indicate type as ~Collection.
					//  and ~C



					// n,s,s,? - the item in the ? is the defailt_value.

					// will use regex \d matching.

					var rx_test_sig_default_value = /\[n,\[s,s,\w\]\]/;


					// Ordinal position of fields...
					//  May need to be careful about that.


					if (ioa_sig == '[n,[s,s]]') {
						// a number, the index in array / sequence, then name, then data_type_name

						//console.log('item_or_arr ' + stringify(item_or_arr));

						var field_def = item_or_arr[1];
						var field_name = field_def[0];
						var field_type_name = field_def[1];

						//console.log('field_name ' + field_name);
						//console.log('field_type_name ' + field_type_name);

						if (field_type_name == 'collection') {
							// should be a collection of that type.

							//var field_arr = [field_name, field_type_name, field_item_type_name];#
							if (field_item_type_name) {
								var field_arr = [field_name, [field_type_name, field_item_type_name]];
							} else {
								var field_arr = [field_name, field_type_name];
							}

							// then actually do the set.
							//  find the index of the item
							//console.log('putting in okvs field_name: ' + field_name);
							this.okvs.put(field_name, field_arr);


						} else {

							// I think the field collection here is really just for storing info about the fields.
							//  It is when the objects represented by fields are get and set that the field functionality really comes into play.

							// can be the same as with collection!
							//  may do some more checks?

							var field_arr = [field_name, field_type_name];

							//console.log('field_arr ' + stringify(field_arr));

							// then actually do the set.
							//  find the index of the item
							//console.log('putting in okvs field_name: ' + field_name);
							this.okvs.put(field_name, field_arr);
							//console.log('done okvs put');

							//throw('7)stop');
						}
					} else if (ioa_sig.match(rx_test_sig_default_value)) {
						//console.log('matches regex, has default value.')
						//console.log('ioa_sig ' + ioa_sig);
						//throw 'stop';
						var field_def = item_or_arr[1];
						//console.log('item_or_arr ' + stringify(item_or_arr));
						var field_name = field_def[0];
						var field_type_name = field_def[1];
						var field_default_value = field_def[2];


						if (field_type_name == 'collection') {
							// should be a collection of that type.
							throw 'Default values for Collection not supported';
							//var field_arr = [field_name, field_type_name, field_item_type_name];#
							if (field_item_type_name) {
								var field_arr = [field_name, [field_type_name, field_item_type_name]];
							} else {
								var field_arr = [field_name, field_type_name];
							}

							// then actually do the set.
							//  find the index of the item
							//console.log('putting in okvs field_name: ' + field_name);
							this.okvs.put(field_name, field_arr);


						} else {

							// I think the field collection here is really just for storing info about the fields.
							//  It is when the objects represented by fields are get and set that the field functionality really comes into play.

							// can be the same as with collection!
							//  may do some more checks?

							var field_arr = [field_name, field_type_name, field_default_value];

							//console.log('field_arr ' + stringify(field_arr));

							// then actually do the set.
							//  find the index of the item
							//console.log('putting in okvs field_name: ' + field_name);
							this.okvs.put(field_name, field_arr);
							//console.log('done okvs put');

							//throw('7)stop');
						}

					}

					// if it's a string and an object


					if (ioa_sig == '[s,[s,s]]') {
						var field_name = item_or_arr[0];
						var field_def = item_or_arr[1];
						var field_type_name = field_def[0];
						var field_item_type_name = field_def[1];

						if (field_type_name == 'collection') {
							// should be a collection of that type.

							//var field_arr = [field_name, field_type_name, field_item_type_name];
							var field_arr = [field_name, [field_type_name, field_item_type_name]];
							// then actually do the set.
							//  find the index of the item
							//console.log('putting in okvs field_name: ' + field_name);
							this.okvs.put(field_name, field_arr);
						}
					} else {
						//console.log('* item_or_arr ' + stringify(item_or_arr));
						//console.log('ioa_sig ' + ioa_sig);
						//console.log('a ' + stringify(a));

						// Have changed the way that signatures work... now it's a for array.


						if (ioa_sig == '[]') {


						} if (ioa_sig == '[o]') {
							//console.log('ioa sig is an object ');
							//console.log('item_or_arr ' + stringify(item_or_arr));
							throw 'stop';
						} else {
							//console.log('pre stop');
							//throw ('6)stop');



							// Should have a more complete picture of the fields... where do these come from?

							// [s,o] object being a more complex definition.
							//  possibly a compound object.

							// An object with more field definitions declared within it.
							//  Will opt for lazy loading in various cases where possible.
							//   But some default values will need to be loaded at times.
							//    May also need to get loaded upon stringify.

							//



							/*
							["object", "dom_attributes", "string"]
							ioa_sig [s,s,s]
							*/

							/*
							'node': 'object',
							'attributes': 'dom_attributes',
							'tagName': 'string'
							*/

							// Maybe do more testing of Data_Object or Data_Object fields.
							//  Will try a single field of a Data_Object with a particular type.

							if (ioa_sig == '[s,o]') {
								// it's a compound definition.
								// will need to create the next level down, ie create the new Data_Object, and set its
								//  fields.

								// An object indicates it's a Data_Object.
								//  It's a field that gets declared with a particular data_type.
								//   That goes into the fields and constraints for that object.
								var fieldName = item_or_arr[0];
								var fieldDef = item_or_arr[1];

								// So there is a data type name? ie field name, and its data inside?
								// anyway, need to make a Data_Object with those fields.

								// Need to be able to make a Data_Object using fields that are supplied as an object
								//  rather than an array of arrays.



								//console.log('fieldDef ' + stringify(fieldDef));

								var field_arr = [fieldName, ['data_object', fieldDef]];
								this.okvs.put(fieldName, field_arr);

								// can we put this in relatively easily?
								//  the complicated part is interpreting the field.

								//throw 'stop';

							}

							//console.log('ioa_sig ' + ioa_sig);
							//console.log('item_or_arr ' + stringify(item_or_arr));
							//console.log('OTHER CASE!!!!');

							// [s,[o]]
							//  means a named array/collection of objects/dataobjects.
							//   in that case, we create a collection, and give it the type defined inside.

							if (ioa_sig == '[s,[o]]') {
								var fieldName = item_or_arr[0];
								var fieldItemDef = item_or_arr[1][0];

								// needs to make a collection field.

								// var field_arr = [field_name, [field_type_name, field_item_type_name]];

								// But won't go making nested data types?
								//  needs to ensure the types specified inside match OK,
								//  so need to (recursively) go into the definition.

								//console.log('fieldItemDef ' + stringify(fieldItemDef));

								// include more data in the info about the fields?
								//  do that to make it work in a more deeply nested way?
								//   or think some more about nested fields.

								// The field needs to be defined as being a collection of that type.
								//var field_arr = [fieldName, ['collection', field_item_type_name]];
								var field_arr = [fieldName, ['collection', fieldItemDef]];
								this.okvs.put(fieldName, field_arr);


								//throw 'stop';

							}



							if (ioa_sig == '[s,~C]') {
								// string, abstract collection

								// Items in an array...

								// need to set the field to hold an abstract collection....

								// Setting a field to an abstract collection of strings.
								//  We have supplied the abstract collection but we want there to be a collection instance.

								// Need to create the field of that actual type within the field collection.

								var t_abstract = native_constructor_tof(item_or_arr[1]._type_constructor);
								//console.log('t_abstract ' + t_abstract);
								//console.log('item_or_arr[1] ' + stringify(item_or_arr[1]));


								if (t_abstract) {
									var field_name = item_or_arr[0];
									var field_arr = [field_name, ['collection', t_abstract.toLowerCase()]];
									//console.log('field_name ' + field_name);
									//console.log('field_arr ', field_arr);
									this.okvs.put(field_name, field_arr);
								} else {
									var field_name = item_or_arr[0];
									var field_arr = [field_name, 'collection'];
									//console.log('field_name ' + field_name);
									//console.log('field_arr ', field_arr);
									this.okvs.put(field_name, field_arr);
								}

								// we can make a new field without the abstract condition of the constructor.
								//  will then eventually get these tags, and css-matched tags operating.
								// Then will be able to set up behaviours relatively easily.

								// Typed collections as data types is another thing to consider, as well as the syntax for declaring
								//  the abstract typed collections.
								// This hopefully will not introduce too much code bloat, it will be very good to get this system
								//  compressed right down for use in client apps. Could have things reduced down to a few KB (maybe 12?)
								//   and this would also allow for various application items to be working nicely.



								//throw 'stop';

							}
						}


					}
					// [[s,[s,s]]]
					// eg ['content', ['collection', 'control']]
					// [items]
					// [[str_name, str_type]]

					// could be a collection of something.

					var aoa = is_arr_of_arrs(item_or_arr);
					//console.log('aoa ' + aoa);

					if (aoa) {
						var c = 0, l = item_or_arr.length;
						for (c = 0; c < l; c++) {
							this.set(item_or_arr[c]);
						}

					}

					//if (aoa) {
					//	each(item_or_arr, function(i, v) {
					//	    that.set(v);
					//	});
					//}
					/*
					if (aoa) {
						//var this_set_call = this.set.call;
						var this_set = this.set;
						for (var c = 0, l = item_or_arr.length; c < l; c++) {
							this_set(item_or_arr[c]);
						}
					}
					*/
				}
			};

			if (sig == '[o]') {
				// add each one
				//var that = this;
				var a0 = a[0];

				// object.keys will hopefully be faster.

				var a0_keys = Object.keys(a0);

				var c = 0, l = a0_keys.length;

				for(c = 0; c < l; c++) {
					this.set(a0[a0_keys[c]]);

				}

				// Older JS code
				/*

				var this_set_call = this.set.call, a0 = a[0];
				for (i in a0) {
				    //console.log(this_set_call);
				    //this_set_call(this, [i, a0[i]]);
				    this.set.call(this, [i, a0[i]]);

				}

				*/

				/*
				each(a[0], function(field_name, field_def) {
					//console.log('i ' + stringify(i));
					//console.log('v ' + stringify(v));
					//console.log('');
					that.set([field_name, field_def]);
				});
				*/



			}

			// then for setting in other ways...
			//  name then field definition.


			if (a.l > 1) {
				//console.log('longer a.l');
				//throw 'stop';
				this.set(a);
			}


			/*
			if (a.l == 1 && tof(a[0]) == 'array') {
				each(a[0], function(i, field_arr) {

				});
			}
			*/
			// [s,[s,o]]

			// s, o
			// o

			// the object representation of a field, can have various flags.

			/* var res = {
				'is_unique': is_unique,
				'is_indexed': is_indexed,
				'is_not_null': is_not_null,
				'data_type': data_type

				// possibly name

			} */

			// str, arr
			//

		}),
		'get': function(a0) {
			//console.log('Fields_Collection get sig: ' + sig);
			var ta0 = typeof a0;
			if (ta0 == 'undefined') {
				// get them all
				// just the objects though?
				return this.okvs.values();
			} else if (ta0 == 'string') {
				return this.okvs.get(a0);
			}
			/*
			if (sig == '[s]') {
				// get a single field.
				//console.log('fc get ' + a[0]);


				//console.log('this.okvs.length() ' + this.okvs.length());
				// does it have anything with that key?

				var res = this.okvs.get(a[0]);

				//console.log('a[0] ' + a[0]);
				//console.log('this.okvs.keys() ' + this.okvs.keys());

				//console.log('Fields_Collection get ** res ' + stringify(res));
				return res;
			}
			*/
		},
		/*
		'_get': fp(function(a, sig) {
			//console.log('Fields_Collection get sig: ' + sig);

			if (sig == '[]') {
				// get them all
				// just the objects though?
				return this.okvs.values();
			}
			if (sig == '[s]') {
				// get a single field.
				//console.log('fc get ' + a[0]);


				//console.log('this.okvs.length() ' + this.okvs.length());
				// does it have anything with that key?

				var res = this.okvs.get(a[0]);

				//console.log('a[0] ' + a[0]);
				//console.log('this.okvs.keys() ' + this.okvs.keys());

				//console.log('Fields_Collection get ** res ' + stringify(res));
				return res;
			}
		}),
		*/
		'fields': function() {
			return this.get.apply(this, arguments);
		},
		/*
		'_fields': fp(function(a, sig) {
			return this.get.apply(this, a);
		}),
		*/

		'out': function(key) {
			this.okvs.out(key);
		},
		'clear': function() {

		}
	})



	Fields_Collection.parse_field_text = parse_field_text;
	Fields_Collection.parse_data_type = parse_data_type;

	//return Fields_Collection;
    module.exports = Fields_Collection;

//})

},{"./constraint":27,"./jsgui-data-structures":36,"./jsgui-lang-essentials":38}],29:[function(require,module,exports){
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(["./jsgui-lang-essentials", "./jsgui-data-structures", "./constraint", "./data-object-fields-collection"],
	function(jsgui, Data_Structures, Constraint, Fields_Collection) {

	*/
var jsgui = require('./jsgui-lang-essentials');
var Data_Structures = require('./jsgui-data-structures');
var Data_Value = require('./data-value');

var Constraint = require('./constraint');
var Fields_Collection = require('./data-object-fields-collection');
var Evented_Class = require('./evented-class');

	// Creates the Constraints data type... so a constraint specified with a string can be tested against
	//  also a cache of the constraints that have been made through the string - quick to get them again for reuse when testing.

	// Constraint objects can be saved and used in various places.
	//  They may not always be referred to directly, that would save on the amount of code needed.

	// They will help in making a model of what gets put into a database.
	//  A few constraints put in place in the domain model or similar will help with its translation to a database model.

	// These wide-ranging things should help a lot with creating a wide range of performant databases quickly.
	// It will also be a good tool in itself.

	// Change events
	// -------------

	// Want to have different levels of responding to change events.
	//  It gets a bit complicated with the same data represented in different places and also in transmission between them.
	//  Data will have various different statuses.
	//  Need to be able to recieve data from the server, and update the client data models, and announce it within the client app,
	//   without then telling the server that the data has been changed on the client, unless it makes it clear to the server that the client was
	//   making the change as the server requested. That change acknowledgement could be a useful feature on the client.
	//    Don't want that to be more than an acknowledgement though.
	//   Also need to deal with change initiation properly.
	//    The change could be initiated on the client, needs to be updated on the server, and then sent to the various different clients.
	//     Could have different levels of receipt validation there too, so that the client knows once the change has been recieved (and processed?) by
	//      the other clients. This could be useful for amber and green lights in a chat system, for example.
	///    Receipt of message validation would also be useful for data structures and making them transactional if possible.

	// So, we need a type of set that is for updating the data from an updated external source.

	// notify_change_from_external
	//  and when that has processed it could send a receipt of update message notification back to the server.
	//  That should probably be optional.














var j = jsgui;
var Class = j.Class;
var each = j.each;
var is_array = j.is_array;
var is_dom_node = j.is_dom_node;
var is_ctrl = j.is_ctrl;
var extend = j.extend;
var get_truth_map_from_arr = j.get_truth_map_from_arr;
var get_map_from_arr = j.get_map_from_arr;
var arr_like_to_arr = j.arr_like_to_arr;
var tof = j.tof;
var is_defined = j.is_defined;
var stringify = j.stringify;
var functional_polymorphism = j.functional_polymorphism;
var fp = j.fp;
var arrayify = j.arrayify;
var mapify = j.mapify;
var are_equal = j.are_equal;
var get_item_sig = j.get_item_sig;
var get_a_sig = j.get_a_sig;
var set_vals = j.set_vals;
var truth = j.truth;
var trim_sig_brackets = j.trim_sig_brackets;
var ll_set = j.ll_set;
var ll_get = j.ll_get;
var input_processors = j.input_processors;
var iterate_ancestor_classes = j.iterate_ancestor_classes;
var is_arr_of_arrs = j.is_arr_of_arrs;
var is_arr_of_strs = j.is_arr_of_strs;
var is_arr_of_t = j.is_arr_of_t;
var clone = jsgui.clone;

var data_value_index = 0;
var data_value_abbreviation = 'val';

// do data objects get an ID when they are initialized.
jsgui.__data_id_method = 'init';

var obj_matches_constraint = Constraint.obj_matches_constraint;
var native_constructor_tof = jsgui.native_constructor_tof;

var value_as_field_constraint = Constraint.value_as_field_constraint;

var Ordered_String_List = Data_Structures.Ordered_String_List;


// gets a value as a field_constraint object.
//var ensure_data_type_data_object_constructor = j.ensure_data_type_data_object_constructor;


// So, Data_Objects may have a Page_Context, Application_Context, or just Context.
//  The Context would include info such as which browser is being used.
//   Controls will render differently depending on the context.

// jsgui.data_types_info and data_type will become much more closely integrated into this.
//  Perhaps there should be another module level for this.

// Not sure about introducing it here. Maybe in lang-essentials? Don't want that to get too big.

// Data_Object Flags is the next thing here...
//  But that requires a Collection.
// Can make Enhanced_Data_Object?
//  Or make Data_Object enhance itself once it has a Collection.
//  Or could do Flags on a lower level.

// Quite a complicated question.
//  Flags running as a collection of strings makes a lot of sense.
//   Will be ordered etc.

// Could make a basic Data_Object too?
//  Basic_Collection?

// Then have different levels?


var Mini_Context = Class.extend({

    // Need quite a simple mechansm to get IDs for objects.

    // They will be typed objects/

    'init': function(spec) {


        var map_typed_counts = {}
        var typed_id = function(str_type) {
            throw 'stop Mini_Context typed id';

            var res;
            if (!map_typed_counts[str_type]) {
                res = str_type + '_0';
                map_typed_counts[str_type] = 1;
            } else {
                res = str_type + '_' + map_typed_counts[str_type];
                map_typed_counts[str_type]++;
            }
            return res;
            /*
            var iTypedIds = {};
            if (typeof iTypedIds[str_type] === 'undefined') {
                    iTypedIds[str_type] = 1;
            }

            var typed_id = function(str_type) {
                if (typeof iTypedIds[str_type] === 'undefined') {
                    iTypedIds[str_type] = 1;
                }
                var res = iTypedIds[str_type];
                iTypedIds[str_type] = iTypedIds[str_type] + 1;
                return res;
            };
            this.qid = qid;
            */
        }
        this.new_id = typed_id;
        //new_id
    },

    'make': function(abstract_object) {
        if (abstract_object._abstract) {
            //var res = new
            // we need the constructor function.

            var constructor = abstract_object.constructor;
            console.log('constructor ' + constructor);


            //throw 'stop';

            var aos = abstract_object._spec;

            // could use 'delete?'
            aos.abstract = null;
            //aos._abstract = null;
            aos.context = this;

            //console.log('abstract_object._spec ' + stringify(abstract_object._spec));
            // Not sure it is creating the right constructor.


            var res = new constructor(aos);
            r
            return res;
        } else {
            throw 'Object must be abstract, having ._abstract == true'
        }
    }

});


// Enhanced_Data_Object with flags seems like one of the best options.
//  These flags can easily correspond to CSS classes in an MVC system too, CSS will be automatically updated when the object's properties change.

// And Control will inherit from Enhanced_Data_Object.
//  Flags is not a massive enhancement, but there could be more.
//  Could maintain a Collection of references to other Data_Objects and Enhanced_Data_Objects more conveniently.


// Want either express-like routing, or to lift the routing out of Express.
//  It may be worth integrating Express right into this, for the things that Express does.
//   There may be various things that Express does not do, but could be called upon to assist with.
//    JSGUI seems very much about building the HTML, and acting as MVC on client and server. It could use Express.
//     Or it could incorporate Express.
//      Perhaps JSGUI can be used by Express to render pages.
//       Will have it compatable, but there will be some overlapping features.
//       jsgui could use some Express routing by default.

// Having je suis XML running soon will be nice!
//  Could serve from a directory.
//   Want to get that working as that will really be the code path that is taken.
//   Could get a site up and running using that before so long...
//    But also want to have the discussion forum running. Doubt I want all the ORM for that, but will be able to get it running in a document database before too long.
//   Then the system will definitely be quite fast.
//    Would not be all that much user data, but would need to start to keep it backed up / consistent.

// Data_Object is not using 'nested' at the moment.

// Nested has got fairly complicated, it's fairly good though.
//  Perhaps it will wind up being refactored into Data_Object and uses of that.

// Currently Nested is dealing with data types.

// We need to ensure that data getting put into Data_Objects meets data type criteria.
// Nested also has the ability of transforming data.
// 1) Meets the criteria
// 2) Meets criteria for transformation into the correct data

// The data types can be dealing with nested information too.
//  I think dealing with nested information will wind up in the core.
//  The core may wind up being abit big, but it's all important stuff.
// With 4G and the use in various environments like conference halls, downloading 32KB onto an iPad would not be a problem.
//  I think the whole thing could load very quickly, then present the user with a powerful application.



// The schemas system is going to be namespaced, and will use a Namespaced_Dict object, which will use a B+ tree, for retrieval by prefix.

// Should possibly be called constrints.
// Having Constraints built right into Data_Object may be the most suitable thing to do.

// It is the same terminology as databases.
//  Field constraints makes sense too.

// Constraints that apply to whole collections - the same language used to talk about indexes.
//  Indexes will be used to power unique constraints, so it'll make use of the 'constraint' terminology.

// Bringing the focus to 'constraints' will help bridge the gap into the database world.
// Things will be expressable in a way that is more closely transferrable,
//  though some constraints in this system will be represented using types in other systems.

// This will possibly become quite a widely used MVC paradigm.

// I think having plenty of tests, API documentation, and well-written tutorial / reference documentation will help a lot.
//  Can have quite a few pages of this documentation with Google adverts.
// I would be interested to see how much a small amount of advertising on the documentation part of my site will make.
//  Also, advertising will not be shown to the paying customers.



// constraint function?
//  and can give it multiple constraints?

// be able to get information about the constraints that are applied to a Data_Object as well.
//  Remember, the constraints won't be stored in a collection.


// They will be called constraints.

// constraint?
// singular does make sense because we do keep giving them maps and arrays to process.

// The constraints in use on the Data_Object will be field constraints.

// Data_Object needs more work to do with setting, getting, and checking against its fields.
//  Have checking for collections, but need checking for changing a field's value.

//  The fields system here will have clear, logical results when testing.
//   Possibility of connection a fields check onto the object class, or having one for all objects of that class?
//   Don't want to be holding lots of repeated data about fields in memory, though it's not really a major problem to begin with.



// easy api with add_field etc...
// ensure_field.
// remove_field
//  would need to remove indexes


// perhaps just call them field_constraints for the moment.
//  saying a field is indexed... that has more to do with the collection.

// Will not use a 'Field' object.
//  Fields will be held in the form [name, [string_representation, obj_representation]]

// Fields_Collection?
//  This seems like a nice encapsulation of the fields functionality, stopping the Data_Object from becoming too complicated itself.
//   The fields may have some indexes added for faster lookup at a later stage, Data_Object can easily use the API.
//  set_field  (ensure_field) / set
//  remove_field / remove / out
//  get_field / get(field_name)
//  get_fields / get()
//  set_fields / set(map or array)
//   other lower level things, remove_field_index(field_name), remove_field_unique(field_name), remove_field_flag(field_name, flag_name), add_field_flag etc
//    also while suppressing raising of events (when an index has been deleted, this will be about updating the field so that it does not refer to that index.
//    these will be carried out when indexes or constraints (that refer to fields) are added/removed

// Will also raise events for when fields are added, removed, or changed.
//  This will enable other components, that refer to fields, such as Constraints and Indexes, to remain updated.
//   When adding / removing constraints, will need to have that update the field info, maybe modify fields while suppressing events.

// All lower level collection systems...
//  not arranged around Data_Objects

// The Index_System does the job with indexes on a collection.


// Fields referring to the field constraints.
//  Field constraints being their own classes... fields not being so?

// Fields referring to their actual indexes. Collection has the Index_System, but we need to be referring to indexes from the field?
//  or just hold the info in the field that it is to be indexed. Modifying this can alert the collection so that it removes the index from the field.

// Some constraints / indexes will only apply to fields of objects within a collection.


// Constraints_Collection
// Indexes_Collection?

// [field_name, [str_repr, obj_repr]]

// will coerce the types a little - ensure it is arr3_field format
//  [name, str_def, obj_def]


// This will hold a collection of fields that are used by an object.
//  They get maintained in a particular order.

// But what exactly are these fields?

// Stores an array of fields...?


//var map_jsgui_ids = {};

// Won't be a whole map of IDs for every object made by jsgui.
//  They will be stored within a Page_Context.
//  There had been a great slowdown for subsequent requests. Definitely don't want that.

/*

var new_data_value_id = function() {
    var res = data_value_abbreviation + '_' + data_value_index;
    data_value_index++;
    return res;
};
*/

// I think Data_Object will be made so that it can act as a Data_Value.
//  It will work in a very constrained mode, such as only holding one value, such as a string.
//  It may also hold a field name and a value.
// Data_Object(String);

// Collection using a Data_Value constraint?
//  Constrinat testing is already in Data_Object.

// Data_Value is likely to have a type. It could have type checking. Needs to be lightweight though.

// I think the Data_Value will also have events.
//  Change event being the main one of interest at the moment.








// This system will exist within the Page_Context
//  We don't want loads of these controls / Data_Objects to stay within the normal application memory all the time.


// Context will hold these indexes.
//  A context will be set up for each page request.
//  Request_Context?
//  Page_Context on the client?

// Lots of objects will have links to their contexts.
//  Will make it easy to get info about what browser / front-end capabilities there are.




/*

var data_object_index = 0;
var data_object_abbreviation = 'do';

var new_data_object_id = function() {
    var res = data_object_abbreviation + '_' + data_object_index;
    data_object_index++;
    return res;
};

*/

// What about turning a normal object into a DataObject?
//var t_id_num = 0;
// May be good for testing the collecton and data object.

// Don't want the Data_Object to always be betting IDs (after all).
//  Don't want to always have to have a context - though for many purposes a context will help when rendering HTML.
//   Has got in the way of other simpler things.

var is_js_native = function(obj) {
    var t = tof(obj);
    return t == 'number' || t == 'string' || t == 'boolean' || t == 'array';
}


// Should maybe make it extend Evented_Class
//  Data_Value would extend that as well.

// Control would have specific handling for DOM events.

// With EVented_Class in lang-essentials?



// Data_Objects have contexts.
//  Not sure about registering every Data_Object within the context.
//  It seems worthwhile having Controls registered within a Page_Context.
//  Perhaps data, registered within a Data_Context (which I am yet to make) could enable a spreadsheet to have components that get notified about changes to the data.

// I think that I will have controls register themselves within the context.
//  call context.register_control()


var Data_Object = Evented_Class.extend({
    'init': function(spec) {
        // but it could do a different initialization as an abstract object.
        //  Collection(String) seems more like an abstract collection, or even a newly defined type.
        //  because of its easy syntax, Collection(String) makes a lot of sense to use.
        // going without the new keyword when we are not particularly looking for an actual new collection,
        //  but something that signifies its type as a collection of strings.
        //   May be possible to have these running in abstract (or schema?) mode.
        //   I think abstract mode fits in well with names we already are using.

        //console.log('begin Data_Object init');

        // bound_events needs to be overhauled quite a lot.
        //  There is a major problem with it right now.

        //  It's not staying within the context.
        //   Don't really want to be storing the index of object ids?
        //    could be useful during the creation of the page.


        // can have 'abstract': true in the spec,
        //  we will get this if it was called without the 'new' keyword as well.
        if (!spec) spec = {};
        //if (!is_defined(spec)) {
        //	spec = {};
        //};

        // if it's abstract call the abstract_init.

        if (spec.abstract === true) {
            //throw 'stop abstract';
            // this may need to be more lightweight.

            this._abstract = true;

            // iinit = instance init?
            //  with it only needing to save the spec, not do further initialization?



            //console.log('tof(spec) ' + tof(spec));

            // And with the spec as a function, we'll be able to say that each item must match that constructor
            //  However, there are only a few native JavaScript functions to check this against.

            // As a function, it gives a type constructor.
            //(console.log('tof(spec) ' + tof(spec)));
            var tSpec = tof(spec);

            if (tSpec == 'function') {
                this._type_constructor = spec;
                // could possibly
                // but maybe want to keep this json-friendly.

                // the type constructor could be used in a collection.
                //  could be more leightweight than other things? specific constraint objects.
            }
            // Abstract controls won't be dealing with events for the moment.
            if (tSpec == 'object') {
                this._spec = spec;
                // could possibly
                // but maybe want to keep this json-friendly.

                // the type constructor could be used in a collection.
                //  could be more leightweight than other things? specific constraint objects.
            }

        } else {
            var that = this;
            this._initializing = true;

            var t_spec = tof(spec);
            //console.log('t_spec', t_spec);

            if (!this.__type) {
                this.__type = 'data_object';

            }

            if (!this.hasOwnProperty('_')) {
                this._ = {};
            }

            if (t_spec == 'object') {
                // Normal initialization

                if (spec.context) {
                    //console.log('spec has context');

                    this._context = spec.context;
                }

                if (spec._id) {
                    this.__id = spec._id;
                }

            }
            if (t_spec == 'data_object') {
                // Initialization by Data_Object value (for the moment)

                // Not so sure about copying the id of another object.

                if (spec._context) this._context = spec._context;

                // then copy the values over from spec.

                var spec_keys = spec.keys();
                //console.log('spec_keys', spec_keys);

                each(spec_keys, function(i, key) {
                    that.set(key, spec.get(key));
                });


            }


            // Why would the spec be a function?








            //this._relationships = {};

            // when setting a value with another Data_Object,
            //  make the child one remember the parent relationship.
            //  may be possible to have multiple parents, could be that a data set is referred to in two places. When that data set changes it will get changed in
            //   all of its parents too.

            // not so quick.
            //  Don't want that item appearing unnecessarily.
            //  May ensure it at a later stage.

            //this._requirements = {};

            // then __type_name
            // __data_type_obj? (maybe not needed because of (quick) lookup from name, seems more memory efficient?)

            //var ctr = this.caller;
            //var dtn = ctr.data_type_name;
            //console.log('dtn ' + dtn);
            //console.log('this.__type_name ' + this.__type_name);
            //console.log('this.__data_type_info ' + stringify(this.__data_type_info));

            // and if a data type has been declared, we'll be parsing the input.
            // will essentially be setting the 'value' in the spec.

            // always the case with constructors when given a data_type?
            //console.log('do this.__type ' + this.__type);

            //console.log('jsgui.__data_id_method ' + jsgui.__data_id_method);
            //throw 'stop';

            if (!is_defined(this.__id) && jsgui.__data_id_method == 'init') {

                // It should have the context...
                //  But maybe there can be a default / application / initialization context (not serving a particular page).
                //   Things to do with processing jsgui would be in that context.

                if (this._context) {
                    //console.log('this._context ' + this._context);
                    //console.log('sfy this._context ' + stringify(this._context));
                    this.__id = this._context.new_id(this.__type_name || this.__type);
                    //console.log('DataObject new ID from context: ' + this.__id);

                    //this._context.map_objects[this.__id] = this;
                    // Not keeping a map of objects by id in the context.

                } else {

                    // Use the default context.
                    // possibly make a new_data_object_id function?

                    // Maybe don't need to give all data objects ids.

                    //var create_id = function()
                    /*
                    var new_data_object_id = function() {
                        var res = '_tid_' + t_id_num;
                        t_id_num++;
                        console.log('new temp id ' + res);
                        return res;
                    }

                    console.log('no context found - creating new temp id. should have context');

                    this.__id = new_data_object_id();

                    */
                    // don't think we keep a map of all IDs, or we will do within a Page_Context.
                    //map_jsgui_ids[this.__id] = this;
                    // and make sure it is within the index / map of jsgui objects with ids.
                }


            }

            // don't get it from the prototype
            // It was copying over from the prototype.
            //  01/07/2012, it took a while to track this down.
            //   Copying things over from a prototype could prove very useful.
            //   May do more work on a type system, and then rebuild the whole thing around a type / class system that is definitely more advanced.
            //

            // so, not getting it through the prototype chain.


            // is also going to have a _fields object.
            //  the _fields will have different things in them.

            // Not sure about this.

            if (is_defined(this.__type_name)) {
                spec = {
                    'set': spec
                }
            };

            /*
            if (is_defined(spec.data_def)) {
                //spec = {
                //	'set': spec
                //}

                this.

            };
            */

            // data_def

            //this._ = this._ || {};
            //var _ = this._;

            // ensure(this, '_');
            //var _ = this._ = this._ || {};


            // but the collection could be made in the prototype I
            // think???

            // console.log('that._collection_names ' +
            // that._collection_names);

            // The collection names... could be dealt with using the
            // data_type_instance methods.

            // Interesting... has collections inside.

            // ok, so it works so far.

            // but with the collection properties - can these be
            // initialized here?
            // maybe do that within the collection property....
            // but may need to check too much.

            // the chain of fields... not sure how the chain needs to work backwards.
            //  for person recorded: [[0, ["flags", ~Collection(String)]], [0, ["dob", "date"]], [1, ["name", "string"]]]
            //  maybe need to join them together better? into a fields list?
            //  so we start with the most recent ones?
            //  fields map so we know what they are by name, so ignoring the repeated ones going back, who's definition will have been overwritten.
            //  Then we use the chained fields in the right order... set the fields up?
            //   But I think we want lazy field loading anyway.

            // Need to have the dom field available to HTML.

            var chained_fields = get_chained_fields(this.constructor);
            var chained_fields_list = chained_fields_to_fields_list(chained_fields);

            //var chained_fields_list = chained_fields_to_fields_list(get_chained_fields(this.constructor));
            // need to look at how the chained fields are set up.
            //  I think various (chained) fileds will get set up during the normal initialization of the library.



            // It may not be setting up the fields right for Color.
            //  There is an indexed array of red, green, blue.




            //console.log('chained_fields ' + stringify(chained_fields));


            //console.log('* chained_fields ' + stringify(chained_fields));
            //console.log('* chained_fields_list ' + stringify(chained_fields_list));
            // the chained fields list seem OK.

            // But making just a list of fields out of the chained ones...
            //  is it working OK?

            //throw 'stop';

            //console.log('* chained_fields_list ' + stringify(chained_fields_list));
            //throw 'stop';
            // then process the chained fields to fields list...

            // Need to set the Context?

            // I think only make the fields collection if there are fields.

            if (chained_fields_list.length > 0) {
                this.fc = new Fields_Collection({

                    // Fields collection has a context?

                    //
                    //'containing_object': this
                });

                // but the field object itself may be created on get.
                //  need to make sure at that time it has its parent.

                // need to check how this is getting set now.
                //  This is only really dealing with setting up some info for the fields, the fields will likely be empty until they are needed,
                //   using lazy loading to save memory.
                //console.log('');
                //console.log('');
                //console.log('*** chained_fields_list ' + stringify(chained_fields_list));

                //this.fc.set(chained_fields);
                this.fc.set(chained_fields_list);

                // the fields collection... that needs to handle fields that are given
                //  as constructor functions.
                //   maybe assume a function is a constructor function?
                //    then a 'products' field that is given by a constructor function
                //     would then have a connected field that sets that value.


                var do_connect = this.using_fields_connection();
                if (do_connect) {

                    var arr_field_names = [], field_name;
                    each(chained_fields, function(i, field_info) {
                        //console.log('field_info ' + stringify(field_info));

                        field_name = field_info[1][0];
                        //console.log('field_name ' + field_name);
                        arr_field_names.push(field_name);
                    });

                    // just an array of fields.
                    //console.log('arr_field_names ' + stringify(arr_field_names));
                    this.connect_fields(arr_field_names);
                }
            }


            // does set work OK?



            // that should have done it...
            //  the field collection should now hold info about all of the fields.


            //this.fields(chained_fields);



            // also, if we have fields (obtained through the field chain in this case), we then need to check if the fields get connected.
            //  this is a nice way of doing things, making it easy to specify, but without too much going on automatically.

            //


            // have something in the prototype that says the collection
            // names?
            // order of bound events called not strictly set.


            // could possibly do this at a later stage of initialization, once the variables have been set for sure.
            //  could have already set the variables.
            //console.log('spec ' + stringify(spec));

            //console.log('chained_fields_list ' + stringify(chained_fields_list));


            //var chained_fields_map = mapify(chained_fields_list, 0);
            //console.log('chained_fields_map ' + stringify(chained_fields_map));
            //each(chained_fields_list, function(i, v) {
                //chained_fields_map[v[0]] = v[1];
            //});

            // go through chained_fields_map[i]), setting up fields.

            // maybe best to use the list.

            /*
            each(chained_fields, function(i, chained_field) {
                var field_name = chained_field[0];
                var field_def = chained_field[1];

                // The point is, I think, that I am not making field classes, but processing them using some more basic variable types.

                //console.log('field_name ' + field_name);
                //console.log('field_def ' + stringify(field_def));

                // at least it has those fields... I am not sure it needs to do anything until 'get', maybe even if there are default values.


            })
            */


            //console.log('tof(spec) ' + spec);
            var chained_field_name;

            // If the spec is an object.

            if (t_spec == 'object') {
                each(spec, function(i, v) {

                    // Just copy the functions for the moment?
                    // what about copying everything else?
                    // need to may more attention to adding things?
                    // push the other, non-function items one by one?

                    // Or copy the other things to '_'.

                    // var my_i = that[i];
                    // will save a bit in the Core rewrite. Will eventually
                    // put these techniques in the main lib.
                    // calling the functions???

                    // May be used for controls???
                    // Function calls in spec...
                    // Calling things like 'bind' through the spec.

                    //console.log('i ' + i + ' =v= ' + v + ' that[i] ' + that[i]);

                    // Other thing that we may want to do is just copy
                    // things.
                    // Really not sure about that in general though, with
                    // DataObject being so generally used as a basis for
                    // things like controls.

                    if (typeof that[i] == 'function') {
                        // connected by now!

                        // such as setting the fields...

                        that[i](v);
                    } else {
                        // _[i] = v;

                        // they could be values...
                        //  should set the values

                        // possibly only set them if they correspond to fields?

                        // set values from fields seems like a good idea here.
                        //  that seems like a good level of connectedness.
                        //  want a map of the fields to quickly test them.

                        // setting values from chained fields?
                        //  probably better to set them from the normal fields.

                        //console.log('2* chained_fields ' + stringify(chained_fields));
                        //console.log('2* chained_fields_list ' + stringify(chained_fields_list));

                        // it will be dom.nodeType.



                        // then it should be able to set some values.
                        //console.log('spec ' + stringify(spec));

                        // maybe a map of chained fields would work better.

                        // Could be done a lot more efficiently with a map.

                        if (chained_fields_list.length > 0) {
                            var tcf, chained_field;
                            for (var c = 0, l = chained_fields_list.length; c < l; c++) {
                                chained_field = chained_fields_list[c];
                                tcf = tof(chained_field);

                                if (tcf == 'string') {
                                    chained_field_name = chained_field;
                                } else if (tcf == 'array') {
                                    chained_field_name = chained_field[0];
                                }

                                //console.log('chained_field_name ' + chained_field_name);
                                // coming out as undefined.

                                // I think I need to redo the field chaining system somewhat.
                                //  It's algorithms can be made faster and neater.
                                // Basically, at any level we define fields.
                                // Need to be able to get the fields for this level.
                                //  Would help to get the names of the parents.
                                //   Field definitions of the subclasses overwrite those of the superclasses.

                                // Want to be able to get the field chain...
                                //  That is going backwards getting all of the fields.
                                //   Not overwriting them as older ones are found.




                                // Redoing the field chaining is probably one of the largest
                                //  changes to make in order to get a nicely working system.





                                //console.log('i ' + i);

                                // Need to make sure we a are properly holding the field types.

                                if (chained_field_name == i) {
                                    //console.log('*** chained_field_name ' + chained_field_name);
                                    //console.log('setting');
                                    //that.set([i, v]);

                                    // Need to check setting a collection with an array.
                                    that.set(i, v);

                                    //console.log('that._[i] ' + stringify(that._[i]));
                                }
                            }

                            /*
                             each(chained_fields_list, function(i2, chained_field) {
                             //console.log('chained_field ' + stringify(tof(chained_field)));



                             if (tof(chained_field) == 'string') {
                             chained_field_name = chained_field;
                             }
                             if (tof(chained_field) == 'array') {
                             chained_field_name = chained_field[0];
                             }

                             //console.log('chained_field_name ' + chained_field_name);
                             //console.log('i ' + i);

                             if (chained_field_name == i) {
                             //console.log('chained_field_name ' + chained_field_name);
                             //console.log('setting');
                             //that.set([i, v]);

                             // Need to check setting a collection with an array.
                             that.set(i, v);

                             //console.log('that._[i] ' + stringify(that._[i]));
                             }
                             });
                             */
                        }


                        //throw('stop');
                        /*
                         //chained_fields_list
                         if(chained_fields_map && is_defined(chained_fields_map[i])) {
                         console.log('chained_fields i ' + i);
                         console.log('chained_fields v ' + v);



                         that.set(i, v);
                         }
                         */
                    }
                });

                // events as a list?
                // or named anyway?

                // then there is a list for the events of each name.
                // also, will create the _bound_events object when needed.
                //this._bound_events = {};

                if (is_defined(spec.event_bindings)) {
                    throw '16) stop';
                    each(spec.event_bindings, function(event_name, v) {
                        if (tof(v) == 'array') {
                            each(v, function(event_name, fn_event) {
                                if (tof(fn_event) == 'function') {
                                    this.add_event_listener(event_name, fn_event);
                                }
                            });
                        } else if (tof(v) == 'function') {
                            this.add_event_listener(event_name, v);
                        }
                    });
                }

                var spec_reserved = ['parent', 'event_bindings', 'load_array'];
                var map_spec_reserved = get_truth_map_from_arr(spec_reserved);

                // Don't give the constraint as just the spec!
                //  It's not a good idea. Specify it separately.
                //  Spec can just be the data, it looks like?

                //var o_constraint = {};
                /*
                 each(spec, function(i, v) {
                 if (!map_spec_reserved[i]) {
                 //
                 o_constraint[i] = v;
                 }
                 })
                 */
                if (spec.constraint) that.constraint(spec.constraint);
                // then go through the spec, ignoring the reserved ones, and treat those items as field constraits / field constraint definitions.
                // and _parent?
                // but get(parent) could be really useful.
                // Could be very useful with controls, having this parent
                // structure.
                // Could be useful in bubbling events in controls too.

                // But not just one potential parent.
                // The data object can appear in more than one collection.
                //  Will use 'relationships', where there can be more than one 'parent'
                //  Will have things indexed for faster access.
                // what if the spec is a collection of string keys (representing fields) and string values representing the constraints?

                // parent could be reserved / ignored as a field.
                //  could check an object to see if it's a field definition type.
                //  could be a string. could be an array of the right form.
                //  Field definitions could be a bit tricky - it may actually create such a field definition object if it needs to do so.

                if (is_defined(spec.parent)) {
                    this.set('parent', spec.parent);
                }
            }



            //var that = this;

            // These events seem to get called far too much.
            //  Need to look into the add_event_listener code for dealing with serving multiple pages.


            // only add it if it has a context?

            if (this._context) {
                this.init_default_events();
            }

            //if (spec.fields) {
            //	this.fields(spec.fields);
            //}




            // Want to do this after all initialization.
            //  After the whole init sequence has finished.




            //delete this._initializing;
            this._initializing = false;
        }

        //console.log('end Data_Object init');
    },

    'init_default_events': function() {

        /*
        var that = this;
        this.add_event_listener('add', function(e) {

            if (tof(e) == 'collection') {
                var stack = new Error().stack;
                console.log(stack);
                throw 'The event object should not be a collection.';
            }

            var parent = that.parent();
            if (parent) {
                parent.raise_event('add', e);
                //throw 'stop';
            }

        });

        this.add_event_listener('remove', function(e) {
            var change_e = {};
            each(e, function(i, v) {
                change_e[i] = v;
            });
            change_e.event_name = 'remove';
            that.raise_event('change', change_e);

            var parent = that.parent();
            if (parent) {
                parent.raise_event('remove', e);
                //throw 'stop';
            }
        })
        */


    },

    'data_def': fp(function(a, sig) {
        if (sig == '[o]') {
            // create the new data_def constraint.


        }
    }),

    'keys': function() {
        if (Object.keys) {
            return Object.keys(this._);
        } else {
            var res = [];
            each(this._, function(i, v) {
                res.push(i);
            });
            return res;
        }
    },

    'stringify': function() {
        var res = [];
        res.push('Data_Object(' + stringify(this._) + ')');
        return res.join('');
    },

    'toObject': function() {
        // need to go through each of them...
        var res = {};

        //console.log('this._ ' + stringify(this._));

        each(this._, function(i, v) {
            if (v.toObject) {
                //console.log('tof v ' + tof(v));
                res[i] = v.toObject();
            } else {
                res[i] = v;
            }
        })

        return res;
        //return this._;
    },

    // using_fields_connection()
    //  will search up the object heirachy, to see if the Data_Objects fields need to be connected through the use of functions.
    //  that will make the fields easy to change by calling a function. Should make things much faster to access than when programming with Backbone.
    // then will connect the fields with connect_fields()

    'using_fields_connection': function() {
        var res = false;
        iterate_ancestor_classes(this.constructor, function(a_class, stop) {
            if (is_defined(a_class._connect_fields)) {
                res = a_class._connect_fields;
                stop();
            }
        })
        return res;

    },

    'connect_fields': fp(function(a, sig) {
        //console.log('');
        //console.log('connect_fields sig' + sig);
        //console.log('a ' + stringify(a));

        var that = this;
        //throw '8) stop';

        if (a.l == 1 && tof(a[0]) == 'array') {
            var arr_fields = a[0];
            each(a[0], function(i, v) {
                that.connect_fields(v);
            });
        }

        if (sig == '[s]') {
            // connect that field by name
            // create the function

            // connect a singular field.

            /*
            this[a[0]] = fp(function(a2, sig) {

                //console.log('sig ' + sig);
                if (a2.l == 1) {
                    return that.set(a[0], a2[0]);
                } else if (a2.l == 0) {
                    return that.get(a[0]);
                }
            });
            */

            this[a[0]] = function(a1) {

                if (typeof a1 == 'undefined') {
                    // 0 params
                    return that.get(a[0]);
                } else {
                    // 1 param

                    return that.set(a[0], a1);
                }

                //console.log('sig ' + sig);
                //if (a2.l == 1) {
                //	return that.set(a[0], a2[0]);
                //} else if (a2.l == 0) {
                //	return that.get(a[0]);
                //}
            };



        }

        if (sig == '[o]') {

            throw('16) stop');
        }

    }),

    // does this get overwritten?

    // Various items need to have their parents set properly when starting.

    // fp working?

    // Duck type collection detect -- __type == 'collection'

    // Don't have the array of parents.

    // One parent and one index for the moment. That's what DOM nodes need.

    //'parent': fp(function(a, sig) {
    'parent': function() {
	      var a = arguments;
	      a.l = arguments.length;
	      var sig = get_a_sig(arguments, 1);
        var obj, index;
        //console.log('parent sig', sig);

				// And _parent should be set automatically when the controls are put in place.

        if (a.l == 0) {
					//console.log('this._parent', this._parent);
            return this._parent;
        }
        if (a.l == 1) {
            obj = a[0];

            if (!this._context && obj._context) {
                this._context = obj._context;
            }

            // IDs will only work within the context.



            // Another way of expressing this?

            // Can have a single parent, or multiple parents.
            //  May want something to be the only parent. Could have a different mode for multiple parents.

            //  this._parent = obj?


            //console.log('parent obj_id ' + obj_id);
            //throw 'stop'
            //console.log('obj ' + stringify(obj));
            // should maybe rename or subdivide _relationships.
            //  it will also be useful for databases.
            //  however, would need to work with the constraint system.
            //   likely that they would be syncronised through code.

            var relate_by_id = function(that) {
                var obj_id = obj._id();
                that._relationships[obj_id] = true;
            }

            var relate_by_ref = function(that) {
                that._parent = obj;
            }
            relate_by_ref(this);
        }
        if (a.l == 2) {
            obj = a[0];
            index = a[1];

            if (!this._context && obj._context) {
                this._context = obj._context;
            }

            this._parent = obj;
            this._index = index;
        }

        if (is_defined(index)) {
            // I think we just set the __index property.
            //  I think a __parent property and a __index property would do the job here.
            //  Suits DOM heirachy.
            // A __relationships property could make sense for wider things, however, it would be easy (for the moment?)
            // to just have .__parent and .__index
            //


            // Not sure all Data_Objects will need contexts.
            //  It's mainly useful for Controls so far




        } else {
            // get the object's id...

            // setting the parent... the parent may have a context.





        }
    },

    /*
    'parent': function(a1, a2) {
        var ta1 = typeof a1, ta2 = typeof a2, tri, info;
        if (ta1 == 'undefined') {
            // 0 params

            // could call the simple get function here, but maybe we can have it inline and fast.
            var arr_parents = [];
            for (i in this._relationships) {
                info = this._relationships[i];
                tri = typeof info;
                if (tri == 'number') {

                } else if (tri.__type === 'collection') {
                    arr_parents.push(info);
                } else if (tri.__type === 'data_object') {
                    arr_parents.push(info);
                }
            }
            if (arr_parents.length == 1) {
                return arr_parents[0];
            } else if (arr_parents.length > 1) {
                return arr_parents;
            }

        } else if (ta2 == 'undefined') {
            // 1 param
            if (a1.__type == 'data_object') {
                if (a1._context) this._context = a1._context;
            }

        } else {
            // 2 params
            if (a1.__type == 'data_object' && typeof a2 == 'number') {
                var parent = a1;
                var p_id = parent._id();
                var position_in_array = a2;

                if (parent._context) this._context = parent._context;

                // it's the child saying it's got the attribution to the parent here

                // child knows what poisition it is within parent.

                this._parents = this._parents || {};

                this._parents[p_id] = [parent, position_in_array];
            }
        }
    },
    */

    '_fp_parent': fp(function(a, sig) {

        // Maybe detect if it's a Data_Object or Control relatively quickly here.
        //  Then perhaps call ._parent_Data_Object
        //   there would likely be some more optimized functions.

        // ._parent_get



        //console.log('parent sig ' + sig);
        //throw 'stop';
        if (a.l == 0) {
            // there could be just a single parent...
            //  if there is more they will be returned as an array.

            var arr_parents = [];

            // look at the _relationships.

            // _relationships will be used instead of .parent or ._parent
            //console.log('this._relationships ' + stringify(this._relationships));
            //console.log('this._parents ' + stringify(this._parents));

            //console.log('this ' + stringify(this));

            //var stack = new Error().stack
            //console.log(stack);
            //throw 'stop';

            // and each relationship record may indicate a parent
            //  does so with an integer, which is the index within that parent.
            //   will make for more efficient algorithms than jQuery's .index().
            var tri;
            each(this._relationships, function(relative_id, relationship_info) {
                tri = tof(relationship_info);

                console.log('relative_id ' + relative_id);

                if (tri == 'number') {
                    // Relationships will be changed and tested.

                    // it indicates a parent.
                    // perhaps we should also return the position within the parent?

                    // This needs changing / fixing.

                    throw 'Relationships system needs more work here. Had been using the map of all many objects, which has been removed for web server performance reasons.';

                    /*
                    var id_map = map_jsgui_ids;

                    if (this._context) {
                        id_map = this._context.map_objects;
                    }

                    arr_parents.push(id_map[relative_id]);
                    */


                } else {
                    //console.log('tri ' + tri);

                    if (tri == 'data_object' || tri == 'collection') {
                        arr_parents.push(relationship_info);
                    }
                    //console.log('relative_id ' + relative_id);
                    //console.log('map_jsgui_ids[relative_id] ' + map_jsgui_ids[relative_id]);
                    //throw 'stop';
                }

            });

            /*


            each(this._parents, function(i, v) {
                arr_parents.push(v);
            });
            */
            if (arr_parents.length == 1) {
                return arr_parents[0];
            } else if (arr_parents.length > 1) {
                return arr_parents;
            }

        } else {
            //if (sig == '')
            //throw '2) stop';
            // otherwise, may have been given a parent control.
            //  May make a test suite to test types and signatures.

            // the parent should be a Data_Object (which includes Control), as well as other things.
            //  I think that there will be a lot of power and flexibility in controls when they get used again using the Data_Object underpinnings.
            // It will also be possible to make much more condensed versions of the framework.
            //

            // Parents needs a significant amount more work...
            //  But needs to store the positions within parents.

            // set the parent - but may also need to know the position of the child.

            if (sig == '[D]') {
                var parent = a[0];

                //console.log('[D] parent io Data_Object ' + (parent instanceof Data_Object));
                //console.log('[D] parent io Collection ' + (parent instanceof Collection));

                if (parent._context) this._context = parent._context;

                // maybe better to just use ._parent.

                var use_parent_id = function() {


                    var p_id = parent._id();

                    // This could return the position within that parent?

                    // It may not have its position set - because if the parent is a Data_Object, then it does not have positions as such.
                    var tp = tof(parent);

                    if (tp == 'data_object') {
                        //this._parents = this._parents || {};
                        // but it's position may effectively be the field name...
                        //  may be worth having that.


                        //this._parents[p_id] = parent;

                        this._relationships = this._relationships || {};

                        this._relationships[p_id] = parent;

                    }

                    if (tp == 'collection') {
                        throw 'Required: position in array of item';
                    }

                }

                // an array of parents?
                //  or just set the parent? Multiple parents would help (in theory).
                var use_parent_ref = function() {
                    // will work on parent later on.


                }





            }

            // could be a collection and a number...

            if (sig == '[D,n]') {
                var parent = a[0];
                var p_id = parent._id();
                var position_in_array = a[1];

                if (parent._context) this._context = parent._context;

                // it's the child saying it's got the attribution to the parent here

                // child knows what poisition it is within parent.

                this._parents = this._parents || {};

                this._parents[p_id] = [parent, position_in_array];

                // parent keeps a list of all children?
                // parent can have children in different places, in different other collections.

                //console.log('position_in_array ' + position_in_array);

                //parent.children.


            }

            /*

            if (a.l == 1) {

                //console.log('sig ' + sig);
                //throw 'stop';

                // the signature could be D, a Data_Object.




                console.log('p_id ' + p_id);

                // parents dict of objects... not sure about using an actual collection here.
                //  could get too complicated unnecessarily.
                // Could try it later when data structures are more finished.

                this._parents = this._parents || {};

                this._parents[p_id] = parent;


            }
            */

        }
    }),

    '_id': function() {
        // gets the id.
        //console.log('Data_Object _id this._context ' + this._context);

        // Should get the context at an early stage if possible.
        //  Need to have it as the item is added, I think.
        if (this.__id) return this.__id;

        if (this._context) {
            //console.log('this.__type ' + this.__type);

            // __type will be control?
            // __data_type as control.
            //  that's the overriding type, there are a few of them
            // __type could be the more specific type such as radio_button.

            //console.log('this._context.new_id ' + this._context.new_id);

            this.__id = this._context.new_id(this.__type_name || this.__type);

            //console.log('__id ' + this.__id);
            //throw '!stop';
        } else {
            if (this._abstract) {
                return undefined;
            } else if (!is_defined(this.__id)) {

                // What does not have the abstract?

                //var stack = new Error().stack;
                //console.log(stack);

                // no such function... but there should be something declared in many situations.

                throw 'stop, currently unsupported.';
                this.__id = new_data_object_id();

                console.log('!!! no context __id ' + this.__id);
            }
        }
        return this.__id;
    },

    'fields': fp(function(a, sig) {

        //.fields() may be better suited to getting info about the fields, rather than all of the fields' info.
        //  Making the APIs return relatively simple data is a step to take.
        //  Keeping the functionality but simplifying the APIs.
        //   Sometimes more complicated API calles will be made, but they will take more parameters that shows the coder expects to get
        //   more complicated results back.




        // field names
        // field names and values
        // field names and types
        // field names, types and values

        // I think field names and types is a neat amount of data that will help with debugging.
        //  Can it return an object which has a .values() function?

        //  Check in the fields collection, for the fields' metadata, or could check the fields definition?
        //  Want to be able to tell what Control Fields a Control has, for example.
        // It would be good to have simply named functions return data that's not all that complicated and can be debugged easily, where possible.

        // Can have a different mechanism for getting all fields' values.

        // Also, getting the field objects themselves, they have associated constraints.








        // an easier interface to the fields than fields and constraints.
        //  this may be immutable when it is held in a collection - not sure.
        //  may not want to keep creating new copies of field sets and constraints for use in individual Data_Objects.

        // The individual Data_Objects will need to have their own constraints, to begin with.

        // we may have been given the chained fields here.
        //


        //console.log('***** fields sig ' + sig);

        // Should have had fields set already.
        //  The Data_Object constructor should find out what fields are part of it.
        //  Not sure how easy that is to do from that level... there needs to be a way.

        //

        var that = this;

        if (a.l == 0) {

            // Will be keeping track of the fields internally.
            //  They get stored in an array, so that the order gets maintained.

            /*

            //console.log('fields this._map_field_constraints ' + stringify(this._map_field_constraints));

            var res = [];

            each(this._map_field_constraints, function(field_name, v) {
                //console.log('field_name ' + field_name);
                //console.log('v ' + stringify(v));

                // then for each constraint, get an info object from it.
                // v.to_obj_info
                // v.to_info_obj

                each(v, function(i2, constraint_for_field) {

                    // May also be saying it's a primary key field
                    //  Need more work on setting fields


                    if (constraint_for_field instanceof Constraint.Field_Data_Type) {
                        var field_constraint_info_obj = constraint_for_field.to_info_obj();
                        //console.log('field_constraint_info_obj ' + stringify(field_constraint_info_obj));

                        // find out if the field is read-only.

                        var flags = [];
                        if (that._map_read_only && that._map_read_only[field_name]) {
                            flags.push('read_only');
                        }
                        if (flags.length == 0) {
                            res.push([field_name, field_constraint_info_obj]);
                        } else {
                            res.push([field_name, field_constraint_info_obj, flags]);
                        }
                    }
                });
            });

            return res;
            */

            // an index of the position of a field within the array? Would that be useful?
            //  means some encapsulation may be worthwhile here

            // have a look at the fc (fields_collection)

            var fields_collection = this.fc;
            //console.log('fields_collection ' + fields_collection);

            // not just the field values.
            var res;


            if (fields_collection) {
                res = fields_collection.okvs.values();
            } else {
                res = [];
            }

            return res;


            //return this._arr_fields || [];
            // can get a position map relatively quickly from the array of fields.
            //  can be done after any adjustment on the fields is done.
            // this._field_positions_by_name
            //  or a linked list of fields? That could work for preserving order, iterating, insertion, deletion,


        }

        if (sig == '[s]') {
            // get a single field.

            // get the field from the field_collection.

            var fc = this.fc;
            //console.log('** fc ' + fc);
            var res = fc.get(a[0]);
            //console.log('res ' + stringify(res));
            return res;

        }

        //var that = this;
        if (sig == '[o]') {
            // when giving it the chained fields, need to process them right.
            //  may be best to clone them.

            //console.log('a[0] ' + stringify(a[0]));

            // better to ensure the fields in order...

            //  can set each field individually.

            // Setting a field with a value...
            //  The field type could be a bit more complex.
            //  Need to be careful about using JSON or JS object input to set a field - it may need to be instantiated from that input.





            each(a[0], function(i, v) {
                //console.log('i ' + stringify(i));
                //console.log('v ' + stringify(v));

                // it's using the new set_field in Collection.
                that.set_field(i, v);
                // for setting an existing field...
                //  see if the field exists (search the fields object or other lookup)
                //   if it exists, modify the existing one - complicated when other things depend on this.
                //    the constraints and indexes will also depend on the fields, so a modification in a field can result in the removal of a constraint or index.
                //     removal of a field could necessitate the removal of a constraint or index.
                //      remove_constraints_for_field
                //      remove_indexes_for_field

                // Don't want to remove multi-field constraints when replacing one field - but do want that when properly removing a field.
                //  I guess this will just take a bit more coding and testing to get the desired behaviors.
                // Really want to be using fields as a convenitent interface for constraints.
                //  They will encompass a few things involving them.
            }, that);
        }

    }),

    'constraints': fp(function(a, sig) {
        // or constraints... if given multiple ones.
        //   I think constraints may be the better name here.
        //   Will accept the singular as well.





        //console.log('Data_Object constraint sig ' + sig);

        // was 'fields'

        // as constraints, a Data_Object can also be a Collection, so these will need to apply to collections as well.

        // collections won't have fields though, so Field_Constraints won't apply to them, and collections won't accept them as constraints.


        // field constraints...

        // may be given the field constraints

        if (a.l == 0) {

            // want to get all the constraints.


        }

        // Field rather than column.


        // Collections will have other sorts of constraints, such as table constraints.
        //  Nice to be able to have collections have constraints defined in terms of other collections.


        // Foreign_Key_Constraint is a table constraint
        // Unique is as well... it does not check individual fields, depends on the whole table.
        //  Fine to ingore the fact that SQL can recognise them as column constraints here, we are not dealing with columns,
        //  but fields. Fields won't say they are constrained to unique values... collections will say they constrain fields to unique values.
        //   Would be more memory efficient.


        // the signature... could be a field_constraint?
        // could be a collection_constraint?
        //  that may be worth putting into the signatures, with fc and cc
        //   or FC and CC
        // that's how they get brought into the system at quite a low level, with the flexibility making the code clearer here.


        // function wanted to get and set the fields as well...

        /// it looks like there are field constraints in use here.
        //  the fields will be an object / array with the fields.



        if (sig == '[o]') {
            // setting the field constraints.

            // May have a closer look at those objects.

            // overwrite existing ones.
            var field_constraints = a[0];
            this._field_constraints = field_constraints;


            // does it match the current field constraints?
            //  if not, throw an error.



        }


        // string, ?
        //  it would try to process the ? as a field_constraint for that field
        //  if it already is a field_constraint, then great
        //  if it is an array or a string (possibly other object) it will parse / interpret that as a field_constraint object

        // Making the system of specifying constraints easy, while still providing the full database-like model,
        //  is an interesting challenge. It should make for a nice tool on the front-end that can create code that gets transformed
        //  into the DB code and allows access to it without too much difficulty.

        // This system, in JavaScript, will be able to bind to databases relatively easily.
        //  Should provide the coder with easy access to data in various databases.
        //  This whole constraints and data types system will have wide application to a lot of data available on the internet,
        //   and will be useful for publishing data too.

        // Looking forward to making a resources system that makes it relatively easy to access data that is stored somewhere with an easy API.
        //  May be interesting to open-source some of this technology. May be best to open-source all of it?
        //  I think open sourcing a precise, fairly compact build of it would be nice.
        //   Worth thinking in terms of possible extensions.

        // The system to do with finding and defining metadata, and matching that with data scraped from websites or from web resources...
        //  Not sure about open sourcing some of the core indexing stuff quite yet. Possibly in the future.

        // But my website could make metadata available.
        //  There could be some open-sourced code to do with the core things, I'm sure.

        // Perhaps connecting to various resources.
        //  Hosting data perhaps, identifying it to the index.

        // Perhaps people running hosting software I have written will connect to the central system, also could use the Resources system
        //  to obtain data from elsewhere for their own use, while publishing it with MetaBench indexing systems, APIs and semantics.


        if (a.l == 2 && tof(a[0]) == 'string') {




        }



        // may be returning the field constraints



    }),

    'matches_field_constraint': fp(function(a, sig) {
        // there may be more than one constraint for that field.

        //console.log('matches_field_constraint sig ' + sig);
        //console.log('matches_field_constraint a ' + stringify(a));


        if (sig == '[s,s]') {
            var field_name = a[0];

            // the constraint as just one item.
            //  there could be multiple fields constraints for that item.

            if (tof(a[1]) == 'string') {
                var str_constraint = a[1];

                // then use the constraint module to test these.

                var field_val = this.get(field_name);
                return obj_matches_constraint(field_val, str_constraint);
            }

            if (tof(a[1]) == 'array') {
                throw 'Multiple constraints not yet implemented here';
            }



        }

        //throw('stop')

        // given as string


        //


    }),

    'obj_matches_field_constraints': function(obj) {
        //console.log('matches_field_constraints ');
        var that = this;
        // iterate through the field constraints
        var matches = true;

        // don't check it against the _field_constraints?
        //  get the_field_constraints?
        //  have the .fc (field collection) interacting with the field constraints?
        //   have the fields_collection system store the field constraints?
        //  possibly not, because some constraints will be outside of individual fields.

        // perhaps have _unique_constraints_collection / index that keeps track of the unique constraints.

        // they are different to the field constraints. for the moment they can just be an index.
        //  could maybe have them like flags.

        //  they can be added, removed, they will be indexed for sat retrieval and checking.

        // indexes... another index index? these indicate how things get indexed within the collection, rather than being the indexes themselves.

        // field_index_schema?
        //






        each(this._field_constraints, function(i, v) {
            // does it match?

            matches = matches && obj.matches_field_constraint(i, v)

        })
        return matches;
        //throw('stop');

    },

    // Maybe fields and field constraint heavy lifting should be done elsewhere?
    //  But Data_Object will be right in the core really.

    // I doubt the core will be all that large in terms of file size.
    //  A lot of size savings will be made, and it will be very small and efficient compared to many other systems.
    //  Combining different things into one file would be another days work.

    // I could also do some more work on building up the JavaScript code and evaluating it.
    //  That could save a lot of space with an efficient compression mechanism.


    // Setting a whole bunch of fields, or even a field, may be better done in a collection, because some of the field has to do with how a collection handles it...
    //  indexing it,


    /*
    'fields': fp(function(a, sig) {
        if (sig == '[o]') {
            // overwrite all fields.

            // will use the set_field to set the individual fields?

        }

        //console.log('Collection fields sig ' + sig);


    }),
    */
    // The field constraints, and data_type system is getting quite large and a bit fragmented.
    //  Hopefully it will be closer integrated into the core, and tested with some relatively simple examples to show that it works
    //  and what results to expect.

    // The constraints about what objects can be will go a long way towards the goal of specifiying things in JavaScript that
    //  will work on many systems eventually. These mechanisms will be useful in GUIs, so it will help that they are built into the core of the framework.

    // At the moment I am putting quite a lot in, having spent some time considering what will be needed next.
    //  A later stage will be refactoring things. That may come when it is running in a browser and I see how much it is using.
    //  It may be done after some more code analysys, perhaps enabled by JavaScript parsing and storing the code on the system ready for use
    //   and analysis

    // set_field for the Data_Object... the field is a constraint to do with the type, it could also be that an index is set up for that field.

    //  want read-only fields to operate on the class level as well.
    //  I think the map is useful, I'm not so sure that they are constraints anyway.
    //  Field properties... then can have a field property map or field property index.


    'read_only': arrayify(fp(function(a, sig) {
        var mro = this._map_read_only = this._map_read_only || {};

        var field_name = a[0];

        if (sig == '[s]') {
            // a field name to make read-only
            mro[field_name] = true;
        }
        if (sig == '[s,b]') {
            // a field name to make read-only, boolean value can be false

            var bool_is_read_only = a[1];
            if (bool_is_read_only) {
                return this.read_only(field_name);
            } else {
                //delete mro[field_name];
                mro[field_name] = null;
            }
        }
        // array... process them?
        //  could arrayify the whole function.
    })),

    'set_field': fp(function(a, sig) {

        // This will be overhauled...
        //   It will need to efficiently see if an existing field is there.

        // If it is there, it will update the field. That may then mean that constraints need to get updated as well..
        //  would mean removing some existing ones perhaps?
        // But it would check what constraints are then needed for that field and remove the extraneous ones.
        //  Same with single-field indexes.

        // When adding the field, would also need to update the constraints.
        //  Could have the constraint system respond to field changes, maybe be the first listener.
        //   using this.ensure_field_constraint(field_name, field_info);?


        this.fc = this.fc || new Fields_Collection();

        return this.fc.set.apply(this.fc, a);

        // although it has been added, we need to set the parent...
        //  maybe fc can do this?

        //console.log('set_field sig ' + sig);
        //console.log('set_field a ' + stringify(a));

        // [s,[f]]
        //  data type is defined by a constructor within an array
        //   means a collection of that type.

        // sets a data type constraint on that field
        /*
        if (sig == '[s,[f]]') {

            throw '10) Stop';
        }
        */
        // Collection has something that overrides this.
        /*
        if (sig == '[s,s]') {
            // will need to interpret the second part
            var field_name = a[0];
            var field_text = a[1];

            //console.log('field_text ' + field_text);
            // parse the fiex text. it may have some things to do with constraints that apply to the collection, if it is in a collection.
            //  not so sure about saving these here. They could be saved so that they get put into a collection fine with other unique fields...
            // but then we'll be taking more care specifying things in the collection if necessary.

            var field_info = input_processors['field_text'](field_text);

            //console.log('field_info ' + stringify(field_info));

            // then ensure the constraint(s) corresponding to the field, where possible.
            //  not able to put uniqueness constraint in place here, yet. It's really dealt with and enforced by the Collection class.

            // I think the library core is getting pretty big now, it could still do with more for HTML, CSS processing.
            //  The database side of things will be expanded, it will be good to have code using very nice syntax provided by the library.

            this.ensure_field_constraint(field_name, field_info);

            if (field_info.read_only) {
                this.read_only(field_name);
            }

            // Just need to do quite a lot more...
            //  Quite a bit more needed for the objects to work like they should, then I'll be using those objects for the HTML components, and also for the
            //  database layer.

            // Persisting to that DB layer seems like a really useful stage, not sure about open-sourcing that code.
            //  May be best to... may be better that my ORM is used. I'd still have the powerful web app too?
            //   Could have different licensing for that component... commercial deployments cost money?
            //    But then want to have things distributed nice and easily. Perhaps could have different options for this. With the website running out-of-the-box,
            //     could directly go to the Mongo layer.
            // Would be very nice to have open-source code producing everything that's needed. Could get quite a lot of interest.
            //  Maybe will keep that on my server for the moment, or in the client-side applications people use.
            // Will be fine without OSing all the ORM, but a relatively simple Mongo layer would work fine.
            //  It may be more what people want, and would get developer interest. The ORM would be useful for accessing legacy systems? SQL can be very useful in its
            //   own right, but could be harder to use effectively in this case.


            // does it have the not_null constraint?
            //  each field can have more than one constraint.
            //  not sure about a collection of constraints though.
            //   perhaps a simpler collection would be very useful in implementing some of the more advanced things.
            //  array of constraints for each field will do for the moment.

            // can be both a Not_Null constraint and a data type constrint.
            // easy then to create the field with this information.

            //  find out if there is an existing field (constraint).
            //  find out about existing indexes for that field, create one if needed
            //  find out about existing constraints, such as not_null
            //   perhaps not_null can be a value constraint - but it's something that translates readily into the database system.

            // this will be for setting single field indexes.

            // Other indexes could be defined with multiple fields.

            // Will be useful for iterating through a collection, getting the values that match two given values.

        }
        */

    }),


    // unique, not_null being the field constraints in action.

    //  unique could apply to multiple fields at once. Would need the index with those two fields looking for collisions.

    // constraints: {
    //	'unique': ['school_district', 'district_school_id']
    //}

    // will also try to get a field constraint, based on the field.
    //  but may also do it based on type, maybe get_field_data_type_constraint

    'set_field_data_type_constraint': function(field_name, data_type_constructor) {
        // these dtcs are separate to the fields themselves.

        // May be better using the Field_Collection here.

        var fmc = this._map_field_constraints = this._map_field_constraints || {};
        var fmfc = fmc[field_name];
        if (fmfc) {
            var deletion_index;
            each(fmfc, function(i, v) {
                // if it is a Field_Data_Type_Constraint
                if (v instanceof Constraint.Field_Data_Type) {
                    //return v;
                    //
                    if (v.data_type_constructor === data_type_constructor) {

                    } else {
                        // replace that one.
                        deletion_index = i;
                    }
                }
            })

            if (is_defined(deletion_index)) {
                fmfc.splice(deletion_index, 1);

                // create the new constraint object.
            }
        }
    },

    'get_field_data_type_constraint': function(field_name) {
        var fmc = this._map_field_constraints;
        // field_constraints - they are constraints that apply to the fields. They are not the list of fields.
        var result = undefined;
        //
        if (fmc) {
            var fmfc = fmc[field_name];
            if (fmfc) {
                each(fmfc, function (i, v) {
                    // if it is a Field_Data_Type_Constraint
                    if (v instanceof Constraint.Field_Data_Type) {
                        result = v;
                        return v;
                    }
                });
            }
        }
        return result;
    },


    //

    // ensure_constraint_from_field
    // ensure_constraints_from_field
    //  can have a not null constraint, can have a data type constraint.
    //  can be given the whole [field_name, [str_field, obj_field_info]]
    // possibly not_null constraint would be part of data type constraint?
    //  easier to have separate not null constraint.

    // once we have the field, there are some possible constraints.
    //  could have them indexed... an obj saying not_null, with link to constraint if it is there.
    //  _map_field_constraints...
    //  _map_field_constraints[field_name][constraint_type_name]
    //  _map_field_constraints[field_name]['multi_field']
    //   and then there is a list of all the constraints that have got the field mentioned...

    // some of these things could be done with a quick search.


    //   when we have the field name, we can refer to all its constraints from this.

    // and then there should be the (KVS) map of unique constraints ordered by alphabetic fields...
    //  also storing when a field is mentioned in a constraint, but it's not the only field?
    //   when deleting a field we'll need to get all constraints that a field is involved in.

    //



    //  can also be given [field_name, str_field], can calculate the constraint object.
    //   may at times be given the obj_field_info and need to make the text representation



    'ensure_field_constraint': fp(function(a, sig) {

        // this would also have to interact with the field object if necessary, keeping things in sync.

        // will have different field_constraint maps.
        // or a map of the fields to the constriaint types.
        //


        // (fc_map[field_name]['unique'])
        // fc_map[field_name]['data_type']
        // fc_map[field_name]['not_null']



        //  ensures a single constraint?
        // [s,s] can parse the field text

        if (sig == '[s,o]') {
            var field_name = a[0];
            var field_info = a[1];

            // Different constraints that can apply to the field... but likely to be a data_type constraint really.



            // can ensure not null and data type

            // OK... looks like the field_constraints will need to be organized somehow.
            //  They are another thing that perhaps a simple indexing system would help with.
            // Will be organizing them using the native JavaScript objects.

            // Having an array of field_constraints makes sense, so that the order is maintained.

            // array of field constraints.
            // map of field constraints.

            //this._arr_field_constraints = this._arr_field_constraints || [];

            //  not so sure about this array of constraints again.
            //  perhaps only keeping them in the map is enough.

            // field constraints_by_field
            // _map_field_constraints... this will hold the constraints by field.
            //  there may not be more than one constraint for a particular field, there may be a map of such constraints.

            // so it's organized by field here... easier to get the existing field constraints, overwrite them, or create a new one,
            //  or to look it up.

            //console.log('field_info ' + stringify(field_info));
            //console.log('a ' + stringify(a));

            // Will _map_field_constraints be in the Field_Collection?

            this._map_field_constraints = this._map_field_constraints || {};
            this._map_field_constraints[field_name] = this._map_field_constraints[field_name] || [];
            // don't want an array of constraints there...
            //  there are not many constraints that can be there, such as data_type, not_null

            // The constraints only apply to fields individually
            //  There can be collection constraints that apply, they can be specified, and they get applied to the relevant collection.




            var fc_item_arr = this._map_field_constraints[field_name];
            // Have the fields referencing their constraints.
            //  Also have a map / sorted KVS of constraints by the fields they are for, different ways they need to be looked up
            //   alhabetically sorted list of unique fields kept in a KVS
            //    no such thing as a unique index - only unique constraint.
            //   a single field can be unique (have a unique constraint)
            //   a unique constraint can apply to multiple fields.

            // map of fields objects by name
            //  as well as array of fields
            //   the Fields object - perhaps it should be defined as its own class.
            //    It would make sense.
            // A unique constraint does not really apply to the field, but more to the collection, with reference to the field.
            //  It's still information that should get stored alongside the field.


            // looking for an existing constraint already.
            //  the whole sytem can be improved.
            // I think having an actual ._fields object would help.
            //  It would be an array (or simpler collection?)
            //   A simple collection could be quite nice if it has B+ indexing capability.
            //    But the whole thing has got a bit complicated anyway with Data_Object.
            // Just an array would do fine for the moment.
            //  Want to be sure of maintaining the order.
            //   _map_fields goes to the field by name.

            // The field will reference both indexes and constraints.
            //  Indexes and constraints will refer to particular fields, often by name.

            // Don't want complicated data types to do with fields.
            //  There is a _fields object.
            //  _arr_fields
            //  kvs_fields? it stores the fields by name in a kvs. also for multi-field constraints and indexes?

            // Doing the individual fields, and also the multiple fields when they are applied together.





            // That is a fairly major change for the data_object.
            //  Will not have the constraint map just as it is.
            //  There will be the index for multi-field constraints, but just a simple array for the fields.
            //  _map_field_constraints[field1_name][field2_name][array of constraints applying to that field combination]

            // I think the B+ KVS will be better for storing the constraints by their fields.
            //



            var dt_info = field_info.data_type;

            var new_dt_constraint = Constraint.from_obj(dt_info);
            //console.log('new_dt_constraint ' + stringify(new_dt_constraint));

            if (!is_defined(new_dt_constraint)) {
                //throw '9) New constraint from_obj not profucing constraint';
            } else {



                var dt_constraint;
                //console.log('fc_item_arr ' + stringify(fc_item_arr));
                if (fc_item_arr.length > 0) {
                    // go through the array updating relevant constraints.
                    // really looking for the data_type constraint.

                    var dt_constraints = [];
                    //console.log('fc_item_arr ' + stringify(fc_item_arr));
                    // should only be one in there at maximum
                    each(fc_item_arr, function(i, constraint_item) {
                        //console.log('constraint_item ' + stringify(constraint_item));

                        if (constraint_item instanceof Constraint.Field_Data_Type) {
                            //console.log('constraint_item ' + stringify(constraint_item));

                            var constraint_info = constraint_item.to_info_obj();
                            //console.log('constraint_info ' + stringify(constraint_info));
                            //console.log('field_info ' + stringify(field_info));

                            var stack = new Error().stack
                            //console.log( stack )

                            throw ('6) it is! stop, check to see if it is a Field_Data_Type_Constraint, use instanceOf')


                        }



                        // I think delete any existing dt constraints?
                        //  Do nothing if the constraints match...
                        //  Will likely have events to do with adding and removing constraints.




                    })

                    // check existing constraint against values given. possibly change it, possibly replace it.




                } else {

                    fc_item_arr.push(new_dt_constraint);
                }



            }

            //throw('7) stop');



            // if there is nothing there, create it.

            // if it's there, overwrite any constraints with the relevant one from the field info we were given.



            //console.log('this._arr_field_constraints ' + stringify(this._arr_field_constraints));
            //throw('5 stop');
        }

    }),

    'matches_field_constraints': fp(function(a, sig) {
        if (a.l == 0) {
            return this.matches_field_constraints(this._field_constraints);
        }

        // comparing an object with its field constraints... that could be outside this.

        // check_field_constraints
        //  does the check and says where it fails

        // matches_field_constraints
        //  stops when it fails, returns false

        // does a Data_Object match constraints?

        // may want to check if a Data_Object that gets provided matches the field constraints stored in this Data_Object.
        //  One Data_Object can be used as reference for doing checks.
        //   The Data_Objects that get put in don't have the checks as part of them, but they may have checks done on them before they have
        //   completed updating. This could be used to indicate an error to the user in the GUI.

        // This really won't be so hard to do, and to get right.
        //  Hopefully all these things would be able to be used for various packages.
        // I think declarative writing of much of it, so that a LMS could be set up, or something for social services that
        //  deal with information about individuals, workflows, and reporting (helping produce the required documents and keep
        //  users of the system informed)

        //console.log('matches_field_constraints sig ' + sig);

        if (sig == '[D]') {
            // Does that Data_Object match the constraints of this one?

            var fcs = this._field_constraints;

            //console.log('fcs ' + stringify(fcs));

            var obj = a[0];

            var all_match = true, obj_field_value, matches;

            each(fcs, function(field_name, constraint) {
                // these constraints could potentially be something quite complicated and nested.

                // We would need to be careful about that.
                // Will use this for specifying HTML controls, being sure they are output in a standard format.

                obj_field_value = obj.get(field_name);
                //console.log('obj_field_value ' + obj_field_value);

                //console.log('constraint ' + constraint);

                matches = obj_matches_constraint(obj_field_value, constraint);

                all_match = all_match && matches;
                //if (!matches) return false;
                // returning false from the main loop?
                //  breaking out of my each loop... both these things will need to be looked into.

                // each could be used to build a result... but do want break conditions.

                //check_value_against_constraint

                // a function to check against the constraints.
                //  this is to do with things no longer to do with Data_Object, should be in lang-essentials
                //  possibly worth making an intermediate level.
                // It's going outside of the essentials, but it still is pretty important
                // Maybe have core, which includes essentials and validation, or valid_data
                //  Could have a constraints module.
                //   This would be working in a nested way, the constraints could be nested.

                // Constraints would be defined as objects.
                //  They would often be specified as text, such as 'int'.
                //  They could be specified to be an array, like [['red', 'int'], ['green', 'int'], ['blue', 'int']]
                //  Having a constraint object would help to store maps that are generated to help with that constraint.
                //  They would also act as indexes for some arrays, helping with the JavaScript implementation.

                //  valid_data may be a good name because it will potentially have some more data handling facilities, such as dealing with
                //  nested data. I may be moving functionality out of Nested and putting it somewhere simpler, maybe I'll be better able to express it
                //  with recursive functions.
                // Will be dealing with data types at different levels.
                //  Could be more systematic about maps that express positions of items in arrays.

                // I think that side of things, tidying it up a lot, will help with getting these things running correctly in a web server.


            });

            // Will be faster to break out of each loop.

            return all_match;
        }



        if (sig == '[o]') {

            // may want to test if an object matches the field constraints.

            // obejct representing the constraints...
            //  seeing if this Data_Object meets those constraints.

            // these constraints are given as a field.





            // an object representing those constraints.
            //  not using a Data_Object for this yet.

            // find out which are the current keys (get a truth map of them)

            // see if all of the current ones adhere to the given constraints

            // see if all of the given constraints have been met
            //  could have a map of the given constraints, and delete them from that map as they have been met
            //  then go through the map using each to see which ones have not been met.

            // May use some code to do with data types.
            //  With the HTML processing, will be taking in data with fewer constraints, and transforming it so it matches what is required.

            // I think there will be a fair bit more coding to get the HTML system fully running with the newer Data_Object abstraction,
            //  and data types and transformations specified in terms of the data type, meaning that the code will be more concise and declarative
            // Some quite complex things to do with indexing and data transformation get done elsewhere, for example.

            // I am expecting to get this to work fairly soon, I have made a lot of progress recently.
            // Having the code executing and producing a website will be very nice.
            //  Would be good to get a portfolio online, but very good indeed if it loads quickly, has a nice menu, and just generally is my
            //  professional / business website.

            // It does seem like a real business priority to get this site up online.
            //  It could be very useful for customers, maybe if I am doing front-end development work, can show something and get comments rapidly
            //   within my system.

            // Anyway, need to get this matching the field constraints here.

            /*
            var field_constraints = a[0];


            // check for matching a single constraint



            each(field_constraints, function(i, v) {
                console.log('field_constraints i ' + i);
                console.log('field_constraints v ' + stringify(v));

            });
            */

            return data_object_matches_field_constraints(this, a[0]);

        }


    }),


    // requires is different to accepts.

    // requirements may be needed to do something.
    // accepts is about setting data on it.
    //  could say (or assume) that the fields are required. They could be required in order to persist it to some location.
    // Perhaps only some fields are required, or their reuqirement is met when they are null or undefined.

    //  Saying a field is required is equivalent to saying it is 'not null'.
    //   Fields will possibly not meet this constraint just as the object has been created... but it may be that the object must get created with the necessary
    //   data. It will be possible, though, to have the Data_Object, not containing any data. Maybe it will be considered empty, or dataless
    //   dataless may be better as it does not imply the opposite of 'full'.




    '____requires': fp(function(a, spec) {

        // Leaving this for the moment, developing field constraints.


        // sets items in this object's schema
        //  this could set items in an item-level rather than class-level schema.
        //   there could be two schemas - the one it starts with, and those that override the default schema.
        //   That avoids copying lots of the default schema items, making controls start more quickly and will use less memory.
        //    Less reduntant information being stored.

        // base_schema (this could be set by a string name, referring to jsgui.schemas).
        // overrides_schema (object_schema may be a better name).

        // 'requires' would be setting something on the overrides_schema (or object_schema)

        // object_schema
        // object_type_schema
        // object_base_schema
        // object_schema_additions

        // base_schema
        // schema_additions
        // additional_schema
        // object_schema

        // base_schema
        // object_schema

        // types will be namespaced more
        //  there is the type system of the JavaScript code here
        //  there is an internal type system for arbitrary namespaced objects... they will follow the names of objects here.

        //



        // schemas applied to properties
        //  done so that the checking stage can see that requirments are met.

        // It may be worth putting this in a 'schema' for the object, rather than at this stage.

        // Setting schemas for sub-objects, and setting schemas for the objects themselves makes a lot of sense.
        //  Perhaps the schemas for the sub-objects should be set through the schema for the object itself.

        // this, I think, will be setting a particular item on the object_schema.
        // the object_schema could simple be a data_type_name.
        //  this will tie into jsgui.data_type_name
        // Likely to make the nested system clearer and more compact, and incorporate it into the main part.
        //  I think I'll get things running in a fairly compact way that would enable things to run really well on a mobile device.
        //   Could have significantly advanced programming around the 12KB mark, would have things really optimized, but it needs to get a bit complicated in
        //   order to implement such functionality. A lot can be done in that relatively small size, and more still can be done using that code for the mobile application.

        // Putting the requirement information into the object_schema makes sense
        //  May be similar to using a data_type_name?
        //   or schema_name?

        // schema_name may make more sense.
        // possibly also have a group / collection of schemas.
        //  not sure about collection because these schemas will be used for implementing things to do with the collection.
        //  could have an application-wide dictionary of schemas.
        //  some of these will have to do with HTML, for example.

        // It makes sense to use a schema system in various places where it is appropriate, and call it a schema.
        //  Should be compatable where possible with the object definitions and access, such as indexed_array
        //  Called the jsgui-schema standard I think.
        // I may make some separate components that work using this standard. They could be reference implementations of some things.
        //  Checking that an object's properties conform to the schema
        //   Should make it possible to easily get the schema tester to know how the object's properties are done, such as on Data_Object using get and set
        //   functions.

        // Will also be able to say something requires an object with a particular interface.
        //  Data_Objects will have an 'interfaces' property (private property)
        //   this will help them tell whether the object that is connected has the right interface(s)

        // Objects can have more than one interface.
        //  This is akin to c#. In this case, we don't care about how inheritance is done on the object (it can be done in different ways to c#), but we are saying that the object
        //  conforms to a particulat interface, ie has various properities.
        //   In some cases those properties must be set.

        // Will also be able to specify functions in interfaces (and object_schemas I think), so that it can be run through tests.

        // Interfaces: an interface is a named conformance to either a specified or named schema.

        // jsgui.data_types -> jsgui.schemas

        // These schemas will be usable in form validation, creating HTML forms, processing them, and dealing with objects in databases, perhaps with generated CRUD.
        //  They will be simple to specify.
        //  There will sometime be a GUI tool for specifying schemas.
        //   They won't be too complicated - but they could be used for describing some real-work objects.



        // tell it what to look for with that property.

        // There may be some more complicated cases.
        //  Could be referring to multiple required objects for one property name.
        //  They could be in a collection, or an array.

        // can add an object to the requirements.
        //  checks that the item is there?

        // checks that the item conforms.
        //  possibly to an object_schema.
        // the object_schema system could be used for data types elsewhere - not sure about this. It sounds OK though.

        // elsewhere, whe check if an object conforms to a set type.

        // maybe object_schema should be the same system, or the other system could change over to using an object_schema, to make things clearer.
        //  I think the object_schema abstraction would help a bit.

        // will be making use of jsgui.data_types_info

        // string and an object
        //  the string is the name of the property within this object
        //  the object is the schema for that property.



        // Requirements will be sealt with through the constraints system.
        //  Perhaps it is an assumption that it is required the constraints are satisfied.

        //  A requirements system may operate for resources... not so sure about having requirements in the Data_Object as that seems like it can be
        //   handled by fields and constraints.


        if (a.l == 0) {
            // return the requirements.

            return this._requirements;

        }



    }),


    // meets_requitements, was check_requirements?

    // meets returns a boolean, check returns a report saying where it failed.

    // A resource may require another resource to have started in order to start.
    //  Now working on the code execution path for the MetaBench hosting (expandable) server to be run.
    //  Will host the website as a Resource before long.
    //  Will also be interacting with DBs using a resource API.

    // There is quite a bit of general structure, and lots of scope for specifics to be built.
    //  Do want to get my website hosted.
    //  A few components could display things quite nicely.

    // Will have a demo section showing front-end components.
    //  May have an e-learning section

    // Mobile development
    //


    // Will use field constraints for the moment
    //  Requirements may make an appearance in resources, ie saying that a resource requires another resource (to have started) before it can start.
    '_____meets_requirements': fp(function(a, sig) {

        // Possibly check field constraints, but these would have probably been checked on input or on setting the constraints.

        var requirements = this._requirements;
        if (!requirements) {
            return true;
        } else {
            if (sig == '[s]') {
                var property_name = a[0];

                // does it meet that one requirement?

                // not sure exactly how requirements are expressed right now.
                //  I think many of those things should be written up in documentation on the system and published.

                // 'name': ['regex', rx]

                // could check for different data types as well
                //  could check that something has a particular status, either function result or its own object.


                // How much of this is in 'nested'?
                //  How much of nested should be brought to the core?

            }
        }

    }),


    // although this is not a collection, it is similar to a normal JS dict / object.
    //  would be good to iterate over all the items of data in this.

    'each': function(callback) {
        // could use for i in...


        /*
        each(this._, function(i, v) {
            callback(i, v);
        });
        */

        // Could have inline code here for speed?
        each(this._, callback);


    },


    // could make this polymorphic so that it
    'position_within': function(parent) {
        var p_id = parent._id();
        //console.log('p_id ' + p_id);
        //console.log('this._parents ' + stringify(this._parents));

        if (this._parents && is_defined(this._parents[p_id])) {
            var parent_rel_info = this._parents[p_id];
            //console.log('parent_rel_info ' + stringify(parent_rel_info));

            //var parents = this._parents;
            //if (parents) {
            //
            //}
            var pos_within = parent_rel_info[1];

            // It is indexed by position in parent through the parent.

            return pos_within;

        }


    },

    // Maybe just 'remove' function.
    //  This may be needed with multiple parents, which are not being used at the moment.

    'remove_from': function(parent) {
        var p_id = parent._id();

        if (this._parents && is_defined(this._parents[p_id])) {

            var parent = this._parents[p_id][0];
            var pos_within = this._parents[p_id][1];

            // is the position within accurate?
            var item = parent._arr[pos_within];
            //console.log('item ' + stringify(item));


            //console.log('');
            //console.log('pos_within ' + pos_within);
            // Then remove the item in the collection (or Data_Object?) ....
            // and the actual parent?

            // can get control / dataobject / collection by its ID of course.

            parent.remove(pos_within);

            // Remove it by index.

            delete this._parents[p_id];



        }

    },

    // Will just deal with constraints for the moment.
    //  I'll probably make it so that resources have requirements.



    // Requirements may be more general and flexible than field constraints.
    //  Requirements could be that another component has initialized.


    '_____check_requirements': fp(function(a, sig) {
        // tell it what to look for with that property.

        if (a.l == 0) {
            // then check all of the requirements
            // returns true if successful, otherwise details of where it fails.

            // could maybe lead to a truth(x) function that checks if x === true, rather than is an object that could be giving details of something being false.
        }

        if (sig == '[s]') {
            // then check that one property
            var property_name = a[0];
        }

        if (a.l == 1 && a[0] === true) {
            // that means it's recursive.
            //  we'll be checking the requirements of this, and of any required objects.



        }


    }),

    // will be able to use the DataObject's class_name for get and
    // set.
    // maybe just type_name?
    // Could have a type name heirachy. So that if it does not find
    // get/set methods for div, it uses the ones for control.

    /*
     * 'property_ensure': function(property_name, value) { // like
     * set, but does not overwrite it.
     *
     *
     * var al = this._alias[property_name]; //console.log('al ' +
     * al); if (al) { property_name = al; }
     *
     * //var s3_name = property_name.split('.'); var pos1 =
     * property_name.indexOf('.'); // or call set
     *
     * if (pos1 == -1) { // if (tof(this._[property_name]) ==
     * 'undefined') { this._[property_name] = value; }
     *  } else { // it separates them into sub-properties. // should
     * use the set procedure for the subproperties.
     *  // and the event will say which subproperty has changed.
     * set(this, property_name, value);
     *
     *  }
     *  }
     */

    // Removing events won't work well when there are vary many.
    // Perhaps multiple listeners could be removed relatively
    // quickly.
    // Also, what about event delegation to another object?
    // Something could have an event_parent.
    // Gets told about events.
    // And that will have the event handler
    // Saves attaching so many event handlers.
    // Event propagates / bubbles.
    // Could even have just a 'parent' data object that receives
    // this information about events?
    // May do other things though.
    // Could even have the parent eventl listeners listen for the
    // actual events?
    // Not then throw them in the same way.
    // HTML surfaces will be listening for the events of delegated
    // objects through the HTML event delegation mechanic.
    // So even with no listeners set up, it will tell a delegation
    // parent.
    // Or event parent.
    // Will leave defining the event bubbling here.

    // Backbone does not seem to have this event bubbling mechanism.
    // Seems to be about receiving all events for a page.
    // Quite possibly should have a Data_Object Event class.
    // This will know the target, maybe other things.
    // DO NEED TO keep track of the target when sending these events
    // through a chain.
    // Target is assumed to be this when calling it with 2
    // parameters

    // Events getting raised on too many items when there are objects within different page contexts.

    // Want objects in more independent contexts.



    'load_from_spec': function(spec, arr_item_names) {
        var that = this;
        each(arr_item_names, function(i, v) {
            var spec_item = spec[v];
            if (is_defined(spec_item)) {
                that['set'](v, spec_item);
            }
        });
    },

    'mod_link': function() {
        return jsgui;
    },

    // Could use less polymorphism and recursion here.
    //  Could maybe iterate structure with a while loop.

    'value': function() {
        var res = {};
        this.each(function(i, v) {
            if (typeof v.value == 'function') {
                res[i] = v.value();
            } else {
                res[i] = v;
            }

        });
        return res;
    },

    // Much of the time enhanced_data_object will be used.
    // get() returns the object - will make the object out of field values / just return _.

    // Asyncronous nested get gets tricky - especially when some of the calls to get objects
    //  are asyncronous and some are not. However, need to process the list of property names
    //  asyncronously where necessary.

    // Maybe will do that outside of data-object though.
    //  The non-async get is fairly complicated already.
    //  It may be possible to make a new get function for Resource that makes use of the get function
    //   of data-object.
    //  However, a data-object would need to be able to interact with this...
    //   So I think that data-object needs this capability too.
    //   I think that asyncronous nested get will be a really useful capability to have,
    //   but it won't be so easy to implement.
    //    Need to be methodical about it.
    //  Running through nested get examples and tests would make a lot of sense.
    //  I think making some smaller jsgui test cases would also be very useful.

    // Would it be possible to make some simple resources that take a while to return a simple result, (1s maybe)?
    //  Then they could be in a chain / sequence so that the async get can be tested to work.

    // Perhaps only Resources have an async get() at their own level, getting their own information.

    // get - a word used because JS did not have getters and setters, getting from a local variable
    //       a word used to signify getting from a more remote location, like from disk or over a network
    //                              calculation

    // Making a very flexible get function would be a very useful thing to do. It will cover the various meanings,
    //  dealing with locally stored data as well as remote.

    // Within a Data_Object, it will be getting Data_Object properties syncronously, but when it encounters a Resource,
    //  it may need to get that asyncronously.

    // How about:
    //  If Data_Object get was called asynchronously, it can call async get functions from resources, and continues
    //   through the chain calling asynchronously.
    //  It fails if it tries to make a syncronous call on a Resource.
    //   Integrating promises would be nice, but it's a new style of programming that makes that part
    //    more complicated when used in conjunction with other pieces of coding that I'm also working on.


    // I think the non asyncronous get can be simplified.
    //  It seems like it is definitely worth getting unit testing done.



    'get': fp(function(a, sig) {

        // 17/06/2014 - Nested intrinsic properties.
        //  Need to access object[propertyName], not just object._[propertyName]
        //   However, may want to say some names of properties are never intrinsic.


        // Could have more managable (for the compiler) functions.

        // but when nested is in place, is it still working right?
        // also will have to deal with particular output formats.
        //  many controls / data types for the moment will have default output as HTML formatted.
        //console.log('Data_Object get this.__type_name ' + this.__type_name);
        //console.log('Data_Object get sig ' + sig);
        //console.log('* get a ' + stringify(a));
        // will also be looking at the output processors.
        if (is_defined(this.__type_name)) {
            // should possibly have this assigned for controls...
            //var raw_input = a;
            //console.log('this.__type_name is defined: ' + this.__type_name);

            //var parsed_input_obj = jsgui.input_processors[this.__type_name](raw_input);
            if (a.l == 0) {
                var output_obj = jsgui.output_processors[this.__type_name](this._);
                return output_obj;
            } else {
                throw 'not yet implemented';
            }
        } else {

            if (sig == '[s,f]') {

                // however, it is more complicated than that.
                //  maybe put this in resource level?

                // Though, collections and data-objects handling async operations well would be an advantage.
                //  This may intersperse with the resources, could perhaps have the resource return a promise
                //  (function?) if it had to operate asyncronously.

                // Go through the system with async calls?
                //  May not be all that hard to do...

                // I think this may need more work...
                //  Keep continuing through the chain, using async chaining.
                throw 'Asyncronous access not allowed on Data_Object get.'


                var res = this.get(a[0]);
                var callback = a[1];

                if (typeof res == 'function') {
                    res(callback);
                } else {
                    return res;
                }



                // could check if we had a function returned.
                //  then we execute that function


                //callback(null, res);
            }

            // check to see if there is a field defined.
            if (sig == '[s]') {
                //console.log('get param: ' + a[0]);
                var fc = this.fc;

                // let's have a look at the fields

                // Don't try to stringify field collections (yet).

                //console.log('fc.get() ' + stringify(fc.get()));



                var field_name = a[0];
                // could have .s in it, making it nested, and have removed nested from here.
                //console.log('pre fc get');
                var field;
                if (fc) {
                    field = fc.get(a[0]);
                }


                //throw 'stop';

                // being told to get 'dom.attributes.class'.
                //console.log('field ' + field);
                // should be able to get 'dom' field first.

                // so if it is multi-level, we can have a function that processes this multi-level request.

                //console.log('field_name ' + field_name);

                if (field_name.indexOf('.') > -1) {
                    // Then we are dealing with a request for a nested object.
                    // Split up the field_name into the various field names for the levels, then have a recursive function here
                    //  process through the levels. Will keep the recursive part small in size and located here.
                    // May not need to even be recursive.

                    var arr_field_names = field_name.split('.');

                    var level = 0, l = arr_field_names.length;
                    var current_obj = this, new_obj, fname;
                    while(level < l) {
                        fname = arr_field_names[level];
                        if (!current_obj) {
                            return undefined;
                        }

                        // OK, but we may be dealing asyncronously now. If the current object is a function,
                        // it gets called and we use the callback to do its stuff.

                        // I think this branch should only handle synchronous chaining.
                        /*
                        if (typeof current_obj == 'function') {
                            // the gotten info is there I hope
                            // This totally would not work in a while loop I think.
                            //  Maybe would need to split up the getting, and ending the while loop.
                            // May be worth seeing what is next...

                            // if this was called without a callback, and needs to be async, can return
                            //  a function to call.

                            // let's have a look at the next levels field names...
                            console.log('level', level);
                            console.log('arr_field_names', arr_field_names);

                            // want to get the slice of arr_field_names until the next
                            //  maybe return a promise to get it here?
                            //   and set it up so that it proceeds to get it...

                            var next = arr_field_names.slice(level).join('.');

                            return function(callback) {
                                //return current_obj.get(next, callback);
                                return current_obj(function(err, res) {
                                    console.log('got res', res);
                                    console.log('got res', stringify(res));

                                    // That's assuming res is a resource or data_object?

                                    res.get(next, callback);
                                    //res(next, callback);
                                    //callback(null, res);
                                })
                            }


                            // want to call get on the item returned.


                            //throw 'stop';

                            //current_obj(function(err, gotten) {
                            //	//new_obj = current_obj.get(fname);
                            //	level++;
                            //	// too late by now. would need to break out of the while.
                            //	//  not really possibly (right now)?
                            //	//

                            //	current_obj = new_obj;
                            //})

                        } else {
                        */
                        new_obj = current_obj.get(fname);
                        //console.log('fname ' + fname);

                        // So, when the dom object is obtained, it should have its own fields.
                        //  The 'get' function will need to be modified to return objects of the right type / class.

                        //console.log('new_obj ' + stringify(new_obj));
                        //console.log('current_obj ' + stringify(current_obj));

                        level++;
                        current_obj = new_obj;
                        /*
                        }
                        */



                    }

                    // but could this return a function?
                    //  could that be handled?

                    return current_obj;
                }

                //console.log('field_name ' + field_name);
                //console.log('field ' + stringify(field));

                // fields seem to stop having been set up properly.

                //console.log('get: field ' + (field));
                //throw 'stop';
                if (field) {
                    //console.log('tof(field) ' + tof(field));
                    //console.log('field ' + stringify(field));

                    //throw 'stop';

                    //console.log('this._[field_name] ' + this._[field_name]);
                    // depending on the type, such as if it is a collection or some other kind of Data_Object, define it.
                    //if (!is_defined())

                    // do we know the field name yet?
                    // yes
                    //console.log('field_name ' + field_name);
                    //console.log('this._[field_name] ' + this._[field_name]);


                    if (!this._[field_name]) {

                        //console.log('did not find object for field. will make one if appropriate. field_name = ' + field_name);
                        //console.log('this._[field_name] ' + this._[field_name]);
                        // create the new item of that type.
                        //  just collections for the moment.

                        var sig_field = get_item_sig(field, 20);
                        //console.log('1) sig_field ' + stringify(sig_field));
                        //console.log('field ' + stringify(field));
                        // And a function here? The definition of a field? String consructor etc.
                        //  Harder to differentiate between that and callbacks now.

                        // A constructor function or a callback?
                        //  There would need to be a way to tell the difference, even if we assign a
                        //  _is_constructor property to the constructors.

                        // Perhaps stop using this?
                        //  We can get fields anyway, without specifying the types.
                        //  Also the constructor function there gets confused with callbacks potentially.

                        if (sig_field == '[s,s,f]') {
                            var field_name = field[0];
                            var fieldStrType = field[1];
                            var fieldDef = field[2];

                            // Maybe look out for String?
                            //  Dealing with String fields, given as a String class?


                            // But if it is a String, maybe we use a Data_Value

                            if (fieldDef == String) {
                                //console.log('is a String');
                                //throw 'stop';

                                var dval = new Data_Value({
                                    'context': this._context
                                })
                                this._[field_name] = dval;
                                return this._[field_name];


                            } else if (fieldDef == Number) {
                                //console.log('is a String');
                                //throw 'stop';

                                var dval = new Data_Value({
                                    'context': this._context
                                })
                                this._[field_name] = dval;
                                return this._[field_name];


                            } else if (fieldStrType == 'Class') {
                                // Can't create a new string like this...

                                var FieldConstructor = fieldDef;
                                var nObj = new FieldConstructor({
                                    'context': this._context
                                })
                                this._[field_name] = nObj;
                                return this._[field_name];

                            }



                        }

                        if (sig_field == '[s,[s,u]]') {
                            // it looks like it has gone wrong.
                            var stack = new Error().stack;
                            console.log(stack);
                        }

                        if (sig_field == '[s,s,o]') {
                            var field_name = field[0];
                            var field_type_name = field[1];
                            var field_info = field[2];

                            //field_name
                            //console.log('* field_name ' + field_name);
                            //console.log('* field_type_name ' + field_type_name);
                            //console.log('* field_info ' + stringify(field_info));
                            // need to cover cases where we have the field info.
                            //  it may need to create a new object matching that field, with the check
                            //   that the data fits into that field.
                            // Data_Value would likely be a good type for a variety of fields.





                            if (field_type_name == 'collection') {
                                //console.log('lazy loading - creating new collection');
                                this._[field_name] = new jsgui.Collection({
                                    'context': this._context
                                });
                                return this._[field_name];
                            } else {
                                // if it's just a string?

                                // 'data_object'
                                //  may get the data_type_object_constructor here.

                                if (field_type_name == 'data_object') {
                                    var dobj = new Data_Object({'context': this._context});
                                    this._[field_name] = dobj;
                                    dobj.parent(this);
                                    return this._[field_name];
                                }


                                if (field_type_name == 'ordered_string_list') {
                                    var osl = new Ordered_String_List();
                                    this._[field_name] = osl;
                                    return this._[field_name];
                                } else if (field_type_name == 'string') {
                                    // use a Data_Value?
                                    //throw 'stop';
                                    var dv = new Data_Value({
                                        'context': this._context
                                    });
                                    //dv.set()

                                    //console.log('dv.__id ' + dv.__id);
                                    //console.log('dv._id() ' + dv._id());
                                    //throw 'stop';
                                    this._[field_name] = dv;

                                    // not providing an index
                                    dv.parent(this);

                                    //console.log('dv ' + stringify(dv));

                                    return this._[field_name];
                                } else {

                                    // need to look into more info about the field.
                                    //
                                    //console.log('field_info ' + stringify(field_info));
                                    // ignore indexed here I think.

                                    // Can get data type object constructors for various types of field, such as
                                    //  {"data_type": ["text", 32], "indexed": true}
                                    //  indexed text(32)


                                    //if (field_info.data_type == )
                                    // need to see if it's a text field.
                                    //  data_type = [name, length]
                                    //  and look at the item_sig for the data_type.
                                    var dt = field_info.data_type;
                                    var dt_sig = get_item_sig(dt, 4);
                                    //console.log('dt_sig ' + dt_sig);

                                    if (dt_sig == '[s,n]') {
                                        var data_type_name = dt[0];
                                        var data_type_length = dt[1];

                                        // then for text, just make a Data_Value

                                        if (data_type_name == 'text') {
                                            var dVal = new Data_Value({
                                                'context': this._context
                                            });
                                            //dVal.parent(this);
                                            //value.set(field_val);
                                            this._[field_name] = dVal;
                                            return this._[field_name];
                                        }

                                        // If the data type is just a string, need to process some specific
                                        //  data types.
                                        // This may be possible using input processors?


                                    } else if (dt_sig == 's') {
                                        var data_type_name = dt;
                                        //console.log('*** data_type_name ' + data_type_name);

                                        if (data_type_name == 'int') {
                                            var dVal = new Data_Value({
                                                'context': this._context
                                            });
                                            //dVal.parent(this);
                                            //value.set(field_val);
                                            this._[field_name] = dVal;
                                            return this._[field_name];
                                        }
                                        //if (data_type_name == '')
                                    } else {
                                        var dtoc = this.mod_link().ensure_data_type_data_object_constructor(field_type_name);
                                        //console.log('dtoc ' + dtoc);
                                        // then use this to construct the empty field.

                                        //throw '!!stop';

                                        var field_val = new dtoc({'context': this._context});
                                        field_val.parent(this);
                                        this._[field_name] = field_val;
                                        return this._[field_name];
                                    }



                                    // throw 'stop';


                                }

                                // check if it is a defined data type.
                                //  if so, we can do something with it.
                                //   input with that data type, and output from it.

                                // This code is getting quite big. I think it won't be all that big when compressed, refactored a bit.
                                //  Once it has been tested it can be refactored down quite a lot, don't want to do that while it is still being built.

                                // if there is an input processor, we know how to deal with it for the moment.
                                //  same with output processor?

                                // so you get the dom data_object?
                                //  I think automatically created and nested Data_Objects are the way.

                                // a Data_Object of that type?
                                //  automatic Data_Object extensions?

                                //throw('5) stop');
                            }

                        } else if (sig_field == '[s,s]') {
                            var field_name = field[0];
                            var field_type_name = field[1];

                            //console.log('field_name ' + field_name);
                            //console.log('field_type_name ' + field_type_name);

                            // perhaps getting collection fields should be moved to enhanced_data_object?
                            //  not keen on interdependencies here.



                            if (field_type_name == 'collection') {

                                // lazy creation of fields.

                                throw 'not supported here. should use code in enhanced-data-object.';

                                // So, Collection has been added to jsgui by now.
                                console.log('pre make coll');

                                // Maybe Collection has not been added to jsgui.
                                //  Need to ensure it does get added when it's getting used.

                                // seems like the Collection object does not get put back on this...
                                //  or at least not always.

                                // looks like we use the module as it is.

                                var coll = new jsgui.Collection({
                                    'context': this._context
                                });

                                console.log('pre set coll parent');
                                coll.parent(this);

                                this._[field_name] = coll;
                                return this._[field_name];

                            } else if (field_type_name == 'data_object') {
                                var dobj = new jsgui.Data_Object({
                                    'context': this._context
                                })
                                dobj.parent(this);
                                this._[field_name] = dobj;
                                return this._[field_name];

                            } else {
                                var dtoc = jsgui.ensure_data_type_data_object_constructor(field_type_name);
                                //console.log('dtoc ' + dtoc);
                                //throw '!stop';
                                // then use this to construct the empty field.
                                //  without the new constructor it was trying to make an abstract version!!!
                                var obj = new dtoc({'context': this._context});
                                //if (this._context) obj._context = this._context;
                                obj.parent(this);

                                this._[field_name] = obj;
                                //console.log('this._ ' + stringify(this._));

                                return this._[field_name];
                            }
                        } else if (sig_field == '[s,[s,s]]') {
                            var field_name = field[0];
                            var field_info = field[1];

                            //console.log('field_info ' + stringify(field_info));

                            if (field_info[0] == 'collection') {
                                var collection_type_name = field_info[1];

                                // new Collection('string') should work.

                                // context needs to be set at the beginning though.
                                //  Can't make a collection from this module.

                                // Need a way to be able to!

                                //var ncoll = new jsgui.Collection({'context': this._context})

                                //var ncoll = new jsgui.Collection(collection_type_name);
                                //if (this._context) ncoll._context = this._context;

                                //ncoll.parent(this);
                                //this._[field_name] = ncoll;
                                //return this._[field_name];
                            }
                        } else if (sig_field == '[s,[s,o]]') {
                            // [fieldName,['collection', objDef]]

                            // eg field ["entries", ["collection", {"address": "string", "family": "string", "internal": "boolean"}]]
                            // it's a collection?? (check, with the particular data type)

                            var field_name = field[0];
                            var field_info = field[1];
                            var data_type_name = field_info[0];

                            if (data_type_name == 'collection') {
                                var objDef = field_info[1];
                                throw 'not supported here. should use code in enhanced-data-object.';

                                // Need to do more than this.
                                //var ncoll = new jsgui.Collection({'context': this._context})

                                //var ncoll = new jsgui.Collection(collection_type_name);
                                //if (this._context) ncoll._context = this._context;

                                //ncoll.parent(this);
                                //this._[field_name] = ncoll;
                                //return this._[field_name];
                            }

                        }


                    } else {
                        //console.log('did find field obj ' + field_name);

                        return this._[field_name];
                    }

                    //var tf = tof(this._[field_name]);
                    //console.log('tf ' + tf);
                    //if ()

                } else {
                    // Without a field... t

                    var res = ll_get(this._, a[0]);


                    if (!res) {
                        if (field_name.indexOf('.') > -1) {
                            throw 'not yet handled';
                        } else {
                            res = this[a[0]];
                        }
                    }
                    // Instrinsic get...



                    //console.log('property_name ' + property_name);

                    // Breaks it with stringify, is hard to track down.
                    //  Maybe worth keeping as an example gotcha.
                    //console.log('res ' + res);
                    return res;
                }



            } else if (a.l == 0) {
                // need to get the values of all fields.
                //  Think they are now being held in the field collection, fc.

                return this._;
            }
        }


    }),

    // trying a different way of doing things.

    '___get_fields_chain': function() {
        // is this the prototype / constructor.

        var my_fields = this._fields;

        // a bit difficult...


        console.log('my_fields ' + stringify(my_fields));

        var con = this.constructor;
        console.log('con ' + stringify(con));

        //this._super();

        /*

        var sc = this._superclass;
        console.log('sc ' + sc);



        console.log('this._fields ' + stringify(this._fields));

        if (con) {
            var con_fields = con._fields;
            console.log('con_fields ' + stringify(con_fields));

            var con_super = con._superclass;
            console.log('con_super ' + stringify(con_super));

            var con_pro = con.prototype;
            console.log('con_pro ' + stringify(con_pro));

            var con_pro_super = con.prototype._superclass;
            console.log('con_pro_super ' + stringify(con_pro_super));

            var con_pro_fields = con_pro._fields;
            console.log('con_pro_fields ' + stringify(con_pro_fields));


        }


        var pro = this.prototype;
        console.log('pro ' + pro);

        if (pro) {
            var pro_fields = pro._fields;
            //var con_pro = con.prototype;
            console.log('pro_fields ' + stringify(pro_fields));


            var pro_super = pro._super;
            console.log('pro_super ' + stringify(pro_super));


        }
        */
    },

    '_get_input_processors': function() {
        //throw 'stop';
        return jsgui.input_processors;
    },

    //


    //'set': fp(function(a, sig) {
    'set': (function() {
      var a = arguments;
      a.l = arguments.length;
      var sig = get_a_sig(arguments, 1);
      //console.log('sig', sig);
        // property_name, value

        // May override this with collections...
        //  Clear, then push first item, when given a Data_Object.

        //console.log('Data_Object set sig ' + stringify(sig));
        //console.log('this._abstract', this._abstract);
        if (this._abstract) return false;

        var that = this, res;

        //console.log('');


        // May want to add it to a collection in some cases.
        //  Or make it the only item in the collection.

        // The signature for set as well?

        //console.log('');
        //console.log('set');

        //console.log('this.__type_name ' + this.__type_name);
        //console.log('this._data_type_name ' + this._data_type_name);



        var input_processors;
        if (this._module_jsgui) {
            input_processors = this._module_jsgui.input_processors;
        } else {
            input_processors = this._get_input_processors();
        }

        //console.log('*** input_processors ' + stringify(Object.keys(input_processors)));

        // or some other value will be set?
        //console.log('jsgui.input_processors ' + stringify(jsgui.input_processors));
        // These input processors need to be available throughout.
        //  Not sure about where to retrieve them from when using AMD.
        //   Could pass forward a request fot input processors.
        // so would have _get_input_processors function.
        //  that would retrieve it from whichever module it is from.

        // so there may not be an input processor set up already for it.
        //  some classes won't need it.

        // Need to refactor this.


        // setUsingInputProcessor

        // setUsingThis




        // Less important a distinction now.
        //  The data types may have been set up so that they just apply fields, not that they have got
        //   input and output processors.

        if (is_defined(this._data_type_name) && input_processors[this._data_type_name]) {
            // use the input processor of the data_type.

            throw 'stop';

            console.log('is_defined _data_type_name and input_processors[this._data_type_name]');

            //console.log('this.__type_name ' + this.__type_name);
            //throw 'stop';
            var raw_input = a;

            // we may not have the means to parse that raw input...
            //console.log('input_processors)

            // OK, so when setting using the type that has come about through the type system...

            //console.log('raw_input ' + stringify(raw_input));


            // if there is no input processor, to set _, we process it directly.

            // ['name, value'];
            //  set our own fields.
            //if (input_processors[this._data_type_name]) {
                var parsed_input_obj = input_processors[this._data_type_name](raw_input);
                //console.log('parsed_input_obj ' + stringify(parsed_input_obj));
                //throw('2) stop');

                this._ = parsed_input_obj;

            this.trigger('change');
            //} else {

            //}





            // set, just with a value... just with the __type_name.
            //  Uses the data type parsing to do this.
            //  Should work for fields.





            // but then with get() - get according to an output format like HTML / CSS, or the internal JSGUI representation.
            //  could still make use of _ for the internal representation.


        } else {
            //console.log('no dtn defined');
            //console.log('a.l ' + a.l);
            //console.log('');


            if (a.l == 2 || a.l == 3) {


                var property_name = a[0], value = a[1];

                var ta2 = tof(a[2]);
                //console.log('ta2', ta2);

                var silent = false;
                var source;

                if (ta2 == 'string' || ta2 == 'boolean') {
                    silent = a[2]
                }

                if (ta2 == 'control') {
                    source = a[2];
                }

                //silent = false || a[2];


                //console.log('set property_name ' + property_name + ', value ' + value);
                //console.log('set value ' + value);
                //console.log('set value ' + stringify(value));

                // is the property read_only?

                if (!this._initializing && this._map_read_only && this._map_read_only[property_name]) {
                    throw 'Property "' + property_name + '" is read-only.';
                } else {

                    //console.log('***');

                    // not using ll_set any longer.

                    // need to use a routine that deals with the data_types.

                    // Think we need some kind of recursive get-set type of routine.
                    //  Get will get it to greate objects that are fields anyway.

                    //console.log('property_name', property_name);

                    var split_pn = property_name.split('.');
                    //console.log('split_pn.length ' + split_pn.length);

                    // When setting some types of Data_Object class
                    //  (like Server, a subclass of Data_Object, and a Resource)
                    // need to make sure it sets it with the item given.



                    if (split_pn.length > 1 && property_name != '.') {
                        //console.log('split_pn ' + stringify(split_pn));

                        var spn_first = split_pn[0];
                        var spn_arr_next = split_pn.slice(1);

                        // For dealing with a root item?
                        //  So can set its . property?

                        // I think we have a special '.' field.
                        //  Treat it as an object.



                        //console.log('spn_first ' + stringify(spn_first));
                        //console.log('spn_arr_next ' + stringify(spn_arr_next));

                        var data_object_next = this.get(spn_first);
                        //console.log('data_object_next', data_object_next);
                        if (data_object_next) {

                            var res = data_object_next.set(spn_arr_next.join('.'), value);

                            if (!silent) {

                                var e_change = {
                                    'name': property_name,
                                    'value': value,
                                    'bubbled': true
                                };

                                if (source) {
                                    e_change.source = source;
                                }

                                // I think this is bubbling.
                                //  Maybe mark it as bubbled.

                                this.raise_event('change', e_change);
                            }


                            return res;

                        } else {

                            // Could create a new Data_Object.

                            //var ndo = new Data_Object({
                            //	// with a context?
                            //	'context': this._context
                            //});

                            // but for the '.' property...









                            // Is this recursive?
                            //  Need to fix this.

                            // May need to specify a data model?
                            //  But we want this to be flexible?

                            // Maybe we need to declare that Script has got some deeper attributes.

                            //var data_object_next = new

                            // Not sure how this is recursing properly.
                            //  Maybe work on this at some other time, using an example that's more sandboxed,
                            //   such as the US presidents example.





                            //var stack = new Error().stack
                            //console.log(stack);
                            throw('No data object at this level.');
                        }
                        throw('10)stop');
                        // call a multi-level-set function?
                        //  could do it recursively here for the moment I think, without much code.
                        //   like it is now :)


                    } else {

                        //console.log('2) no split');

                        // not necessarily, it still may apply to a data_object.

                        //console.log('pre get ');
                        //  if there is nothing, get should return undefined / null.
                        //   perhaps make it if it is an expected object though.
                        //    it looks like it is expected? or we have it from the value anyway.
                        //    maybe it's only fine to set it to a data_object / data_value.

                        // if it is just a string we can make a Data_Value to hold it and then put it in place.
                        // can use the dobj function???

                        // can just set the value.
                        //  could just record the string in here.
                        //  putting it in a Data_Value would eventually help with automatic string indexing.
                        //   And it would potentially be an indexed field anyway.

                        // Potentially parsing object input?
                        //  Will have more of that working to do with some HTML properties to start with.





                        // get it???
                        //  that could work... could create the right constructor.

                        //  There maybe will only be a

                        // Maybe don't need to get this...
                        //console.log('---');
                        // We may be able to get it, using lazy loading in some cases.
                        //  This may look at the fields and create a new object.

                        //console.log('1) property_name ' + property_name);
                        // But we are setting it!!!



                        // May do away with data_object_next.
                        //

                        var data_object_next = this.get(property_name);

                        // Looking for these in resources, and doing more than needs to be done on init?



                        // So, the property has not been defined correctly.
                        //  Need to make it so that data_def sets up the fields so that they work.




                        //console.log('---');
                        //  gets it as a string?


                        // Stringifying this causes an endless loop (sometimes)
                        //console.log('data_object_next ' + stringify(data_object_next));

                        // failing to get tagName property - it's a string proper

                        // and when setting the tag_name object?

                        //console.log('property_name ' + property_name);
                        //console.log('value ', (value));
                        //console.log('***** data_object_next ' + data_object_next);
                        if (!is_defined(data_object_next)) {

                            // add it to the fields collection?
                            //this._[property_name] = new Data_Object({});
                            //return this.set(property_name, value);
                            //console.log('tof(value) ' + tof(value));


                            //var tv = tof(value);
                            var tv = typeof value;

                            /*
                            if (tv == 'data_object') {
                                // copy directly in more cases than this... maybe just for primitive types do we use the
                                //  data_value.

                            } else {

                            }
                            */
                            var dv;
                            //console.log('tv ' + tv);
                            if (tv == 'string' || tv == 'number' || tv == 'boolean' || tv == 'date') {
                                dv = new Data_Value({'value': value});
                            } else {
                                dv = value;
                            }


                            //console.log('dv ' + stringify(dv));
                            //this._[property_name] = value;
                            //throw 'Should make a new Data_Value';

                            this._[property_name] = dv;
                            // Not making a new Data_Value?

                            //console.log('this._[property_name] ' + this._[property_name])

                            //this.raise_event('change', [property_name, dv]);

                            if (!silent) {
                                var e_change = {
                                    'name': property_name,
                                    'value': dv
                                }

                                if (source) {
                                    e_change.source = source;
                                }

                                this.raise_event('change', e_change);
                            }




                            //throw 'stop!!!';

                            return value;

                        } else {
                            //console.log('this ' + stringify(this));
                            //console.log('2) property_name ' + property_name);
                            //console.log('data_object_next ' + stringify(data_object_next));
                            //console.log('tof data_object_next ' + tof(data_object_next));

                            // Just because we can get the server as a next data object, does not mean we need to.

                            //  If we have been given a value, use it.
                            //  However, need to clarify this code here.
                            //   At some times we will want it to produce the next level of data object, but not at others.

                            // Setting a field should be a fairly simple procedure if possible, maybe this code could
                            //  be refactored.

                            // So when we have been given a server property, we want to set ._.server to it

                            //


                            // REFACTOR?



                            // if it is a data object?
                            //  if it is a native type?



                            if (is_js_native(data_object_next)) {
                                //console.log('is_js_native');
                                //this.set
                                // but maybe that object should be wrapped in Data_Object?
                                this._[property_name] = value;
                                res = value;


                            } else {
                                //console.log('not is_js_native');
                                //var res = data_object_next.set(value);

                                this._[property_name] = value;
                                res = value;

                                //console.log('set data object next using value');
                            }




                            //var res = ll_set(this._, property_name, value);
                            // should raise an event here.

                            // this.raise_event('set', [property_name, value]);
                            // then the event tells everything that is listening to it.
                            //console.log('this', this);

                            //this.trigger('change', [property_name, value]);
                            //console.log('property_name', property_name);
                            //console.log('value', value);
                            //console.log('this', this);

                            if (!silent) {
                                var e_change = {
                                    'name': property_name,
                                    'value': value
                                };
                                if (source) {
                                    e_change.source = source;
                                }
                                this.trigger('change', e_change);
                            }


                            // want to listen to the set event for some things such as GUI components in particular.

                            return res;
                        }
                    }
                }
            } else {
                // But maybe it should be a data_value, not a data_object.

                //console.log('3) else sig ' + sig);

                // And for a Data_Object?
                //  Basically put it into place.

                if (sig == '[D]') {
                    //console.log('property_name ' + property_name);
                    this._[property_name] = value;

                    this.raise_event('change', [property_name, value]);

                    // Raise a change event?
                    //  Or is set event OK?

										return value;



                }

                if (sig == '[o]') {
                    //console.log('setting with a provided object');

                    var that = this;
                    // may need to be recursive.
                    var res = {};
                    each(a[0], function(i, v) {
                        //console.log('i ' + i);
                        //console.log('v ' + stringify(v));

                        res[i] = that.set(i, v);
                        //that.raise_event('change', [i, v]);

                    });
                    return res;
                }

                // C for collection?
                if (sig == '[c]') {
                    //this._[]
                    this._[property_name] = value;
                    this.raise_event('change', [property_name, value]);
                    //throw 'unsupported';
										return value;
                }
            }
        }
    }),
    'has' : function(property_name) {
        return is_defined(this.get(property_name));
    }
});

var initializing = false, fnTest = /xyz/.test(function() {
    xyz;
}) ? /\b_super\b/ : /.*/;


var get_fields_chain = function(data_object_class) {
    var res = [];
    var inner = function(data_object_class) {
        // _fields... fields will be given as an array by default, to preserve the order.

        var fields = data_object_class._fields;


        //console.log('get_fields_chain fields ' + stringify(fields));
        if (fields) {
            res.push(fields);
        }
        // Could be pushing an array containing an array that represents one field.

        var sc = data_object_class._superclass;
        //console.log('sc ' + sc);
        //if (sc) console.log('sc.constructor._fields ' + stringify(sc.constructor._fields));
        if (sc) {
            inner(sc);
        }
    };
    inner(data_object_class);
    //console.log('get_fields_chain res ' + stringify(res));
    return res;
}


// But the fields may have an order. It may be necessary to preserve that order.
//  The order of fields is not of great imporance usually. May be nice to have their order guaranteed to stay the same...
//   it may be that different JavaScript engines will do this anyway.

var get_chained_fields = function(data_object_class) {
    // would be nice to do this in a way that preserves the order.
    //  an array of fields may be better.

    // The fields chain... need to make sure that is getting the separate fields.
    var fc = get_fields_chain(data_object_class);



    var i = fc.length; //or 10

    //var res = {};
    var res = [];

    // Not so sure about doing this... is it breaking up a field into more than one field when it should not be?


    while(i--)
    {
      //...
        var item = fc[i];

        // the item can be an object... or an array. Array is better.

        //each(item, function(i2, v) {
        //	res[i2] = v;
        //});

        // [field_name, field_info]

        // Not so sure about including the number?
        //  Is it necessary?
        // Maybe it can be ignored at a later stage.
        //  However, do want it to properly interpret the fields at a later stage.

        var c = 0;

        //console.log('item', item);
        // item is either an object or an array.

        each(item, function(i2, field_info) {

            //console.log('');
            //console.log('i2 ' + i2);

            if (tof(i2) == 'string') {
                c = c + 1;
                res.push([c, [i2, field_info]]);
            } else {
                res.push([i2, field_info]);
                c = i2;
            }

            //console.log('field_info ' + stringify(field_info));

            //res[i2] = v;
            // field_info could just be the field_name and some text. that should be fine.

        });

    }
    // not sure that all fields will have simple types.
    //  some will be constructors even.
    // Fields should have been set correctly, not like get_chained_fields res [[0, "indexed_array"], [1, [["red", "number"], ["green", "number"], ["blue", "number"]]]]
    //console.log('get_chained_fields res ' + stringify(res));
    return res;
}

var chained_fields_to_fields_list = function(chained_fields) {


    /*
    var res = [];
    each(chained_fields, function(i, v) {
        var field_number = v[0];
        var field = v[1];
        res.push(field);
    });
    */

    //console.log('chained_fields ' + stringify(chained_fields));

    var l = chained_fields.length;
    //console.log('l ' + l);
    var res = new Array(l);
    //var res_push = res.push;
    for (var c = 0; c < l; c++) {
        //res_push.call(res, chained_fields[c][1]);
        //res.push(chained_fields[c][1]);
        res[c] = chained_fields[c][1];
    };


    return res;
};

jsgui.map_classes = {};

/*
Object.prototype.begetObject = function () {
    function F() {}
    F.prototype = this;
    return new F();
};

newObject = oldObject.begetObject();
*/

// Also want to specify functions that execute upon initialization that call
//  a function, using a parameter that gets set in the definition.
// This will be used to enable a Collection subclass to be defined as
//  Collection.extend({'data_object': Data_Object_Subclass});
//   Like a collection of products holding the Product Data_Object type and having that
//   easily and clearly declared within the model code.
// Could this be done in the normal init?
//  or use propsToMerge?

Data_Object.extend = function(prop, post_init) {
    var _super = this.prototype;
    initializing = true;
    var prototype = new this();

    // copying accross some old things?
    //  keeping some things in the prototype chain?
    var for_class = {};

    initializing = false;

    //if (tof(prop) === 'string') {
    if (typeof prop === 'string') {
        // giving it a data_type from the jsgui.data_types_info
        var data_type_name = prop;
        var dtis = jsgui.data_types_info;
        //console.log('dtis ' + stringify(dtis));
        //return dtis;
        var data_type_info = dtis[data_type_name];
        //console.log('data_type_name ' + stringify(data_type_name));
        //console.log('data_type_info ' + stringify(data_type_info));
        for_class[data_type_name] = data_type_name;
        for_class[data_type_info] = data_type_info;
        // then it will be read from the class object itself.
        //  will be able to get the constructor object, I think.
        // maybe not best to do this through the prototype?
        //  having difficulty getting the constructor, within the constructor function.
        prototype['__type_name'] = data_type_name;
        prototype['__data_type_info'] = data_type_info;

        prop = {};

        // then this effectively sets its fields.
        //  create the fields, in order, and have a numeric index saying which field is which.
        //  will have an _operating_mode.
        //  the data_object will be able to operate as an indexed_array... but not sure about making a collection and giving it named items?
        //   collection already takes named items.

        // Will also need to deal with collections of objects here.
        //  Will be very nice when the HTML code is very declarative.

        // Data_Type_Instance? Or the constructor to the relevant Data_Object functions as its instance?
        //  It's not exactly an instance, it's a constructor, but constructors can have their own methods too.

        // Then this is the data_type_instance, effectively.

        // so it will hold the data type info within the constructor?
        //  or named reference to it is fine.

        //throw('*1 stop');
    }
    var prop_item, t_prop_item, tmp, name, res;

    var keys = Object.keys(prop);
    //var key;
    for (var c = 0, l = keys.length; c < l; c++) {
      name = keys[c];
      prop_item = prop[name];

      if (name.charAt(0) === '#') {

          // direct copy with '#'... not been using that.

          prototype[name.substring(1)] = prototype[prop_item];
      } else {
          // if it's a function, then do the following.

          // if it's an object, then it may be something specific to the DataObject type.
          //  such as setting / extending fields of an object.

          // some specific non-object things will be set to the prototype.
          //  it will be possible to look at this info, the fields chain in the object, will take a bit of trial, error and design.

          t_prop_item = typeof prop_item;
          //console.log('prop_item' + prop_item);
          if (t_prop_item === 'function') {

              prototype[name] = typeof _super[name] === 'function' && fnTest.test(prop_item) ?
              // had some difficulty using fp() with 'init' functions. could
              // it have to do with function names?

              (function(name, fn) {
                  return function() {
                      tmp = this._super;
                      this._super = _super[name];
                      res = fn.apply(this, arguments);
                      this._super = tmp;
                      return res;
                  };
              })(name, prop[name]) : prop[name];

          } else if (t_prop_item === 'object' || t_prop_item === 'boolean') {

              // don't put these in the prototype.
              //  they are not for the object itself.
              //console.log('property name', name);
              if (name == 'class_name') {
                  for_class['_class_name'] = prop_item;
              } else if (name == 'fields') {
                  // maybe call it something else, fields is a function.
                  // fields could be a function, so call it _fields
                  // it sets the array of fields... could be an object representing fields but an array is better because the order gets preserved.
                  //for_class['_fields'] = prop_item;
                  for_class._fields = prop_item;
                  //this['_fields'] = prop_item;
                  // then the fields will be read upon initialization?
                  //  getting all the fields up the chain...
              } else if (name == 'connect_fields') {
                  // maybe call it something else, fields is a function.
                  // fields could be a function, so call it _fields

                  //for_class['_connect_fields'] = prop_item;
                  for_class._connect_fields = prop_item;

                  // then the fields will be read upon initialization?
                  //  getting all the fields up the chain...

              } else {
                  prototype[name] = prop[name];
              }

          }  else {
              prototype[name] = prop[name];
          }
      };
    }

    //for (name in prop) {


    //};

    // Looks like this needs to be changed just to be local...

    var Class = function() {

        //console.log('Data_Object initializing ' + initializing);
        //console.log('Data_Object !!this.init ' + !!this.init);

        if (!initializing) {
            if (this.init) {
                this.init.apply(this, arguments);
                if (this.post_init) {
                    //this.post_init();
                    this.post_init.apply(this, arguments);
                }

                //if (post_init) {
                //    post_init.call(this);
                //}
                // Check to see if there are further functions to call...
                //  things that have got put into the extend function?



            } else {
                var spec = arguments[0] || {};
                spec.abstract = true;
                //var newClass = new Class(spec);

                //return newClass;
                return new Class(spec);
            }
        }

    };
    Class.prototype = prototype;
    //Class.constructor = Class;
    Class.prototype.constructor = Class;
    // but constructor loses info. not sure how to get back at the constructor from an object?
    //  what is the original constructor even?

    Class.extend = arguments.callee;

    /*
    if (for_class) {
        for (var c = 0, l = for_class.length; c < l; c++) {
            Class[i] = for_class[v];
        }
    }
    */
    //console.log('for_class', for_class);
    for (i in for_class) {
        Class[i] = for_class[i];
    }


    //each(for_class, function(i, v) {
    //	Class[i] = v;
    //});

    // jsgui.map_classes[]

    if (Class['class_name']) {
        jsgui.map_classes[Class['class_name']] = Class;
    }

    //console.log('_superprototype ' + _super.prototype);

    //Class.prototype._superclass = _super;

    Class._superclass = this;

    //Class._superprototype = _super;


    // * if (namespcExtension) { each(namespcExtension, function(i, n) {
    // * Class[i] = n; }); }; if (propsToMerge) { each(propsToMerge,
    // * function(i, n) { if (typeof Class.prototype[i] === 'undefined') {
    // * Class.prototype[i] = n; } else { $.extend(true, Class.prototype[i],
    /// * n); }; }); }


    return Class;
};


// Will have actual Constraint programming objects.
//  They may translate to the database level as well.
//  In many cases the constraints will be expressed as strings such as 'text(32)'.
//   Would then be translated to varchar(32) on a different level.



var data_object_matches_field_constraints = function(data_object, field_constraints) {
    // Field constraints given as a normal object.

    // returns true or false
    //  though could return failure information as well if asked for it.
    //  making it into another polymorphic function.

    each(field_constraints, function(fc_name, fc_value) {
        //console.log('fc_name ' + fc_name);
        //console.log('fc_value ' + fc_value);

    });
};
// That data object will be indexable.

var Enhanced_Data_Object = null;

var set_Enhanced_Data_Object = function (EDO) {
    Enhanced_Data_Object = EDO;
};

var get_Enhanced_Data_Object = function () {
    return Enhanced_Data_Object;
};


// seems like an overlap with the new jsgui.fromObject function.
//  That will initially go in the Enhanced_Data_Object module, or jsgui-enh

var dobj = function(obj, data_def) {
    // could take a data_def?
    // Could use the enhanced data object if we patch backwards?
    //  So Enhanced_Data_Object could hopefully patch backwards in the code?

    //var tdd = tof(data_def);

    var cstr = Data_Object;
    if (Enhanced_Data_Object) cstr = Enhanced_Data_Object;
    //console.log('Enhanced_Data_Object ' + Enhanced_Data_Object);

    var res;
    if (data_def) {
        res = new cstr({'data_def': data_def});
    } else {
        res = new cstr({});
    }

    var tobj = tof(obj);

    //console.log('obj ' + stringify(obj));
    if (tobj == 'object') {
        var res_set = res.set;
        each(obj, function(i, v) {
            //res.set(i, v);
            res_set.call(res, i, v);
        });
    }

    return res;
};


// This code could be done using other means in other parts of the system.
//  The framework code will provide more to do with data type definitions and interpreting input data.

// this seems like part of an input processor.
//  changes from text to the JavaScript objects that get understood.


// parsing a data type
// similar to parsing a JavaScript function call, but only one ting in the brackets, and there may not be brackets anyway


var parse_field_text = Fields_Collection.parse_field_text;
var parse_data_type = Fields_Collection.parse_data_type;
// We can't extend this further down while using requirejs
//  Not sure how to achieve this now, requirejs was meant to be for convenience.

// Can have some sort of function chaining.
//  And having a function within the right module called...
//  That could be a 'linking function.'
// mod_link.

// A new constructor for these?
//  Curried functions?
//  Or Boolean_DV... Would have tests possibly.

jsgui.map_data_type_data_object_constructors = jsgui.map_data_type_data_object_constructors || {};
jsgui.map_data_type_data_object_constructors['boolean'] = Data_Value;
//boolean': Data_Value



// Could do something like pass the ensure_data_type_data_object_constructor function around?
//  Or the HTML module will have its own way of making object constructors.

// I think only having object constructor functions going down the module loading heirachy will work.
//  May have a map of various loading functions that get made in each module.

// They are basically constructor functions.

// But this could have access or need access to more information about how to construct objects.
//  Want to get this working for 'color'.
var ensure_data_type_data_object_constructor = function(data_type_name) {

    //console.log('');
    //console.log('');
    //console.log('jsgui.map_data_type_data_object_constructors[data_type_name] ' + stringify(jsgui.map_data_type_data_object_constructors[data_type_name]));
    //console.log('');
    //console.log('');

    // Hardet to bring that map through all dependencies and back.
    //  However, need to have access to that map variable.

    //console.log('jsgui.map_data_type_data_object_constructors ' + jsgui.map_data_type_data_object_constructors);

    if (!jsgui.map_data_type_data_object_constructors[data_type_name]) {
        //console.log('creating new Data_Object constructor for data_type: ' + data_type_name)

        // Need to get the variable back through the modules...
        //  Missing global variables?
        //  Move this function somewhere else?
        //  Maybe we could have some storage available in jsgui-lang-essentials through a closure.
        //  That way the code could be sent back... but do we still have different instances running?

        // Could just be different execution contexts... co can't feed back this information about other objects.
        //  But can feed functionality forards.

        // May need to have things more independant.
        //

        //var dti = jsgui.get('dti');
        //console.log('dti ' + dti);
        //throw 'stop';

        var dto = jsgui.data_types_info[data_type_name];

        //console.log('dto ' + stringify(dto));

        var dtc = Data_Object.extend({
            'fields': dto
        })
        jsgui.map_data_type_data_object_constructors[data_type_name] = dtc;
    }
    return jsgui.map_data_type_data_object_constructors[data_type_name];
}
jsgui.ensure_data_type_data_object_constructor = ensure_data_type_data_object_constructor;

input_processors.field_text = parse_field_text;
input_processors.data_type = parse_data_type;

// Maybe do without the following.
//  Have different, simpler, flatter namespacing. Put lots of things in jsgui.
//  Then when the files get built together they get turned into local variables.

//Data_Object.Data_Value = Data_Value;



Data_Object.Fields_Collection = Fields_Collection;
Data_Object.dobj = dobj;
Data_Object.matches_field_constraints = data_object_matches_field_constraints;
Data_Object.parse_field_text = parse_field_text;
Data_Object.get_chained_fields = get_chained_fields;
Data_Object.chained_fields_to_fields_list = chained_fields_to_fields_list;
Data_Object.map_data_type_data_object_constructors = jsgui.map_data_type_data_object_constructors;
Data_Object.Mini_Context = Mini_Context;
Data_Object.set_Enhanced_Data_Object = set_Enhanced_Data_Object;
Data_Object.get_Enhanced_Data_Object = get_Enhanced_Data_Object;
Data_Object.ensure_data_type_data_object_constructor = ensure_data_type_data_object_constructor;

//return Data_Object;
module.exports = Data_Object;
//})

},{"./constraint":27,"./data-object-fields-collection":28,"./data-value":30,"./evented-class":32,"./jsgui-data-structures":36,"./jsgui-lang-essentials":38}],30:[function(require,module,exports){
var jsgui = require('./jsgui-lang-essentials');

var j = jsgui;
var Class = j.Class;
var each = j.each;
var is_array = j.is_array;
var is_dom_node = j.is_dom_node;
var is_ctrl = j.is_ctrl;
var extend = j.extend;
var get_truth_map_from_arr = j.get_truth_map_from_arr;
var get_map_from_arr = j.get_map_from_arr;
var arr_like_to_arr = j.arr_like_to_arr;
var tof = j.tof;
var is_defined = j.is_defined;
var stringify = j.stringify;
var functional_polymorphism = j.functional_polymorphism;
var fp = j.fp;
var arrayify = j.arrayify;
var mapify = j.mapify;
var are_equal = j.are_equal;
var get_item_sig = j.get_item_sig;
var set_vals = j.set_vals;
var truth = j.truth;
var trim_sig_brackets = j.trim_sig_brackets;
var ll_set = j.ll_set;
var ll_get = j.ll_get;
var input_processors = j.input_processors;
var iterate_ancestor_classes = j.iterate_ancestor_classes;
var is_arr_of_arrs = j.is_arr_of_arrs;
var is_arr_of_strs = j.is_arr_of_strs;
var is_arr_of_t = j.is_arr_of_t;
var clone = jsgui.clone;

var Evented_Class = require('./evented-class');


var Data_Value = Evented_Class.extend({
    'init': function(spec) {

        this._super();
        // the spec will be the value.
        //  could be the value and its type.

        //console.log('jsgui.__data_id_method ' + jsgui.__data_id_method);
        //throw 'stop';

        // so if the data_id_method is lazy, we get the id through a function.

        // Could take the context as another parameter...
        //  Can make it more flexible in terms of how it gets initialised.
        //  Data_Value(value) makes the most sense.

        if (spec && spec.context) {
            this._context = spec.context;

        }

        if (spec) {
            //console.log('!* spec.value ' + spec.value);
            //console.log('spec ' + stringify(spec));
        }

        if (spec && is_defined(spec.value)) {
            this._ = spec.value;
        }

        /*
        if (jsgui.__data_id_method == 'init') {
            //throw 'stop';
            // and there may be a map in the context.

            if (this._context) {

                // the context no longer keeps a map of the objects.
                //  Will work more on the relationships in a bit.



                //this._context.map_objects[this.__id] = this;
            } else {
                // don't want to be using IDs out of context.

                //throw 'Data_Value needs context';

                // but we'll try this - not setting the ID.
                //  really it needs an ID when it's in a page.
                //  Data_Values should be able to work at other times, such as rendering HTML examples.

                // But maybe it should be able to operate with no context or ID.
                //  It may be a demand of the context that it has an ID.
                //   (maybe not is some contexts though).

                //this.__id = new_data_value_id();



                //map_jsgui_ids[this.__id] = this;


            }
        }
        */

        //this._val = spec;

        this.__type = 'data_value';

        //this._bound_events = {};


        this._relationships = {};
    },
    'get': function() {
        //return this._val;
        return this._;
    },
    'value': function() {
        return this.get();
    },
    'toObject': function() {
        //if (this._.toObject) {
        //	return this._.toObject();
        //} else {
        //	return this._;
        //}
        return this._;

    },
    'set': function(val) {
        //this._val = val;
        var old_val = this._;

        this._ = val;
        this.raise('change', {
            'old': old_val,
            'value': val
        });

        return val;
    },
    'toString': function() {
        //return stringify(this.get());
        // con

        //console.log('this._val ' + stringify(this._val));
        //throw 'stop';

        return this.get();
    },
    // Maybe a particular stringify function?
    'stringify': function() {
        //return stringify(this.get());
        // con

        //console.log('this._val ' + stringify(this._val));
        //throw 'stop';

        var val = this.get();

        //var tval = tof(val);
        var tval = typeof val;
        if (tval == 'string') {
            return '"' + val + '"';
        } else {
            return val;
        }
    },

    'clone': function() {
        var val = this.value();

        var res = new Data_Value({
            'value': val
        });

        console.log('res', res);
        //throw 'stop';

        return res;
    },


    '_id': function() {
        // gets the id.
        //console.log('this._context ' + this._context);
        //throw 'stop';
        if (this.__id) return this.__id;
        if (this._context) {
            //console.log('this.__type ' + this.__type);
            //throw 'stop';
            this.__id = this._context.new_id(this.__type_name || this.__type);

        } else {
            if (!is_defined(this.__id)) {
                throw 'DataValue should have context';
                this.__id = new_data_value_id();
            }
        }


        return this.__id;

    },
    'parent': fp(function(a, sig) {
        var obj, index;
        //console.log('parent sig', sig);


        if (a.l == 0) {
            return this._parent;
        }
        if (a.l == 1) {
            obj = a[0];

            if (!this._context && obj._context) {
                this._context = obj._context;
            }

            // IDs will only work within the context.



            // Another way of expressing this?

            // Can have a single parent, or multiple parents.
            //  May want something to be the only parent. Could have a different mode for multiple parents.

            //  this._parent = obj?


            //console.log('parent obj_id ' + obj_id);
            //throw 'stop'
            //console.log('obj ' + stringify(obj));
            // should maybe rename or subdivide _relationships.
            //  it will also be useful for databases.
            //  however, would need to work with the constraint system.
            //   likely that they would be syncronised through code.

            //var relate_by_id = function () {
            //    var obj_id = obj._id();
            //    this._relationships[obj_id] = true;
            //}

            //var relate_by_ref = function () {
            //    this._parent = obj;
            //}
            //relate_by_ref();

            var relate_by_id = function (that) {
                var obj_id = obj._id();
                that._relationships[obj_id] = true;
            }

            var relate_by_ref = function (that) {
                that._parent = obj;
            }
            relate_by_ref(this);
        }
        if (a.l == 2) {
            obj = a[0];
            index = a[1];

            if (!this._context && obj._context) {
                this._context = obj._context;
            }

            this._parent = obj;
            this._index = index;
        }

        if (is_defined(index)) {
            // I think we just set the __index property.
            //  I think a __parent property and a __index property would do the job here.
            //  Suits DOM heirachy.
            // A __relationships property could make sense for wider things, however, it would be easy (for the moment?)
            // to just have .__parent and .__index
            //


            // Not sure all Data_Objects will need contexts.
            //  It's mainly useful for Controls so far




        } else {
            // get the object's id...

            // setting the parent... the parent may have a context.





        }
    })
});

module.exports = Data_Value;

},{"./evented-class":32,"./jsgui-lang-essentials":38}],31:[function(require,module,exports){
/*

if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(["./jsgui-lang-util", "./data-object-fields-collection"], function(jsgui, Fields_Collection) {
    */

var jsgui = require('./jsgui-lang-util');
var Data_Value = require('./data-value');
var Data_Object = require('./data-object');
var Fields_Collection = require('./data-object-fields-collection');

var Data_Object = jsgui.Data_Object;
var Collection = jsgui.Collection;
var get_a_sig = jsgui.get_a_sig;
var fp = jsgui.fp;
var stringify = jsgui.stringify;
// Using actual JavaScript objects like String should be quite good.
//  JavaScript Primitive Contructors.

var is_defined = jsgui.is_defined, ll_get = jsgui.ll_get, get_item_sig = jsgui.get_item_sig;

// Having a Collection of strings here...
//  May need to choose the right collection context.
//  Don't want to have to deal with these contexts all the time though.
//   Or make it very fast to do so.

// A function to ensure the latest data types?

// Module level functions to register / syncronise things...
//  That makes a lot of sense.

var register_data_type = function(data_type_name, def) {
    jsgui.data_types_info[data_type_name] = def;
}

var ensure_data_type_data_object_constructor = function(data_type_name) {
    //console.log('ENH ensure_data_type_data_object_constructor');
    //console.log('data_type_name ' + data_type_name);

    if (!jsgui.map_data_type_data_object_constructors[data_type_name]) {

        // Can we get it from the most up-to-date module?
        //  Or even make use of a global variable?
        //  JSGUI?




        var dto = jsgui.data_types_info[data_type_name];
        //console.log('dto ' + stringify(dto));

        // Do we need to be accessing the latest data here?
        //  Can we patch the required component backwards?



        var dtc = Enhanced_Data_Object.extend({
            'fields': dto
        })
        jsgui.map_data_type_data_object_constructors[data_type_name] = dtc;
    }
    return jsgui.map_data_type_data_object_constructors[data_type_name];
}
// Maybe the Enhanced_Data_Object will have access to Collection?
var dop = Data_Object.prototype;
var do_init = dop.init;
var do_get = dop.get;

// And making it a collection will give it good enough indexing anyway.
var Enhanced_Data_Object = Data_Object.extend({
    // Can we define a Collection like that?

    // the flags is a collection of strings... but we want to connect the flags.

    // But we can choose the context for the object.
    //  Will need to do that.

    // But maybe object could only have flags if they are used?
    //  Dormant fields?

    // Collection(String) being in the general context?
    //  It could be a special case, for abstract collections.
    //  Also, not using the 'new' keyword.

    'fields': [['flags', Collection(String)]],

    // Collection(String) may be hard to understand... Collection is a Class and is normally called with a constructor.
    //  It has not normally been declared with a native data type inside (or any data type) but it could be done and is convenient
    //   syntax. I think without the constructor, but with the object inside, it could be an abstract or representative object,
    //   and used so that we know Collection(String) is a collection of strings (probably implemented using Data_Value objects).

    // so will this flags field start up OK?
    //  that should be enough to get the flags field there.

    //'init': function(spec) {
    //	this._super(spec);
    //},

    /*

    'init': function(spec) {
        //this._super(spec);
        do_init.call(this, spec);
        // need to respond to flag fields being added and removed.
        //  when a flag gets added, there needs to be the flag's connected function.

        //.flags().selected?
        //.flags('selected');

        // .selected(true); .selected(1);

        // can leave the flags unconnected for the moment, and return to the flags connection so there is
        //  easier syntax and probably faster code.

        // but want it so we know when flags have changed (the collection of flags)?

        // also when any flags' value has changed.

        // can quite simply add and remove flags from an object.
        //  also may pay some attention to a restricted list of flags, where if the flags are not set then we know
        //  the values are false.

        // want to make it easy to deal with flags that correspond to css as well.

    },
    */
    // or an enhanced version of the set function that deals with more input processors?
    //  Or have the supercalssed set function send mack the input processors in parameters.
    //   I think that is the best option.

    '_get_input_processors': function() {
        //throw 'stop';
        return jsgui.input_processors;
    },
    'add_flag': function(flag_name) {
        var flags = this.get('flags');
        //console.log('flags ' + stringify(flags));
        var fields = this.fields();
        //console.log('fields ' + stringify(fields));
        // unfortunate that no fields are found???
        //  should probably be a few.
        if (!flags.has(flag_name)) {
            flags.add(flag_name);
        }
    },
    'remove_flag': function(flag_name) {
        var flags = this.get('flags');
        //console.log('flags ' + stringify(flags));
        //throw 'stop';
        var has_flag = flags.has(flag_name);
        //console.log('has_flag ' + has_flag);

        if (has_flag) {
            flags.remove(flag_name);
            console.log('flags ' + stringify(flags));

            flags = this.get('flags');
            console.log('flags ' + stringify(flags));
            //throw 'stop';
        }

    },
    'has_flag': function(flag_name) {
        var flags = this.get('flags');
        return flags.has(flag_name);
    },

    // copied from Data_Object because Data_Object was not able to deal with collections within itself.
    //  code works, but should make this call data_object code where possible.

    // Candidate for optimization

    //'get': fp(function(a, sig) {
    'get': (function() {
      var a = arguments;
      a.l = arguments.length;
      var sig = get_a_sig(arguments, 1);

        // More difficult to maintain with the separate get code.
        //  Handle specific cases here, otherwise use _super.

        // In some cases, an automatically constructed object, like a control_dom, should have fields.

        // but when nested is in place, is it still working right?
        // also will have to deal with particular output formats.
        //  many controls / data types for the moment will have default output as HTML formatted.
        //console.log('Data_Object get this.__data_type_name ' + this.__data_type_name);
        //console.log('Enhanced_Data_Object get a ' + stringify(a));
        //console.log('Enhanced_Data_Object get sig ' + sig);
        // will also be looking at the output processors.
        //console.log('this.__data_type_name ' + this.__data_type_name);
        //if (is_defined(this.__data_type_name)) {
        if (typeof this.__data_type_name !== 'undefined') {

            // should possibly have this assigned for controls...
            //var raw_input = a;
            //console.log('this.__data_type_name is defined: ' + this.__data_type_name);

            //var parsed_input_obj = jsgui.input_processors[this.__data_type_name](raw_input);
            //this._super.apply(this, a);
            do_get.apply(this, a);

        } else {
            // check to see if there is a field defined.
            if (sig === '[s]') {
                //console.log('get param: ' + a[0]);

                if (!this.fc) this.fc = new Fields_Collection({
                    //
                    //'containing_object': this
                });

                var fc = this.fc;

                //console.log('fc ' + (fc));

                //console.log('fc.get() ' + stringify(fc.get()));
                var field_name = a[0];
                //console.log('field_name ' + field_name);
                //console.log('this.fields() ' + stringify(this.fields()));
                // could have .s in it, making it nested, and have removed nested from here.
                //console.log('pre fc get');
                var field = fc.get(field_name);
                //console.log('EDO field ' + stringify(field));

                if (field_name.indexOf('.') > -1) {

                    //console.log('EDO get has field ' + field_name);

                    // Then we are dealing with a request for a nested object.
                    // Split up the field_name into the various field names for the levels, then have a recursive function here
                    //  process through the levels. Will keep the recursive part small in size and located here.
                    // May not need to even be recursive.
                    var arr_field_names = field_name.split('.');

                    var level = 0, l = arr_field_names.length;
                    var current_obj = this, new_obj, fname;
                    while (level < l) {
                        fname = arr_field_names[level];
                        new_obj = current_obj.get(fname);
                        //console.log('fname ' + fname);

                        // So, when the dom object is obtained, it should have its own fields.
                        //  The 'get' function will need to be modified to return objects of the right type / class.

                        //console.log('new_obj ' + stringify(new_obj));
                        //console.log('current_obj ' + stringify(current_obj));

                        level++;
                        current_obj = new_obj;
                    }
                    return current_obj;
                }

                //console.log('field ' + stringify(field));

                // fields seem to stop having been set up properly.

                //console.log('field ' + (field));


                //console.log('* field_name ' + field_name);
                //console.log('* field ' + stringify(field));


                if (field) {
                    // May not be able to stringify the field object without making an infinite loop / call stack error.
                    //console.log('this._[field_name] ' + stringify(this._[field_name]));
                    //console.log('field_name ' + field_name);
                    // So the DOM attributes were not created properly.




                    if (!this._[field_name]) {
                        //console.log('does not have field already');

                        var sig_field = get_item_sig(field, 20);
                        //console.log('');
                        //console.log('---------------');
                        //console.log('');
                        //console.log('enhanced data_object sig_field ' + stringify(sig_field));
                        //console.log('field ' + stringify(field));

                        //console.log('sig_field ' + sig_field);


                        if (sig_field == '[s,[s,u]]') {
                            // it looks like it has gone wrong.
                            var stack = new Error().stack;
                            console.log(stack);
                        }

                        // ss?
                        // s,s,b
                        //  the last param is the default value???
                        //   not right now.

                        if (sig_field == '[s,s,o]') {
                            var field_name = field[0];
                            var field_type_name = field[1];

                            // default_value?

                            var field_info = field[2];

                            //console.log('field_type_name ' + field_type_name);



                            if (field_type_name == 'collection') {
                                //console.log('lazy loading - creating new collection');
                                this._[field_name] = new jsgui.Collection({
                                    'context': this._context
                                });
                                return this._[field_name];
                            } else {
                                // if it's just a string?
                                if (field_type_name == 'ordered_string_list') {
                                    var osl = new Ordered_String_List();
                                    return this._[field_name] = osl;
                                    //return this._[field_name];
                                } else if (field_type_name == 'string') {
                                    // use a Data_Value?
                                    // Data value with no context?

                                    //var dv = new Data_Value({
                                        //'context': this._context
                                    //});
                                    // Tell the Data_Value it's a string only?
                                    // context?
                                    var dv = new Data_Value({
                                        'context': this._context
                                    });

                                    if (field_info.default) {
                                        dv.set(field_info.default);
                                    }

                                    dv.parent(this);


                                    //dv.set()

                                    return this._[field_name] = dv;

                                    //return this._[field_name];
                                } else {
                                    //console.log('');
                                    //console.log('field_type_name ' + field_type_name);

                                    var default_value = field_info.default;
                                    //console.log('')



                                    //var dtoc = this.mod_link().ensure_data_type_data_object_constructor(field_type_name);
                                    var dtoc = ensure_data_type_data_object_constructor(field_type_name);

                                    var context = this.context;
                                    if (context) {
                                        var field_val = new dtoc({'context': this._context});
                                    } else {
                                        var field_val = new dtoc();
                                    }
                                    if (is_defined(default_value)) {
                                        field_val.set(default_value);
                                    }

                                    //throw 'stop';

                                    field_val.parent(this);
                                    this._[field_name] = field_val;
                                    return this._[field_name];
                                }
                            }

                        } else if (sig_field == '[s,s]') {
                            //console.log('!!!!!');
                            //console.log('field ' + stringify(field));
                            var field_name = field[0];
                            var field_type_name = field[1];

                            //console.log('field_name ' + field_name);
                            //console.log('field_type_name ' + field_type_name);

                            // perhaps getting collection fields should be moved to enhanced_data_object?
                            //  not keen on interdependencies here.

                            if (field_type_name === 'collection') {

                                // lazy creation of fields.

                                //throw 'not supported here. should use code in enhanced-data-object.

                                // So, Collection has been added to jsgui by now.
                                //console.log('pre make coll');

                                // Maybe Collection has not been added to jsgui.
                                //  Need to ensure it does get added when it's getting used.

                                // seems like the Collection object does not get put back on this...
                                //  or at least not always.

                                // looks like we use the module as it is.

                                var coll = new jsgui.Collection({
                                    'context': this._context
                                });

                                //console.log('pre set coll parent');
                                coll.parent(this);

                                this._[field_name] = coll;
                                return this._[field_name];

                            } else if (field_type_name === 'control') {
                                // want to put the control in place basically.
                                //  but it the control is not there, we can't get it.
                                // no lazy loading of controls like for other data items.
                                return undefined;


                            } else if (field_type_name === 'string') {
                                var dv = new Data_Value();
                                dv.parent(this);
                                this._[field_name] = dv;
                            } else {
                                    //

                                // a different function?
                                //  we could look for the input processors?
                                // Then use the input processor to create a Data Object or Data Value.
                                var input_processors;
                                var data_type_info;
                                var module_jsgui = this._module_jsgui;
                                //console.log('module_jsgui ' + module_jsgui);

                                // Need a way to get back to the common jsgui module.


                                if (module_jsgui) {
                                    input_processors = module_jsgui.input_processors;
                                    data_types_info = module_jsgui.data_types_info;

                                    //console.log('data_types_info ' + stringify(data_types_info));

                                    // so we may have the information needed to construct such a Data_Object.

                                    // This needs to be set in various objects.


                                    // Shoudl make be careful to ensure these exist...
                                    //  Need the constructor for the control_dom object.

                                    // Perhaps doing a sub-project on the data system is worth it?
                                    //  Or do that once the basis is working for HTML serving?


                                    // but will we have data object constructors for this yet?
                                    object_constructor = module_jsgui.map_data_type_data_object_constructors[field_type_name];

                                    //console.log('object_constructor ' + stringify(object_constructor));

                                    // ensure_data_type_data_object_constructor
                                    //  that is used where we have the data type definition for that data type.

                                    // and look at the data types object constructors?
                                    //  or data types constructos.
                                    if (object_constructor) {

                                        var obj = new object_constructor({'context': this._context});
                                        obj.parent(this);

                                        this._[field_name] = obj;
                                        return obj;
                                    }


                                    //throw 'stop';
                                };

                            }

                                //console.log('this._ ' + stringify(this._));

                            return this._[field_name];

                        } else if (sig_field === '[s,[s,s]]') {
                            var field_name = field[0];
                            var field_info = field[1];


                            //console.log('field_info ' + stringify(field_info));

                            if (field_info[0] === 'collection') {
                                var collection_type_name = field_info[1];
                                var ncoll = new jsgui.Collection({'context': this._context});
                                ncoll.parent(this);
                                this._[field_name] = ncoll;
                                return this._[field_name];
                            }
                        } else if (sig_field === '[s,[s,o]]') {
                            // [fieldName,['collection', objDef]]

                            // eg field ["entries", ["collection", {"address": "string", "family": "string", "internal": "boolean"}]]
                            // it's a collection?? (check, with the particular data type)

                            var field_name = field[0];
                            var field_info = field[1];
                            var data_type_name = field_info[0];

                            if (data_type_name === 'collection') {
                                var objDef = field_info[1];
                                //throw 'not supported here. should use code in enhanced-data-object.';

                                // Need to do more than this.
                                //  Defining a collection with a specified data type.
                                var ncoll = new jsgui.Collection({'context': this._context});
                                // Specifying a collection constraint as well (perhaps these are fields for the obejcts)
                                //  I think calling it a collection constraint with specified fields for the objects makes
                                //  sense.
                                console.log('objDef ' + stringify(objDef));
                                // will be an object rather than array (for now at least)

                                // Not sure about setting through fields...
                                ncoll.fields(objDef);
                                // that should set the constraint as well.
                                //ncoll.

                                // Specifying fields on a collection.
                                //  Need to say itemFields, as a collection itself could have fields as well as
                                //   items contained? Or the collection's fields apply to each item.



                                //var ncoll = new jsgui.Collection(collection_type_name);
                                if (this._context) ncoll._context = this._context;

                                ncoll.parent(this);
                                this._[field_name] = ncoll;
                                return this._[field_name];
                            }

                        }

                    } else {
                        return this._[field_name];
                    }
                } else {
                    //console.log('this._ ' + stringify(this._));

                    var res = ll_get(this._, a[0]);

                    if (!res) {
                        if (field_name.indexOf('.') > -1) {
                            throw 'not yet handled';
                        } else {
                            res = this[a[0]];
                        }
                    }

                    //console.log('res ' + res);

                    //if (!is_defined(res)) {
                        // No, don't thin we just create a new one. It may need to get overwritten by some other code.



                        //res = new Enhanced_Data_Object({'context': this._context});
                    //}

                    //console.log('property_name ' + property_name);
                    //console.log('res ' + res);
                    return res;
                }
            } else if (a.l === 0) {
                return this._;
            }
        }
    })


});

// Data_Object.extend = function(prop, namespcExtension, propsToMerge) {

Enhanced_Data_Object.extend = function(prop, namespcExtension, propsToMerge) {
    //var res = Data_Object.extend(prop, namespcExtension, propsToMerge);
    var res = Data_Object.extend.call(this, prop, namespcExtension, propsToMerge);
    // but the fields are not going in properly.???
    // quite possibly need to set up the fields (_fields on the Enhanced_Data_Object object.
    // but need to merge the properties from this...
    // but also need to look out for the flags.
    // if in the prop or map_props there is something called 'flags' we need to pay attention.
    //  That will then get put in the prototype (or constructor?)
    /*
    for (var name in prop) {

    }
    */
    if (prop.flags) {
        //res[
        res._flags = prop.flags;
    }
    return res;
}


jsgui.ensure_data_type_data_object_constructor = ensure_data_type_data_object_constructor;

Enhanced_Data_Object.map_data_type_data_object_constructors = Data_Object.map_data_type_data_object_constructors;
Enhanced_Data_Object.Mini_Context = Data_Object.Mini_Context;

Data_Object.set_Enhanced_Data_Object(Enhanced_Data_Object);

Enhanced_Data_Object.register_data_type = register_data_type;

module.exports = Enhanced_Data_Object;

	//return Enhanced_Data_Object;
//});

},{"./data-object":29,"./data-object-fields-collection":28,"./data-value":30,"./jsgui-lang-util":39}],32:[function(require,module,exports){
var jsgui = require('./jsgui-lang-essentials');

var j = jsgui;
var Class = j.Class;
var each = j.each;
var is_array = j.is_array;
var is_dom_node = j.is_dom_node;
var is_ctrl = j.is_ctrl;
var extend = j.extend;
var get_truth_map_from_arr = j.get_truth_map_from_arr;
var get_map_from_arr = j.get_map_from_arr;
var arr_like_to_arr = j.arr_like_to_arr;
var tof = j.tof;
var is_defined = j.is_defined;
var stringify = j.stringify;
var functional_polymorphism = j.functional_polymorphism;
var fp = j.fp;
var arrayify = j.arrayify;
var mapify = j.mapify;
var are_equal = j.are_equal;
var get_item_sig = j.get_item_sig;
var set_vals = j.set_vals;
var truth = j.truth;
var trim_sig_brackets = j.trim_sig_brackets;
var ll_set = j.ll_set;
var ll_get = j.ll_get;
var input_processors = j.input_processors;
var iterate_ancestor_classes = j.iterate_ancestor_classes;
var is_arr_of_arrs = j.is_arr_of_arrs;
var is_arr_of_strs = j.is_arr_of_strs;
var is_arr_of_t = j.is_arr_of_t;
var clone = jsgui.clone;

var Evented_Class = Class.extend({

    // Needs to initialize the bound events to start with.

    'init': function() {
        this._bound_events = {};
    },

    'raise_event': fp(function(a, sig) {

        var that = this;
        var c, l;

        if (sig == '[s]') {
            // just raise an event, given with no parameters,
            //  maybe like 'started'.

            var target = this;
            var event_name = a[0];

            //console.log('Data_Object raise_event ' + event_name);

            var bgh = this._bound_general_handler;
            var be = this._bound_events;

            if (be) {
                // This is attaching events to the same object.
                //  Not sure why, but this needs to be fixed.


                var bei = be[event_name];

                //console.log('bei', bei);
                //console.log('tof bei', tof(bei));
                if (tof(bei) == 'array') {
                    //console.log('1) raise_event bei.length ' + bei.length);
                    var res = [];

                    for (c = 0, l = bei.length; c < l; c++) {
                      res.push(bei[c].call(target));
                    }

                    //console.log('Evented_Class raise_event [s] res', res);
                    return res;
                }// else if (tof(bei) == 'function') {
                //	bei.call(target, target, event_name);
                //}
            }
        }

        if (a.l >= 2) {
            var target = this;
            var event_name = a[0];

            //console.log('event_name ' + event_name);

            var additional_args = [];
            for (c = 1, l = a.l; c < l; c++) {
                additional_args.push(a[c]);
            }

            var be = this._bound_events;
            //console.log('be ' + tof(be));
            if (be) {
                // The controls that are activated on the clients need to have bound events.

                //console.log('event_name', event_name);
                var bei = be[event_name];
                //console.log('bei ', bei);
                if (tof(bei) == 'array') {
                    //console.log('1) raise_event bei.length ' + bei.length);

                    if (bei.length > 0) {
                        var res = [];

                        // They are handlers that get called.

                        for (c = 0, l = bei.length; c < l; c++) {
                          if (bei[c]) res.push(bei[c].apply(target, additional_args));

                        }

                        return res;
                    } else {
                        return false;
                    }


                    //console.log('2) raised the bound events');
                }
                // Or if it's just a function?

            }

        }

        if (sig == '[s,o]') {
            var be = this._bound_events;
            //console.log('this._bound_events', this._bound_events);
            if (be) {
                var bei = be[event_name];

                //console.log('bei.length', bei.length);
                //console.log('tof bei', tof(bei));
                if (tof(bei) == 'array') {
                    //console.log('1) raise_event bei.length ' + bei.length);
                    var res = [];

                    for (c = 0, l = bei.length; c < l; c++) {
                      res.push(bei[c].call(target, a[1]));
                    }

                    //each(bei, function(i, v) {
                    //    res.push(v.call(target, a[1]));
                    //});

                    //console.log('Evented_Class raise_event [s] res', res);
                    return res;
                }
            }
        }

        return [];
    }),

    // also just raise and trigger?

    //'raise': function() {
    //    return this.raise_event.apply(this, arguments);
  //},
    //'trigger': function() {
    //    return this.raise_event.apply(this, arguments);
    //},


    'add_event_listener' : fp(function(a, sig) {

        // event listener for all events...
        //  that could work with delegation, and then when the code finds the event it interprets it.
        //console.log('');
        //console.log('data_object add_event_listener sig ' + sig);

        // Why is this getting called so many times, for the same object?



        //console.log('');
        // Why is the bound events array getting so big?

        if (sig == '[f]') {
            var stack = new Error().stack;
            console.log(stack);
            throw 'stop';
            this._bound_general_handler = this._bound_general_handler || [];
            if (Array.isArray(this._bound_general_handler)) {
            //if (tof(this._bound_general_handler) == 'array') {
                this._bound_general_handler.push(a[0]);
            };
        }
        // Why does a change event listener get bound to the wrong control, or bound multiple times?
        //  Changes getting pushed up through the tree?


        if (sig == '[s,f]') {
            // bound to a particular event name

            // want the general triggering functions to be done too.
            //  with a different function
            var event_name = a[0], fn_listener = a[1];
            //console.log('event_name ' + event_name);
            this._bound_events = this._bound_events || {};

            // removing from a bound general handler being slow?
            //  perhaps... but we won't have so many of these anyway.
            //  could get id for object and have it within collection.
            //   But not sure about using collections for events... collections use events...?

            // Different controls binding to the same array of events?

            if (!this._bound_events[event_name]) this._bound_events[event_name] = [];

            var bei = this._bound_events[event_name];
            //console.log('this._id() ' + this._id());
            if (Array.isArray(bei)) {
            //if (tof(bei) == 'array') {
                //console.log('this', this);
                //console.log('add_event_listener bei.length ' + bei.length);
                bei.push(fn_listener);
            };
        }

    }),

    // A way of proxying functions below?
    //  Or simply use function alias?
    'on': function() {
        // However, need to make use of some document events.
        //  With some controls, we need to pass through

        return this.add_event_listener.apply(this, arguments);


    },

    'remove_event_listener': function(event_name, fn_listener) {
        // needs to go through the whole array?
        // think so....

        //console.log('remove_event_listener');
        //console.log('this._bound_events', this._bound_events);
        if (this._bound_events) {
            //console.log('event_name', event_name);
            var bei = this._bound_events[event_name] || [];

            //var tbei = tof(bei);
            //console.log('tbei', tbei);

            if (Array.isArray(bei)) {
                // bei.push(fn_listener);

                var c = 0, l = bei.length, found = false;

                //console.log('l', l);

                while (!found && c < l) {
                    if (bei[c] === fn_listener) {
                        found = true;
                    } else {
                        c++;
                    }
                }
                //console.log('found', found);
                //console.log('c', c);
                if (found) {
                    bei.splice(c, 1);
                }
            };
        }


    },

    'off': function() {
        // However, need to make use of some document events.
        //  With some controls, we need to pass through

        return this.remove_event_listener.apply(this, arguments);

    },
    'one': function(event_name, fn_handler) {

        var inner_handler = function(e) {

            fn_handler.call(this, e);
            this.off(event_name, inner_handler);
        };

        this.on(event_name, inner_handler);
    }
});

var p = Evented_Class.prototype;
p.raise = p.raise_event;
p.trigger = p.raise_event;

module.exports = Evented_Class;

},{"./jsgui-lang-essentials":38}],33:[function(require,module,exports){


/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


// May sway implementations of the particular items more easily when they are in their own files.

define(["./jsgui-lang-essentials", "./jsgui-data-structures-stiffarray"], function (jsgui, StiffArray) {
*/

var jsgui = require('./jsgui-lang-essentials');
var StiffArray = require('./jsgui-data-structures-stiffarray');

    /** 
    * B+ Tree module.
    * @module core/jsgui-data-structures-b-plus-tree
    * @exports core/jsgui-data-structures-b-plus-tree
    */

    // B+ Tree

    // some B+ Tree description can be found here:
    // http://www.cs.berkeley.edu/~kamil/teaching/su02/080802.pdf
    // http://baze.fri.uni-lj.si/dokumenti/B+%20Trees.pdf


    // sample tree classic presentation:
    //
    //	              [] 7 []
    //	              /     \
    //	             /       -----------------
    //	            /                         \
    //	           /                           \
    //	     [] 3 [] 5 []                  [] 8 [] 8 []
    //	     /    |     \                  /     \    \
    //	    /     |      \                /       |    ----
    //     /      |       \              /         \       \
    //  {1,2}   {3,4}    {5,6,7}      {8,8,8}    {8,8}    {8,9}
    //
    //   the diagram notation:
    //   numbers are "keys" array items
    //   "[]" figures are "children" array items


    // sample tree toText() presentation:
    //
    //	      {1,2}
    //	    3
    //	      {3,4}
    //	    5
    //	      {5,6,7}
    //  7
    //	      {8,8,8}
    //	    8
    //	      {8,8}
    //	    8
    //	      {8,9}


    // sample tree toString() presentation:
    //
    // {{{1,2}3{3,4}5{5,6,7}}7{{8,8,8}8{8,8}8{8,9}}}


    // some remarks:
    //
    //  children.length == keys.length + 1
    //
    //  (max children[i] key) <= (keys[i]) <= (min children[i+1] key)
    //
    //  the node overflow threshold referred somewhere as "node order" is referred as "node capacity" here


    // -----------------------------------------
    //
    //	              global variables:
    //
    // -----------------------------------------

    //var B_Plus_Tree_NextNodeDebugId = 1;
    // uncomment the line above to include unique node IDs 
    // to the toString() and toTest() output

    // -----------------------------------------
    //
    //	              B_Plus_Node:
    //
    // -----------------------------------------

    // Likely to get this into the core, and do some more polymorphic optimization to reduce file size.
    //  One various things are running, I will focus on some code size optimizations to bring things down to really small sizes when used in
    //  conjunction with Essentials.

    // Not sure about the B+ tree making use of Collections but with no indexing?
    //  I think by making Collection really flexible, and a version that mixes in other functionality to a more basic one,
    //  it would be possible to make the B+ tree use a Collection with StiffArray capabilities.
    //   Not worth it right now. Keep StiffArray as a low level component used for the tree. Maybe move it out of its own JavaScript file, not sure it
    //    will be used for that much else. Not sure, could be good for when binary searches are required.








    // B+ tree index node:

    var B_Plus_Node = function (nodeCapacity) {

        // -----------------------------------------
        //              public interface:
        // -----------------------------------------

        var m_public = {
            isLeaf: false,
            parent: null,
            keys: new StiffArray(nodeCapacity + 1),     // +1: to allow temporary owerflow
            children: new StiffArray(nodeCapacity + 2) // +2: children.length == keys.length + 1
        };

        // -----------------------------------------
        //                  debug ID:
        // -----------------------------------------

        //if (typeof (B_Plus_Tree_NextNodeDebugId) != "undefined") m_public.debugId = B_Plus_Tree_NextNodeDebugId++;

        // -----------------------------------------
        //       return the public interface:
        // -----------------------------------------

        return m_public;
    };

    // -----------------------------------------
    //
    //	              B_Plus_Leaf:
    //
    // -----------------------------------------

    // B+ tree leaf node:

    var B_Plus_Leaf = function (nodeCapacity) {

        // -----------------------------------------
        //              public interface:
        // -----------------------------------------

        var m_public = {
            isLeaf: true,
            parent: null,
            keys: new StiffArray(nodeCapacity + 1),
            values: new StiffArray(nodeCapacity + 1),
            //
            // leafs chain:
            prevLeaf: null,
            nextLeaf: null
        };

        // -----------------------------------------
        //                  debug ID:
        // -----------------------------------------

        //if (typeof(B_Plus_Tree_NextNodeDebugId) != "undefined") m_public.debugId = B_Plus_Tree_NextNodeDebugId++;

        // -----------------------------------------
        //       return the public interface:
        // -----------------------------------------

        return m_public;
    };


    // -----------------------------------------
    //
    //	              B_Plus_Tree:
    //
    // -----------------------------------------

    // B+ tree:

    // Using Crockford's Module Pattern.
    //  Need to be careful about how it is not initialized with a constructor and the 'new' keyword.

    /**
    *
    * @constructor
    * @classdesc
    *
    * This class is used for the findFirst/findNext iteration pattern:
    * - findFirst() gets the search criteria, finds the first item, store the search state to FindInfo
    * (including the criteria, found item, and all other related information), and returns the FindInfo.
    * - the client process the found item (from the returned FindInfo), and calls findNext() passing the FindInfo.
    * - findNext() uses the search state from FindInfo to find next item, updates the search state, and returns the updated FindInfo.
    * - the client process the found item, and calls findNext() again and again - until null will be returned.
    *
    * The FindInfo() constructor is intended for internal use only. You should call findFirst(), findNext(), findLast() etc. to get the FindInfo object.
    *
    * @--param {*} key
    * @--param {*} value
    * @--param {boolean} isPrefixSearch
    * @memberof module:core/jsgui-data-structures-b-plus-tree
    * 
    * @example
    * 
    *     // get all the key/value pairs:
    * 
    *     var findInfo = tree.findFirst();
    *     while (findInfo !== null) {
    *       console.log("key=" + findInfo.foundKey() + " value=" + findInfo.foundValue());
    *       findInfo = tree.findNext(findInfo);
    *     }
    * 
    * 
    *     // get all the key/value pairs in reverse order:
    * 
    *     var findInfo = tree.findLast();
    *     while (findInfo !== null) {
    *       console.log("key=" + findInfo.foundKey() + " value=" + findInfo.foundValue());
    *       findInfo = tree.findPrevious(findInfo);
    *     }
    * 
    * 
    *     // get all the values for "010" key:
    * 
    *     var findInfo = tree.findFirst("010");
    *     while (findInfo !== null) {
    *       console.log("key=" + findInfo.foundKey() + " value=" + findInfo.foundValue());
    *       findInfo = tree.findNext(findInfo);
    *     }
    * 
    * 
    *     // get all the key/value pairs prefixed by "01" in reverse order:
    * 
    *     var findInfo = tree.findLastPrefix("01");
    *     while (findInfo !== null) {
    *       console.log("key=" + findInfo.foundKey() + " value=" + findInfo.foundValue());
    *       findInfo = tree.findPrevious(findInfo);
    *     }
    * 
    * 
    * 
    */

    var FindInfo = function (key, value, isPrefixSearch) {
        isPrefixSearch = !!isPrefixSearch;
        var isKeyPresent = (key != undefined);
        var isValuePresent = (value != undefined);
        var prefixLength = 0;
        if (isPrefixSearch) {
            if (typeof (key) != "string") {
                isPrefixSearch = false;
            } else {
                prefixLength = key.length;
            }
        }
        //
        return {
            /* * 
            * key to find (if present)
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            key: key,     // key to find (if present)
            /* * 
            * value to find (if present)
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            value: value, // value to find (if present)
            /* * 
            * prefix search mode
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            isPrefixSearch: isPrefixSearch, // prefix search mode
            /* * 
            * found leaf
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            leaf: null,   // found leaf
            /* * 
            * found leaf item index
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            index: -1,    // found leaf item index
            /* * 
            * is the search criteria contains key
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            isKeyPresent: isKeyPresent, // function () { return this.key !== undefined; }, // is the search criteria contains key
            /* * 
            * is the search criteria contains value
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            isValuePresent: isValuePresent, // function () { return this.value !== undefined; }, // is the search criteria contains value
            /** 
            * found items's key
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            foundKey: function () { return this.leaf.keys.items[this.index]; }, // found items's key
            /** 
            * found item's value
            * @memberof module:core/jsgui-data-structures-b-plus-tree.FindInfo.prototype 
            */
            foundValue: function () { return this.leaf.values.items[this.index]; }, // found item's value
            //
            prefix_length: prefixLength, // prefix length
            check_prefix: function () {  // check the current key to match the prefix
                if (!isPrefixSearch) return false;
                if (this.index >= this.leaf.keys.count) return false;
                var keyToCheck = this.foundKey();
                if (this.prefix_length > keyToCheck.length) return false;
                return (keyToCheck.substr(0, this.prefix_length) == this.key)
            }
        };
    };



    var B_Plus_Tree = function (nodeCapacity) {

        // -----------------------------------------
        //            arguments processing:
        // -----------------------------------------

        if (nodeCapacity === undefined) nodeCapacity = 10;
        if (nodeCapacity < 4) throw "B_Plus_Tree(): node capacity must be >= 4";

        // -----------------------------------------
        //              public interface:
        // -----------------------------------------

        /**
        * Creates the B+ Tree.
        * @constructor
        * @classdesc 
        *
        * B+ Tree
        *
        * some B+ Tree description can be found here:
        *
        * {@link http://www.cs.berkeley.edu/~kamil/teaching/su02/080802.pdf}
        *
        * {@link http://baze.fri.uni-lj.si/dokumenti/B+%20Trees.pdf}
        *
        * sample tree classic presentation:
        *
        * <pre>
        * <code>
        *                 [] 7 []
        *                 /     \
        *                /       -----------------
        *               /                         \
        *              /                           \
        *        [] 3 [] 5 []                  [] 8 [] 8 []
        *        /    |     \                  /     \    \
        *       /     |      \                /       |    ----
        *      /      |       \              /         \       \
        *   {1,2}   {3,4}    {5,6,7}      {8,8,8}    {8,8}    {8,9}
        * </code>
        * </pre>
        *
        *   the diagram notation:
        *  - numbers are "keys" array items
        *  - "[]" figures are "children" array items
        *
        * @alias B_Plus_Tree
        * @param {number} [nodeCapacity=10] - tree node capacity (maximum possible number of items in each node).
        * @memberof  module:core/jsgui-data-structures-b-plus-tree
        * @example
        *
        * var tree = new B_Plus_Tree();
        */


        var m_public = {
            /** 
            * the tree root node
            * @type {B_Plus_Node|B_Plus_Leaf}
            * @instance
            */
            // tree root:
            root: new B_Plus_Leaf(nodeCapacity),
            //
            /** 
            * first leaf in the "all leaves" chain
            * @type {B_Plus_Leaf}
            * @instance
            */
            // leafs chain:
            firstLeaf: null,
            //
            /** 
            * last leaf in the "all leaves" chain
            * @type {B_Plus_Leaf}
            * @instance
            */
            lastLeaf: null,
            //
            // ---------------------
            //     editing:
            // ---------------------
            //
            /** 
            * clear the tree (remove all items)
            * @func
            * @instance
            */
            // clear the tree:
            clear: function () {
                p_Clear();
            },
            //

            /** 
            * insert key and value
            * @name insert
            * @func
            * @variation 1
            * @param {*} key
            * @param {*} value
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            * insert key and value: key is arr[0], value is arr[1]; i.e. `insert([key, value])`
            * @func
            * @variation 2
            * @param {array} arr
            * @instance
            */

            // insert(key, value)
            // insert([key, value])
            insert: function (key, value) {
                if (arguments.length == 2) {
                    return p_Insert(key, value);
                } else {
                    return p_Insert(key[0], key[1]);
                }
            },
            //

            /** 
            * remove all values with given key
            * @name remove
            * @func
            * @param {*} key
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            * remove one value occurrence
            * @func
            * @param {*} key
            * @param {*} value
            * @instance
            */


            // remove(key) - remove all values with given key
            // remove(key, value) - remove one value occurrence
            remove: function (key, value) {
                if (arguments.length == 2) {
                    return p_Remove(key, value);
                } else {
                    p_RemoveKey(key);
                }
            },
            //
            // ---------------------
            //       finding:
            // ---------------------
            //

            /** 
            * find the very first item
            * @func
            * @name findFirst
            * @variation 1
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            * find the first item for the given key
            * @func
            * @name findFirst
            * @variation 2
            * @param {*} key
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            * find the first key+value occurrence
            * @func
            * @name findFirst
            * @variation 3
            * @param {*} key
            * @param {*} value
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            // findFirst() - find the very first item
            // findFirst(key) - find the first item for the given key
            // findFirst(key, value) - find the first key+value occurrence
            //
            // returns the FindInfo object:
            //    key: key,     // key to find (if present)
            //    value: value, // value to find (if present)
            //
            //    leaf: null,   // the current found leaf
            //    index: -1,    // the current found index
            //
            //    foundKey():   // the current found key
            //    foundValue(): // the current found value
            //
            findFirst: function (key, value) {
                return p_FindFirst(key, value);
            },
            //
            /** 
            * find first key matching the prefix
            * @func
            * @param {string} prefix
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */
            // find first key matching the prefix:
            findFirstPrefix: function (prefix) {
                return p_FindFirst(prefix, undefined, true);
            },
            //
            /** 
            * find next search conditions occurence
            * @func
            * @param {module:core/jsgui-data-structures-b-plus-tree.FindInfo} findInfo
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */
            // find next search conditions occurence
            findNext: function (findInfo) {
                return p_FindNext(findInfo);
            },

            /** 
            * find the very last item
            * @func
            * @name findLast
            * @variation 1
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            * find the last item for the given key
            * @func
            * @name findLast
            * @variation 2
            * @param {*} key
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            *  find the last key+value occurrence
            * @func
            * @name findLast
            * @variation 3
            * @param {*} key
            * @param {*} value
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */


            //
            // findLast() - find the very last item
            // findLast(key) - find the last item for the given key
            // findLast(key, value) - find the last key+value occurrence
            findLast: function (key, value) {
                return p_FindLast(key, value);
            },
            //
            /** 
            * find last key matching the prefix
            * @func
            * @param {string} prefix
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */
            // find last key matching the prefix:
            findLastPrefix: function (prefix) {
                return p_FindLast(prefix, undefined, true);
            },
            //
            /** 
            * find previous search conditions occurence
            * @func
            * @param {module:core/jsgui-data-structures-b-plus-tree.FindInfo} findInfo
            * @returns {module:core/jsgui-data-structures-b-plus-tree.FindInfo} - find info
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */
            // find previous search conditions occurence
            findPrevious: function (findInfo) {
                return p_FindPrev(findInfo);
            },
            //
            // ---------------------
            // dictionary-like usage:
            // ---------------------
            //
            /** 
            * get one value by key (or null if the key not found)
            *
            * [getValue()]{@link module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree#getValue} and [setValue()]{@link module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree#setValue} methods pair provides a dictionary-like usage pattern.
            *
            * @func
            * @param {*} key
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.setValue(101, "value 101");
            * tree.setValue(101, "value 101.2");
            *
            * tree.getValue(101) // "value 101.2"
            * tree.getValue(102) // null
            *
            */
            // get one value by key (or null):
            getValue: function (key) {
                return p_GetValue(key);
            },
            /** 
            * set one value by key (insert or update)
            *
            * [getValue()]{@link module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree#getValue} and [setValue()]{@link module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree#setValue} methods pair provides a dictionary-like usage pattern.
            *
            * @func
            * @param {*} key
            * @param {*} value
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.setValue(101, "value 101");   // insert
            * tree.setValue(101, "value 101.2"); // update
            *
            * tree.getValue(101) // "value 101.2"
            * tree.getValue(102) // null
            *
            */
            // set one value by key (insert or update):
            setValue: function (key, value) {
                p_SetValue(key, value);
            },
            //
            //
            // ---------------------
            //   other functions:
            // ---------------------
            //

            /** 
            * count all values
            * @name count
            * @func
            * @variation 1
            * @instance
            * @memberof module:core/jsgui-data-structures-b-plus-tree.B_Plus_Tree
            */

            /** 
            * count values with the given key
            * @func
            * @variation 2
            * @param {*} key
            * @instance
            */

            // count() - count all values
            // count(key) - count values with the given key
            count: function (key) {
                if (arguments.length == 1) {
                    return p_CountKey(key);
                } else {
                    return p_Count();
                }
            },
            //

            /** 
            * returns the tree nodes capacity (also referred somewhere as "node order")
            * @func
            * @instance
            */
            // tree capacity:
            getCapacity: function () {
                return m_nodeMaxCount;
            },
            //
            // ---------------------
            // additional functions:
            // ---------------------
            //
            /** 
            * iterate through each key + value pair<br />
            * callback is `function(key, value)`
            * @func
            * @param {function} callback
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.insert(101, "value 101");
            * tree.insert(102, "value 102");
            * tree.insert(103, "value 103");
            * //
            * tree.each(function(key, value) {
            *   console.log("key=" + key + " value=" + value);
            * });
            *
            */
            // iterate through each key + value pair
            // callback is function(key, value)
            'each': function (callback) {
                return p_each(callback);
            },
            //
            /** 
            * get all keys
            * @func
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.insert(101, "value 101");
            * tree.insert(102, "value 102");
            * tree.insert(103, "value 103");
            * //
            * console.log(tree.keys()); // 101,102,103
            *
            */
            // get all keys
            'keys': function () {
                return p_keys();
            },
            //
            /** 
            * get all [key, value] pairs
            * @func
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.insert(101, "value 101");
            * tree.insert(102, "value 102");
            * tree.insert(103, "value 103");
            * //
            * console.log(tree.keys_and_values()); // [101,"value 101"],[102,"value 102"],[103,"value 103"]
            *
            */
            // get all [key, value] pairs
            'keys_and_values': function () {
                return p_keys_and_values();
            },
            //
            //
            /** 
            * get keys and values by prefix
            * @func
            * @param {string} prefix
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.insert("111", "value 111");
            * tree.insert("122", "value 122");
            * tree.insert("123", "value 123");
            * //
            * console.log(tree.get_by_prefix("12")); // ["122","value 122"],["123","value 123"]
            *
            */
            // get keys and values by prefix
            'get_by_prefix': function (prefix) {
                return p_get_by_prefix(prefix);
            },
            //
            /** 
            * get keys by prefix
            * @func
            * @param {string} prefix
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.insert("111", "value 111");
            * tree.insert("122", "value 122");
            * tree.insert("123", "value 123");
            * //
            * console.log(tree.get_keys_by_prefix("12")); // "122","123"
            *
            */
            // get keys by prefix
            'get_keys_by_prefix': function (prefix) {
                return p_get_keys_by_prefix(prefix);
            },
            //
            /** 
            * get values related to the passed key
            * @func
            * @param {*} key
            * @instance
            * @example
            *
            * var tree = new B_Plus_Tree();
            * //
            * tree.insert("101", "value 101");
            * tree.insert("102", "value 102.1");
            * tree.insert("102", "value 102.2");
            * //
            * console.log(tree.get_values_by_key("102")); // "value 102.1","value 102.2"
            *
            */
            // get values at key...
            'get_values_by_key': function (key) {
                return p_get_values_by_key(key);
            }
        };

        // -----------------------------------------
        //              initialization:
        // -----------------------------------------

        m_public.firstLeaf = m_public.root;
        m_public.lastLeaf = m_public.root;

        // -----------------------------------------
        //              private variables:
        // -----------------------------------------

        var m_nodeMaxCount = nodeCapacity;
        var m_nodeMinCount = Math.floor(m_nodeMaxCount / 2);

        // -----------------------------------------
        //                 clear():
        // -----------------------------------------

        // clear the tree
        // (just create new empty root)
        var p_Clear = function () {
            m_public.root = new B_Plus_Leaf(m_nodeMaxCount);
            m_public.firstLeaf = m_public.root;
            m_public.lastLeaf = m_public.root;
        };

        // -----------------------------------------
        //                iterations:
        // -----------------------------------------

        var p_keys = function () {
            var res = [];
            _p_each_key(function (key) {
                res.push(key);
            });
            return res;
        }

        var p_keys_and_values = function () {
            var res = [];
            p_each(function (key, value) {
                res.push([key, value]);
            });
            return res;
        }

        var _p_each_key = function (callback) {
            var findInfo = p_FindFirst();
            while (findInfo != null) {
                var fk = findInfo.foundKey();
                callback(fk);
                findInfo = p_FindNext(findInfo);
            }
        }

        var p_each = function (callback) {
            var findInfo = p_FindFirst();

            var doStop = false;
            

            while (findInfo != null) {
                //var stop = 
                //console.log('doStop ' + doStop);
                var fk = findInfo.foundKey();
                var fv = findInfo.foundValue();
                // callback with the key and the value
                callback(fk, fv, function() {
                    //throw 'stop';
                    //console.log('stop!!!');
                    doStop = true;
                });
                //console.log('2) doStop ' + doStop);
                if (doStop) {
                    findInfo = null;
                } else {
                    findInfo = p_FindNext(findInfo);
                }
                
            }
        }

        // -----------------------------------------
        //                insert():
        // -----------------------------------------

        // insert (key, value) item to the tree
        var p_Insert = function (key, value) {
            //
            // search leaf to insert:
            var searchResult = searchLeaf(key);
            var leaf = searchResult.node;
            //
            // insert to the leaf:
            leaf.keys.insert(searchResult.index, key);
            leaf.values.insert(searchResult.index, value);
            //
            // if overflow:
            if (leaf.keys.count > m_nodeMaxCount) {
                if ((leaf.prevLeaf != null) && (leaf.prevLeaf.keys.count < m_nodeMaxCount) && (leaf.prevLeaf.parent == leaf.parent)) {
                    rotateAmongLeavesToLeft(leaf.prevLeaf, leaf);
                } else if ((leaf.nextLeaf != null) && (leaf.nextLeaf.keys.count < m_nodeMaxCount) && (leaf.nextLeaf.parent == leaf.parent)) {
                    rotateAmongLeavesToRight(leaf, leaf.nextLeaf);
                } else {
                    splitLeaf(leaf);
                }
            }
        };

        // split leaf to 2 leaves
        // (create right sibling)
        var splitLeaf = function (leaf) {
            var leftCount = m_nodeMinCount;
            var rightCount = leaf.keys.count - leftCount;
            //
            // create right leaf:
            var newRightLeaf = new B_Plus_Leaf(m_nodeMaxCount);
            newRightLeaf.parent = leaf.parent;
            //
            // copy to the right:
            newRightLeaf.keys.copy_from(leaf.keys, leftCount, rightCount);
            newRightLeaf.values.copy_from(leaf.values, leftCount, rightCount);
            //
            // update the left:
            leaf.keys.count = leftCount;
            leaf.values.count = leftCount;
            //
            // update leafs chain:
            newRightLeaf.nextLeaf = leaf.nextLeaf;
            if (newRightLeaf.nextLeaf != null) newRightLeaf.nextLeaf.prevLeaf = newRightLeaf;
            newRightLeaf.prevLeaf = leaf;
            leaf.nextLeaf = newRightLeaf;
            if (m_public.lastLeaf == leaf) m_public.lastLeaf = newRightLeaf;
            //
            // update parent:
            if (leaf.parent != null) {
                var leafIndex = calcChildIndex(leaf.parent, leaf);
                insertToParent(leaf.parent, newRightLeaf, newRightLeaf.keys.first(), leafIndex + 1);
            } else {
                createNewRoot(leaf, newRightLeaf, newRightLeaf.keys.first());
            }
        };

        // create new root
        var createNewRoot = function (nodeLeft, nodeRight, key) {
            // create new root containing nodeLeft and nodeRight children
            // btw nodeLeft and nodeRight can be leaves
            //
            // create the root node:
            var newRoot = new B_Plus_Node(m_nodeMaxCount);
            newRoot.keys.add(key);
            newRoot.children.add(nodeLeft);
            newRoot.children.add(nodeRight);
            //
            // update parent references:
            nodeLeft.parent = newRoot;
            nodeRight.parent = newRoot;
            //
            // update root reference:
            m_public.root = newRoot;
        };

        // insert newChildNode with key newChildFirstKey into the parentNode
        // the newChildNode inserts into the newChildIndex position in the children
        var insertToParent = function (parentNode, newChildNode, newChildFirstKey, newChildIndex) {
            //
            // insert child info:
            parentNode.keys.insert(newChildIndex - 1, newChildFirstKey); // -1: the related key is "before" the child
            parentNode.children.insert(newChildIndex, newChildNode);
            //
            // update parent reference:
            newChildNode.parent = parentNode;
            //
            // update parent if overflow:
            if (parentNode.keys.count > m_nodeMaxCount) {
                splitNode(parentNode);
            }
        };

        // split the overflowed node into 2 nodes
        var splitNode = function (node) {
            // split node: create right sibling
            //
            var newLeftCount = m_nodeMinCount;
            var newRightCount = m_nodeMaxCount - newLeftCount;
            var middleKey = node.keys.items[newLeftCount]; // key to move up
            //
            // create right node:
            var newRightNode = new B_Plus_Node(m_nodeMaxCount);
            newRightNode.keys.copy_from(node.keys, newLeftCount + 1, newRightCount);
            newRightNode.children.copy_from(node.children, newLeftCount + 1, newRightCount + 1);
            //
            // update the node:
            node.keys.count = newLeftCount;
            node.children.count = newLeftCount + 1;
            //
            // update children's parent:
            for (var i = 0; i < newRightNode.children.count; i++) newRightNode.children.items[i].parent = newRightNode;
            //
            // update parent:
            if (node.parent == null) {
                createNewRoot(node, newRightNode, middleKey);
            } else {
                var nodeIndex = calcChildIndex(node.parent, node);
                insertToParent(node.parent, newRightNode, middleKey, nodeIndex + 1);
            }
        };

        // -----------------------------------------
        //                remove():
        // -----------------------------------------

        // remove (key, value) item from the tree
        var p_Remove = function (key, value) {
            var searchResult = searchLeafValue(key, value);
            if (!searchResult.found) return false;
            //
            removeFromLeaf(searchResult.node, searchResult.index);
            return true;
        };

        // remove all the items with given key
        var p_RemoveKey = function (key) {
            while (true) {
                var searchResult = searchLeaf(key);
                if (!searchResult.found) break;
                //
                removeFromLeaf(searchResult.node, searchResult.index);
            }
        };

        // remove the item from index position of the leaf
        var removeFromLeaf = function (leaf, index) {
            leaf.keys.removeAt(index);
            leaf.values.removeAt(index);
            //
            // the item is removed; then update the tree if the leaf is underflowed:
            if (leaf.keys.count < m_nodeMinCount) {
                if ((leaf.prevLeaf != null) && (leaf.parent == leaf.prevLeaf.parent) && (leaf.prevLeaf.keys.count > m_nodeMinCount)) {
                    rotateAmongLeavesToRight(leaf.prevLeaf, leaf);
                } else if ((leaf.nextLeaf != null) && (leaf.parent == leaf.nextLeaf.parent) && (leaf.nextLeaf.keys.count > m_nodeMinCount)) {
                    rotateAmongLeavesToLeft(leaf, leaf.nextLeaf);
                } else {
                    mergeLeaf(leaf);
                }
            }
            return true;
        };

        // merge the underflowed leaf with left or right sibling 
        var mergeLeaf = function (leaf) {
            // if the leaf is root, then underflow is allowed:
            if (leaf.parent == null) {
                return;
            }
            //
            // calculate keys count in left and right sibling:
            var leftCount = m_nodeMaxCount + 1;
            var rightCount = m_nodeMaxCount + 1;
            if ((leaf.prevLeaf != null) && (leaf.prevLeaf.parent == leaf.parent)) {
                leftCount = leaf.prevLeaf.keys.count;
            }
            if ((leaf.nextLeaf != null) && (leaf.nextLeaf.parent == leaf.parent)) {
                rightCount = leaf.nextLeaf.keys.count;
            }
            //
            // select sibling to merge:
            if (leftCount < rightCount) {
                if (leftCount + leaf.keys.count > m_nodeMaxCount) throw "B_Plus_Tree.mergeLeaf(): leftCount";
                mergeLeaves(leaf.prevLeaf, leaf);
            } else {
                if (rightCount + leaf.keys.count > m_nodeMaxCount) throw "B_Plus_Tree.mergeLeaf(): rightCount";
                mergeLeaves(leaf, leaf.nextLeaf);
            }
        };

        // merge 2 leaf nodes: leafLeft and leafRight
        var mergeLeaves = function (leafLeft, leafRight) { // merge (left + right) -> left
            //
            // add right to left:
            leafLeft.keys.add_from(leafRight.keys);
            leafLeft.values.add_from(leafRight.values);
            //
            // update leafs chain:
            leafLeft.nextLeaf = leafRight.nextLeaf;
            if (leafLeft.nextLeaf != null) leafLeft.nextLeaf.prevLeaf = leafLeft;
            if (m_public.lastLeaf == leafRight) m_public.lastLeaf = leafLeft;
            //
            // remove right from parent:
            var parent = leafRight.parent;
            var leafRightIndex = calcChildIndex(parent, leafRight);
            parent.keys.removeAt(leafRightIndex - 1);
            parent.children.removeAt(leafRightIndex);
            //
            // update parent if underflow:
            if (parent.keys.count < m_nodeMinCount) {
                mergeNode(parent);
            };
        };

        // fix underflower index (non-leaf) node:
        // rotate among sibling, or merge with sibling
        var mergeNode = function (node) { // merge the node with sibling
            var parent = node.parent;
            //
            // remove root if the node became empty root:
            if (node.parent == null) {
                if (node.keys.count == 0) {
                    m_public.root = node.children.items[0];
                    m_public.root.parent = null;
                }
                return;
            }
            //
            // find left and right siblings:
            var nodeIndex = calcChildIndex(parent, node);
            var leftSibling = (nodeIndex > 0) ? parent.children.items[nodeIndex - 1] : null;
            var rightSibling = ((nodeIndex + 1) < parent.children.count) ? parent.children.items[nodeIndex + 1] : null;
            //
            // try rotation:
            if ((leftSibling != null) && (leftSibling.keys.count > m_nodeMinCount)) {
                rotateAmongNodesToRight(leftSibling, node);
                return;
            }
            if ((rightSibling != null) && (rightSibling.keys.count > m_nodeMinCount)) {
                rotateAmongNodesToLeft(node, rightSibling);
                return;
            }
            //
            // calculate siblings key count:
            var leftCount = m_nodeMaxCount + 1;
            var rightCount = m_nodeMaxCount + 1;
            if (leftSibling != null) {
                leftCount = leftSibling.keys.count;
            }
            if (rightSibling != null) {
                rightCount = rightSibling.keys.count;
            }
            //
            // select sibling to merge:
            if (leftCount < rightCount) {
                if (leftSibling == null) throw "B_Plus_Tree.mergeNode(): leftSibling";
                mergeNodes(leftSibling, node, nodeIndex);
            } else {
                if (rightSibling == null) throw "B_Plus_Tree.mergeNode(): rightSibling";
                mergeNodes(node, rightSibling, nodeIndex + 1);
            }
        };

        // merge 2 index (non-leaf) nodes nodeLeft and nodeRight into one node
        // the nodeRightIndex is the nodeRight index in parent's children array;
        // the nodeRightIndex is known in caller, so it's not needed to calculate it here
        var mergeNodes = function (nodeLeft, nodeRight, nodeRightIndex) { // merge (left + right) -> left
            var parent = nodeLeft.parent;
            //
            // update right children parent:
            for (var i = 0; i < nodeRight.children.count; i++) nodeRight.children.items[i].parent = nodeLeft;
            //
            // move down key from parent:
            nodeLeft.keys.add(nodeLeft.parent.keys.items[nodeRightIndex - 1]);
            //
            // add right to left:
            nodeLeft.keys.add_from(nodeRight.keys);
            nodeLeft.children.add_from(nodeRight.children);
            //
            // remove right from parent:
            parent.keys.removeAt(nodeRightIndex - 1);
            parent.children.removeAt(nodeRightIndex);
            //
            // update parent if underflow:
            if (parent.keys.count < m_nodeMinCount) {
                mergeNode(parent);
            };
        };


        // -----------------------------------------
        //          findFirst() / findNext():
        // -----------------------------------------

        // FindInfo nested class
        // contains the search criteria (key, value) and search result (leaf, index)


        // find first item matching (key, value) search criteria
        // use cases:
        // p_FindFirst()
        // p_FindFirst(key)
        // p_FindFirst(key, value)
        // p_FindFirst(key, undefined, true)
        var p_FindFirst = function (key, value, isPrefixSearch) {
            var findInfo = new FindInfo(key, value, isPrefixSearch);
            //
            if (findInfo.isKeyPresent) {
                if (findInfo.isPrefixSearch && findInfo.isValuePresent) throw "B_Plus_Tree.p_FindFirst(): arguments error: isPrefixSearch, but value is present";
                //
                var searchResult = findInfo.isValuePresent ? searchLeafValue(key, value) : searchLeaf(key);
                findInfo.leaf = searchResult.node;
                findInfo.index = searchResult.index;
                if (!searchResult.found) {
                    if (!findInfo.check_prefix()) {
                        return null;
                    }
                }
            } else {
                if (findInfo.isValuePresent) throw "B_Plus_Tree.findFirst(): arguments error: key is not present, but value is present";
                //
                findInfo.leaf = m_public.firstLeaf;
                findInfo.index = 0;
                if (findInfo.leaf.keys.count <= 0) return null;
            }
            //
            return findInfo;
        };

        // find last item matching (key, value) search criteria
        // use cases:
        // p_FindLast()
        // p_FindLast(key)
        // p_FindLast(key, value)
        // p_FindLast(key, undefined, true)
        var p_FindLast = function (key, value, isPrefixSearch) {
            var findInfo = new FindInfo(key, value, isPrefixSearch);
            //
            if (findInfo.isKeyPresent) {
                if (findInfo.isPrefixSearch && findInfo.isValuePresent) throw "B_Plus_Tree.p_FindLast(): arguments error: isPrefixSearch, but value is present";
                //
                if (findInfo.isPrefixSearch) {
                    var searchResult = searchLastLeafByPrefix(key);
                    findInfo.leaf = searchResult.node;
                    findInfo.index = searchResult.index;
                    if (!searchResult.found) {
                        return null;
                    }
                } else {
                    var searchResult = findInfo.isValuePresent ? searchLastLeafValue(key, value) : searchLastLeaf(key);
                    findInfo.leaf = searchResult.node;
                    findInfo.index = searchResult.index;
                    if (!searchResult.found) {
                        return null;
                    }
                }
            } else {
                if (findInfo.isValuePresent) throw "B_Plus_Tree.findLast(): arguments error: key is not present, but value is present";
                //
                findInfo.leaf = m_public.lastLeaf;
                findInfo.index = findInfo.leaf.keys.count - 1;
                if (findInfo.index < 0) return null;
            }
            //
            return findInfo;
        };

        // move to next item
        var findGoToNext = function (findInfo) {
            findInfo.index++;
            if (findInfo.index >= findInfo.leaf.keys.count) {
                findInfo.leaf = findInfo.leaf.nextLeaf;
                findInfo.index = 0;
            }
            //
            return (findInfo.leaf != null);
        };

        // move to previous item
        var findGoToPrev = function (findInfo) {
            findInfo.index--;
            if (findInfo.index < 0) {
                findInfo.leaf = findInfo.leaf.prevLeaf;
                if (findInfo.leaf == null) return false;
                findInfo.index = findInfo.leaf.keys.count - 1;
            }
            //
            return true;
        };

        // find next item after the findInfo's found item, matching the findInfo's search criteria
        var p_FindNext = function (findInfo) {
            while (true) {
                if (!findGoToNext(findInfo)) return null;
                //
                if (findInfo.isPrefixSearch) {
                    if (!findInfo.check_prefix()) return null;
                } else {
                    if (findInfo.isKeyPresent && (findInfo.key != findInfo.foundKey())) return null;
                }
                //
                if (findInfo.isValuePresent) {
                    if (findInfo.value == findInfo.foundValue()) return findInfo;
                } else {
                    return findInfo;
                }
            }
        };

        // find previous item after the findInfo's found item, matching the findInfo's search criteria
        var p_FindPrev = function (findInfo) {
            while (true) {
                if (!findGoToPrev(findInfo)) return null;
                //
                //if (findInfo.isKeyPresent && (findInfo.key != findInfo.foundKey())) return null;
                if (findInfo.isPrefixSearch) {
                    if (!findInfo.check_prefix()) return null;
                } else {
                    if (findInfo.isKeyPresent && (findInfo.key != findInfo.foundKey())) return null;
                }
                //
                if (findInfo.isValuePresent) {
                    if (findInfo.value == findInfo.foundValue()) return findInfo;
                } else {
                    return findInfo;
                }
            }
        };

        // -----------------------------------------
        //          additional methods:
        // -----------------------------------------

        // get values at key...
        //  make this always return an array, even if there is one item.
        //  will make interpretation easier.

        // will move the prefix search code into here.

        // iterate nodes by prefix... that may be a more efficient way of doing this, may be less efficient, it assigns one more thing I think.
        //  possibly a fast iterator?

        //  definitely would be easier code, I think it would be worth doing.
        //  could also be given its own check function.
        //   maybe gets given starting location.+


        var p_get_values_by_key = function (key) {
            var res = [];
            var findInfo = p_FindFirst(key);
            while (findInfo != null) {
                res.push(findInfo.foundValue());
                findInfo = p_FindNext(findInfo);
            }
            return res;
        }

        // get keys and values by prefix

        var p_get_by_prefix = function (prefix) {
            var res = [];
            var findInfo = m_public.findFirstPrefix(prefix);
            while (findInfo != null) {
                res.push([findInfo.foundKey(), findInfo.foundValue()]);
                findInfo = m_public.findNext(findInfo);
            }
            return res;
        }

        // get keys by prefix

        var p_get_keys_by_prefix = function (prefix) {
            var res = [];
            var findInfo = m_public.findFirstPrefix(prefix);
            while (findInfo != null) {
                res.push(findInfo.foundKey());
                findInfo = m_public.findNext(findInfo);
            }
            return res;
        }


        // -----------------------------------------
        //          getValue() / setValue():
        // -----------------------------------------

        // get value for the given key
        var p_GetValue = function (key) {
            var searchResult = searchLeaf(key);
            if (!searchResult.found) return null;
            return searchResult.node.values.items[searchResult.index];
        };

        // set value for the given key
        var p_SetValue = function (key, value) {
            var searchResult = searchLeaf(key);
            if (searchResult.found) {
                removeFromLeaf(searchResult.node, searchResult.index);
            }
            //
            p_Insert(key, value);
        };

        // -----------------------------------------
        //                 count():
        // -----------------------------------------

        // count all the value items in the tree
        // is that an easier way to iterate?

        var p_Count = function () {
            var result = 0;
            //
            var leaf = m_public.firstLeaf;
            while (leaf != null) {
                result += leaf.keys.count;
                leaf = leaf.nextLeaf;
            }
            //
            return result;
        };

        // count the value items with given key in the tree
        var p_CountKey = function (key) {
            var result = 0;
            //
            var findInfo = m_public.findFirst(key);
            while (findInfo != null) {
                result++;
                findInfo = m_public.findNext(findInfo);
            }
            //
            return result;
        };

        // -----------------------------------------
        //                 toText():
        // -----------------------------------------

        // returns multi-line text presentation for the tree

        /*
	    
        var _p_ToText = function () {
        var result = m_public.root.toText("");
        //
        if (typeof (B_Plus_Tree_NextNodeDebugId) != "undefined") {
        // print leafs chain:
        result += "\r\n";
        var leaf = m_public.firstLeaf;
        while (leaf != null) {
        result += "(" + leaf.debugId + ") ";
        leaf = leaf.nextLeaf;
        }
        }
        //
        return result;
        };

        */

        // -----------------------------------------
        //                rotations:
        // -----------------------------------------

        // "rotation" means moving items between siblings instead of split/merge

        // the following conditions are true when rotation is called:
        // leftNode.parent == rightNode.parent
        // leftLeaf.parent == rightLeaf.parent

        // move a key item to the left between leftNode and rightNode index (non-leaf) nodes
        // right node first item -> parent
        // parent item -> left node
        var rotateAmongNodesToLeft = function (leftNode, rightNode) {
            // move item from rightNode to LeftNode
            //
            var parent = rightNode.parent;
            var rightIndex = calcChildIndex(parent, rightNode);
            //
            // move the key:
            leftNode.keys.add(parent.keys.items[rightIndex - 1]); // copy the key down
            parent.keys.items[rightIndex - 1] = rightNode.keys.first(); // copy the key up
            rightNode.keys.removeFirst(); // remove from right
            //
            // move the child reference:
            rightNode.children.first().parent = leftNode; // update parent reference
            leftNode.children.add(rightNode.children.first()); // copy to left
            rightNode.children.removeFirst(); // remove from right
        };

        // move a key item to the right between leftNode and rightNode index (non-leaf) nodes
        // left node last item -> parent
        // parent item -> right node
        var rotateAmongNodesToRight = function (leftNode, rightNode) {
            // move item from leftNode to rightNode
            //
            var parent = rightNode.parent;
            var rightIndex = calcChildIndex(parent, rightNode);
            //
            // move the key:
            rightNode.keys.insert(0, parent.keys.items[rightIndex - 1]); // copy the key down
            parent.keys.items[rightIndex - 1] = leftNode.keys.last(); // copy the key up
            leftNode.keys.removeLast(); // remove from left
            //
            // move the child reference:
            rightNode.children.insert(0, leftNode.children.last()); // copy to right
            rightNode.children.first().parent = rightNode; // update parent reference
            leftNode.children.removeLast(); // remove from left
        };

        // move an item to the left between leftLeaf and rightLeaf leaf nodes
        // right leaf first item -> left leaf
        var rotateAmongLeavesToLeft = function (leftLeaf, rightLeaf) {
            // move item from rightLeaf to leftLeaf
            //
            var rightIndex = calcChildIndex(rightLeaf.parent, rightLeaf);
            //
            // copy to left:
            leftLeaf.keys.add(rightLeaf.keys.first());
            leftLeaf.values.add(rightLeaf.values.first());
            //
            // remove from right:
            rightLeaf.keys.removeFirst();
            rightLeaf.values.removeFirst();
            //
            // update parent:
            rightLeaf.parent.keys.items[rightIndex - 1] = rightLeaf.keys.first();
        };

        // move an item to the right between leftLeaf and rightLeaf leaf nodes
        // left leaf last item -> right leaf
        var rotateAmongLeavesToRight = function (leftLeaf, rightLeaf) {
            // move from leftLeaf to rightLeaf
            //
            var rightIndex = calcChildIndex(rightLeaf.parent, rightLeaf);
            //
            // copy to right:
            rightLeaf.keys.insert(0, leftLeaf.keys.last());
            rightLeaf.values.insert(0, leftLeaf.values.last());
            //
            // remove from left:
            leftLeaf.keys.removeLast();
            leftLeaf.values.removeLast();
            //
            // update parent:
            rightLeaf.parent.keys.items[rightIndex - 1] = rightLeaf.keys.first();
        };

        // -----------------------------------------
        //             internal searches:
        // -----------------------------------------

        // short description: returns the "child" index in the "node"
        // long description: calculates the "child" node index in the "node.children" array
        // (usually node == child.paren)
        var calcChildIndex = function (node, child) {
            var key = child.keys.first();
            var searchResult = node.keys.search_first(key);
            if (!searchResult.found) {
                if (node.children.items[searchResult.index] != child) throw "B_PlusTree.calcChildIndex(): 1";
                return searchResult.index;
            }
            //
            var index = searchResult.index;
            for (; ; ) {
                if (node.children.items[index] == child) return index;
                //
                index++;
                if (index >= node.children.count) break;
                if (node.keys.items[index - 1] != key) break;
            }
            throw "B_PlusTree.calcChildIndex(): 2";
        };

        // returns leaf node containing an item with the given key
        var searchLeaf = function (key) {
            // 
            var doSearchLeaf = function (node, key) {
                var searchResult = node.keys.search_first(key);
                //
                if (node.isLeaf) {
                    return { node: node, found: searchResult.found, index: searchResult.index };
                }
                //
                if (searchResult.found) {
                    // illustration: [left child] key [right child]
                    // both children (left and right i.e. before and after the key) can contain the key
                    //
                    // try the left child first:
                    var resultLeft = doSearchLeaf(node.children.items[searchResult.index], key);
                    if (resultLeft.found) return resultLeft;
                    //
                    // try the right child
                    return doSearchLeaf(node.children.items[searchResult.index + 1], key);
                } else {
                    // the pointed key is greater than the searched key. Only left child can be considered:
                    return doSearchLeaf(node.children.items[searchResult.index], key);
                }
            };
            //
            return doSearchLeaf(m_public.root, key);
        };

        // returns last leaf node containing an item with the given key
        var searchLastLeaf = function (key) {
            // 
            var doSearchLastLeaf = function (node, key) {
                var searchResult = node.keys.search_last(key);
                //
                if (node.isLeaf) {
                    return { node: node, found: searchResult.found, index: searchResult.index };
                }
                //
                if (searchResult.found) {
                    // illustration: [left child] key [right child]
                    // both children (left and right i.e. before and after the key) can contain the key
                    //
                    // try the right child first:
                    var resultRight = doSearchLastLeaf(node.children.items[searchResult.index + 1], key);
                    if (resultRight.found) return resultRight;
                    //
                    // try the left child
                    return doSearchLastLeaf(node.children.items[searchResult.index], key);
                } else {
                    // the pointed key is greater than the searched key. Only left child can be considered:
                    return doSearchLastLeaf(node.children.items[searchResult.index], key);
                }
            };
            //
            return doSearchLastLeaf(m_public.root, key);
        };

        // returns last leaf node containing an item with the given prefix
        var searchLastLeafByPrefix = function (prefix) {
            // 
            var doSearchLastLeafByPrefix = function (node, prefix) {
                var searchResult = node.keys.search_last_prefix(prefix);
                //
                if (node.isLeaf) {
                    return { node: node, found: searchResult.found, index: searchResult.index };
                }
                //
                if (searchResult.found) {
                    // illustration: [left child] key [right child]
                    // both children (left and right i.e. before and after the key) can contain the prefix
                    //
                    // try the right child first:
                    var resultRight = doSearchLastLeafByPrefix(node.children.items[searchResult.index + 1], prefix);
                    if (resultRight.found) return resultRight;
                    //
                    // try the left child
                    return doSearchLastLeafByPrefix(node.children.items[searchResult.index], prefix);
                } else {
                    // the pointed key is greater than the searched prefix. Only left child can be considered:
                    return doSearchLastLeafByPrefix(node.children.items[searchResult.index], prefix);
                }
            };
            //
            return doSearchLastLeafByPrefix(m_public.root, prefix);
        };

        // returns leaf node containing an item with the given key and value
        var searchLeafValue = function (key, value) {
            // search the key:
            var searchResult = searchLeaf(key);
            if (!searchResult.found) return searchResult;
            //
            // search the value (if there are several the same keys):
            var valueFound = false;
            var leaf = searchResult.node;
            var index = searchResult.index;
            for (; ; ) {
                if (index >= leaf.values.count) {
                    leaf = leaf.nextLeaf;
                    if (leaf == null) break;
                    index = 0;
                }
                if (leaf.keys.items[index] != key) break;
                if (leaf.values.items[index] == value) {
                    valueFound = true;
                    break;
                }
                index++;
            }
            //
            return { node: leaf, found: valueFound, index: index };
        };

        // returns last leaf node containing an item with the given key and value
        var searchLastLeafValue = function (key, value) {
            // search the key:
            var searchResult = searchLastLeaf(key);
            if (!searchResult.found) return searchResult;
            //
            // search the value (if there are several the same keys):
            var valueFound = false;
            var leaf = searchResult.node;
            var index = searchResult.index;
            //var foundIndex = 0;
            for (; ; ) {
                if (index < 0) {
                    leaf = leaf.prevLeaf;
                    if (leaf == null) break;
                    index = leaf.values.count - 1;
                }
                if (leaf.keys.items[index] != key) break;
                if (leaf.values.items[index] == value) {
                    valueFound = true;
                    break;
                }
                index--;
            }
            //
            return { node: leaf, found: valueFound, index: index };
        };

        // -----------------------------------------
        //       return the public interface:
        // -----------------------------------------

        return m_public;
    };

    B_Plus_Tree.FindInfo = FindInfo;

    //return B_Plus_Tree;
    module.exports = B_Plus_Tree;


//});



},{"./jsgui-data-structures-stiffarray":35,"./jsgui-lang-essentials":38}],34:[function(require,module,exports){

// could rename this ds_doubly_linked_list.js

// maybe not really a part of jsgui?

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}



define(["./jsgui-lang-essentials"], function(jsgui) {

*/

var jsgui = require('./jsgui-lang-essentials');

    /** 
    * Doubly linked list module.
    * @module core/jsgui-data-structures-doubly-linked-list 
    * @exports Doubly_Linked_List
    */

	// Essentials provides a fair few things... at least I can use functional polymorphism.

	var j = jsgui;
	var Class = j.Class;
	var each = j.each;
	var is_array = j.is_array;
	var is_dom_node = j.is_dom_node;
	var is_ctrl = j.is_ctrl;
	var extend = j.extend;
	var x_clones = j.x_clones;
	var get_truth_map_from_arr = j.get_truth_map_from_arr;
	var get_map_from_arr = j.get_map_from_arr;
	var arr_like_to_arr = j.arr_like_to_arr;
	var tof = j.tof;
	var is_defined = j.is_defined;
	var stringify = j.stringify;
	var functional_polymorphism = j.functional_polymorphism;
	var fp = j.fp;
	var arrayify = j.arrayify;
	var are_equal = j.are_equal;
	var get_item_sig = j.get_item_sig;
	var set_vals = j.set_vals;
	var truth = j.truth;
	var trim_sig_brackets = j.trim_sig_brackets;
	
// This may use some more generic graph node?
	
	// This may need to get adapted further for use in some other components.
	
	// Nodes having a key - they get inserted in a particular position.
	//  Having a value too? A key value pair array?
	//   Possibly could maintain the sorted order of a list. That will get used for the B+ tree.
	
	// Each node has a parent, and various children / branches.
	//  I think there can be some relatively generic tree / node systems, with b+ functionality implemented on top of that.
	
	// The B+ tree node could be an extension from Sorted_Doubly_Linked_list
	//  It will override insert code with code that can insert within other Node objects within it.
	
	// There will be a B+ tree class that makes use of these nodes, and will perform rebalancing where necessary.
	
	// Want an interface, linked_hash_map, that has the linked list internally
	// Linked list that has an object inside each node.
	
	
	// Doing more work on a linked list, and linked mapped list will be helpful.
	//  Sorted_KVS, Ordered_KVS?
	//  Ordered_List?
	//  Ordered_KVS makes sense when each value has a key but the order needs to be preserved.
	//   Could be a wrapper around Linked_Map.
	
    /**
    * Creates the node.
    * @constructor
    * @classdesc Represents a doubly linked list item (named "node").
    * @alias Doubly_Linked_List.Node
    * @param {object} spec - {value: (node value)}
    * @memberof module:core/jsgui-data-structures-doubly-linked-list
    * @example
    *
    * var node101 = new Doubly_Linked_List.Node({ value: 101 });
    */
	var Node = Class.extend({
		'init': function(spec) {
			// previous and next held as an array.
			
			// neighbours
			//  it could have no neighbours.
			//   a list will be empty, with no nodes.
			//   then it will have a node with no neighbours, which is both the first and the last node.
			//   then 2 nodes, 1 with each neighbour
			//   then 3 nodes, with the end nodes still having no neighbours.
			
			// This will just be for iterating through the list, adding, removing, doing basic operations.
			//  I may leave inefficient operations out, so the linked list gets used for what it is best at.
			//   But the inefficient/less efficient operations may be done to lower amounts, such as 12, by maintaining small LLs in data structures such as B+ trees.
			
			this.neighbours = spec.neighbours || [];
			
		    /**
            * The node's value.
            * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.Node
            * @instance
            * @name value
            */
		    // Adding and removing while maintaining an order?
			this.value = spec.value;
			
			
			// parent
			
		},
	    /**
        * Returns previous node in the list.
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.Node.prototype
        */
		'previous': function () {
			return this.neighbours[0];
		},
	    /**
        * Returns next node in the list.
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.Node.prototype
        */
		'next': function () {
			return this.neighbours[1];
		}
	});
	
	// Do these linked list nodes need to have anything?
	//  Just the means to insert their nodes etc?
	//   Then their nodes could be made to carry other data by other components.
	
	// Doubly_Linked_List could extend Node.
	//  That way it can be put in a tree, and used for holding the data in a tree.
	//  Want a B+ tree so that items can get put in correctly.
	
	// Having a whole tree made up of a doubly linked list, with other structures indexing it?
	//  Need some more fundamental data structures. The Collection and Data_Object will be good, but it will be good to store the fields in an appropriate object.
	
	
	// Ordered_KVS - may be a useful one.
	//  Would have the double linked list inside and map.
	
	
	// Mapped_Linked_List? would need to know what field to look at.
	
	var nodify = function(fn) {
		
		var res = function(val) {
			if (val instanceof Node) {
				return fn(val);
			} else {
				var node = new Node({'value': val});
				return fn(node);
			}
			
		};
		return res;
		
	}
	
	
    /**
    * Creates the doubly linked list.
    * @constructor
    * @classdesc Represents a doubly linked list.
    * @memberof module:core/jsgui-data-structures-doubly-linked-list
    */
	var Doubly_Linked_List = Class.extend({
		'init': function(spec) {
			// spec could be the initial items for the list.
			
			this.first = null;
			this.last = null;
			
			this.length = 0;
			// harder to maintain the length when nodes could be moved around the list.
			//  would need to be able to see if a node is in the list to begin with...
			//   so each node could have a container object, and if it is set to the list already when an insert is done, then the list will be able to keep track of
			//    its length. That would be better than having to count them.
			
		},
		
	    /**
        * Iterates over the list nodes calling the function for each node.
        * @param {function} callback - callback function: callback(node, stop)
        * - node: the list node
        * - stop: function to break iterations.
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * function getNodes(list) {
        *     var result = [];
        *     //
        *     list.each_node(function (node) { result.push(node); });
        *     //
        *     return result;
        * }
        *
        */
		'each_node': function (callback) {
			//console.log('each_node this.length ' + this.length);
			
			var node = this.first;
			var ctu = true;
			var stop = function() {
				ctu = false;
			};
			while (node && ctu) {
				callback(node, stop);
				node = node.neighbours[1];
			}
		},
		
	    /**
        * Iterates over the list nodes calling the function for each node's value.
        * @param {function} callback - callback function: callback(value, stop)
        * - value: the list node value
        * - stop: function to break iterations.
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * function getValues(list) {
        *     var result = [];
        *     //
        *     list.each(function (value) { result.push(value); });
        *     //
        *     return result;
        * }
        *
        */
		'each': function (callback) {
			this.each_node(function(node, stop) {
				callback(node.value, stop);
			});
		},
		
	    /**
        * Removes the node from the list.
        * @param {Node} node - node to remove
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * var list = new Doubly_Linked_List();
        * var node101 = new Doubly_Linked_List.Node({ value: 101 });
        *
        * list.push(node101);
        * list.remove(node101);
        *
        * // the list is empty now
        */
		'remove': (function (node) {
			
			// can not remove a value... have to remove a node.
			//  this will be more useful when there is a map of values.
			
			if (node.neighbours[0]) {
				node.neighbours[0].neighbours[1] = node.neighbours[1];
			} else {
				this.first = node.neighbours[1];
			}
			
			if (node.neighbours[1]) {
				node.neighbours[1].neighbours[0] = node.neighbours[0];
			} else {
				this.last = node.neighbours[0];
			}
			
			node.neighbours = [];
			
			if (node.parent == this) {
				delete node.parent;
				this.length--;
			}
			
		}),
		
		// check to see if the item is a 'node' object.
		//  if it is, can insert it as a node, otherwise create the node object and insert it.
		//   a bit like wrapping values in Data_Value.
		
	    /**
        * Inserts the node at the beginning of the list.
        * @param {Node|*} node - node to insert, or node value
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * var list = new Doubly_Linked_List();
        * var node101 = new Doubly_Linked_List.Node({ value: 101 });
        *
        * list.insert_beginning(node101);
        * list.insert_beginning(102);
        *
        * // list values: 102, 101
        */
		'insert_beginning': function (val) {
			if (val instanceof Node) {
				if (this.first == null) {
					this.first = val;
					this.last = val;
					val.neighbours = [];
					if (val.parent != this) {
						val.parent = this;
						this.length++;
					}
				} else {
					// insert it before first item.
					this.insert_before(val, this.first);
				}
				return val;
			} else {
				var node = new Node({'value': val});
				return this.insert_beginning(node);
			}
		},
		
		// could use a nodify function.
		//  or ensure_data_wrapper
		
	    /**
        * Inserts the node before the specified node.
        * @param {Node|*} val - node to insert, or node value
        * @param {Node} node - insert point
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * var list = new Doubly_Linked_List();
        * var node101 = new Doubly_Linked_List.Node({ value: 101 });
        *
        * list.push(node101);
        * list.insert_before(102, node101);
        *
        * // list values: 102, 101
        */
		'insert_before': function (val, node) {
			// check to see if the new value is a node.
			
			if (val instanceof Node) {
				val.neighbours = [node.neighbours[0], node];
				if (node.neighbours[0] == null) {
					this.first = val;
				} else {
					node.neighbours[0].neighbours[1] = val;
				}
				node.neighbours[0] = val;
				
				if (val.parent != this) {
					val.parent = this;
					this.length++;
				}
				return val;
			} else {
				var new_node = new Node({'value': val});
				return this.insert_before(new_node, node);
			}
			
		},
		
	    /**
        * Inserts the node after the specified node.
        * @param {Node|*} val - node to insert, or node value
        * @param {Node} node - insert point
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * var list = new Doubly_Linked_List();
        * var node101 = new Doubly_Linked_List.Node({ value: 101 });
        *
        * list.push(node101);
        * list.insert_after(102, node101);
        *
        * // list values: 101, 102
        */
		'insert_after': function (val, node) {
			if (val instanceof Node) {
				//console.log('insert after node ' + node);
				
				val.neighbours = [node, node.neighbours[1]];
				if (node.neighbours[1] == null) {
					this.last = val;
				} else {
					node.neighbours[1].neighbours[0] = val;
					
				}
				node.neighbours[1] = val;
				
				//node.neighbours[0].neighbours[1] = val;
				if (val.parent != this) {
					val.parent = this;
					this.length++;
				}
				return val;
			} else {
				var new_node = new Node({'value': val});
				return this.insert_after(new_node, node);
			}
		},
		// not wrapping the item in a node?
		
		// want one where we are not pushing nodes, but items stored in nodes.
		//  Perhaps this is a Data_Value?
		// Or a doubly_linked_node.
		
		// Doubly_Linked_Node could take the form [prev, item, next]
		//  [prev, item, key, next]? probably not
		
		//  Maybe we could put more private variables, such as 'neighbours' as a var within the init statement.
		
	    /**
        * Inserts the node at the end of the list.
        * @param {Node|*} val - node to insert, or node value
        * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List.prototype
        * @example
        *
        * var list = new Doubly_Linked_List();
        * var node101 = new Doubly_Linked_List.Node({ value: 101 });
        *
        * list.push(node101);
        * list.push(102);
        *
        * // list values: 101, 102
        */
		'push': function (val) {
			
			if (val instanceof Node) {
				if (this.last == null) {
					this.insert_beginning(val);
				} else {
					return this.insert_after(val, this.last);
					/*
					var last = this.last;
					last.neighbours[1] = val;
					this.last = val;
					
					//console.log('val.parent ' + val.parent);
					//console.log('this ' + this);
					
					if (val.parent != this) {
						val.parent = this;
						this.length++;
					}
					*/
				}
				return val;
			} else {
				var new_node = new Node({'value': val});
				return this.push(new_node);
			}
			// the item gets wrapped in a node.?
			
			
			
		}
	});
	
    /**
    * The list node class.
    * @memberof module:core/jsgui-data-structures-doubly-linked-list.Doubly_Linked_List
    * @name Doubly_Linked_List.Node
    */

	Doubly_Linked_List.Node = Node;
	
	
	// var jsgui = {};
	// alert('returning jsgui from jsgui-lang');
	//return jsgui;
module.exports = Doubly_Linked_List;

	//return Doubly_Linked_List;
	
	
//});

},{"./jsgui-lang-essentials":38}],35:[function(require,module,exports){

// This is resulting in smaller code in other parts of the framework.
//  This section is getting quite big (again)
//  Still need to make use of the B+ free for ordered indexing.

// Moving some code to jsgui-lang-essentials
//  Will be publishing a 0.4 version of that before so long?
//   Maybe with more explanation?

// It may be worth publishing this, and a discussion forum about it on my own web forum.
//  Perhaps that could come later, but jsgui-lang-essentials may be a good step. Could call it version 0.35.
//   Could have a few examples
//   Would be a useful toolkit I could use while working elsewhere.

//  I think that web site would be lightening fast, and impress people with its speed compared to other web platforms that they are used to
//   (though Facebook is OK)

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


// May sway implementations of the particular items more easily when they are in their own files.

define(["./jsgui-lang-essentials"], function (jsgui) {
    */
var jsgui = require('./jsgui-lang-essentials');

    // StiffArray: an array with pre-allocated items
    // it seems that this array is usually faster (excluding IE javascript engine)
    // probably there is a reason to provide IE implementation based on usual dynamic arrays

    /** 
    * Stiff Array module.
    * @module core/jsgui-data-structures-stiffarray
    * @exports StiffArray
    */


    var StiffArray = function (capacity) {

        // -----------------------------------------
        //              public interface:
        // -----------------------------------------

        /**
        * Creates the stiff array.
        * @constructor
        * @classdesc 
        * An array with pre-allocated items.
        * It seems that this array is usually faster (excluding IE javascript engine).
        * Probably there is a reason to provide IE implementation based on usual dynamic arrays.
        *
        * @alias StiffArray
        * @param {number} capacity - array capacity (maximum possible number of items).
        * @memberof  module:core/jsgui-data-structures-stiffarray
        * @example
        *
        * var array = new StiffArray(7);
        */

        var m_public = {
            /** 
            * internal storage array 
            * @type {Array}
            * @instance
            */
            items: new Array(capacity),
            /** 
            * items count
            * @type {number}
            * @instance
            */
            count: 0,
            /** 
            * Returns the first item
            * @instance
            */
            first: function () {
                if (this.count == 0) throw "StiffArray.first()";
                return this.items[0];
            },
            /** 
            * Returns the last item
            * @instance
            */
            last: function () {
                if (this.count == 0) throw "StiffArray.last()";
                return this.items[this.count - 1];
            },
            /** 
            * Adds item
            * @instance
            * @param {*} item - item to add
            */
            add: function (item) {
                if (this.count >= capacity) throw "StiffArray.add()";
                //
                this.items[this.count++] = item;
            },
            /** 
            * Adds all the items from the  source (to the end of the existing items)
            * @param {StiffArray} source - source stiff array
            * @instance
            */
            add_from: function (source) {
                if (this.count + source.count > capacity) throw "StiffArray.add_from()";
                //
                for (var i = 0; i < source.count; i++) this.items[this.count++] = source.items[i];
            },
            /** 
            * Inserts the item at the specified index.
            * @param {number} index - index for the new item (zero-based)
            * @param {*} item - item to insert
            * @instance
            */
            insert: function (index, item) {
                if ((index < 0) || (index > this.count)) throw "StiffArray.insert(): index";
                if (this.count >= capacity) throw "StiffArray.insert(): overflow";
                //
                for (var i = this.count; i > index; i--) this.items[i] = this.items[i - 1];
                this.items[index] = item;
                this.count++;
            },
            /** 
            * Removes the item at the specified index.
            * @param {number} index - index of the removing item (zero-based)
            * @instance
            */
            removeAt: function (index) {
                if ((index < 0) || (index >= this.count)) throw "StiffArray.removeAt()";
                //
                this.count--;
                for (var i = index; i < this.count; i++) this.items[i] = this.items[i + 1];
            },
            /** 
            * Removes the first item.
            * @instance
            */
            removeFirst: function () {
                this.removeAt(0);
            },
            /** 
            * Removes the last item.
            * @instance
            */
            removeLast: function () {
                this.removeAt(this.count - 1);
            },
            /** 
            * Replaces all the items to the subset of the other StiffArray items.
            * @param {StiffArray} source - source stiff array
            * @param {number} index - index of the first item of the subset
            * @param {number} count - number of items in the subset
            * @instance
            */
            copy_from: function (source, index, count) {
                for (var i = 0; i < count; i++) {
                    this.items[i] = source.items[i + index];
                }
                this.count = count;
            },
            /** 
            * Performs a binary search for the first occurrence of the item in the stiff array. Uses an usual JavaScript items comparison: item1 < item2.
            * @param {*} item - item to search
            * @returns {object} { found: f, index: i } object:
            * - found: true if the item is found, false otherwise
            * - index: index of the found item, or index to insert new (non-found) item
            * @instance
            * @example
            *
            * var arr = new StiffArray(10);
            * arr.add(1); // [0]
            * arr.add(2); // [1]
            * arr.add(2); // [2]
            * arr.add(3); // [3]
            * arr.add(3); // [4]
            * arr.add(3); // [5]
            *
            * arr.search_first(0)  ==>  { found: false, index: 0 }
            * arr.search_first(1)  ==>  { found: true, index: 0 }
            * arr.search_first(2)  ==>  { found: true, index: 1 }
            * arr.search_first(3)  ==>  { found: true, index: 3 }
            * arr.search_first(4)  ==>  { found: false, index: 6 }
            */
            search_first: function (item) {
                var cnt = this.count;
                var first = 0;
                while (cnt > 0) {
                    var step = Math.floor(cnt / 2);
                    var index = first + step;
                    if (this.items[index] < item) {
                        first = index + 1;
                        cnt -= (step + 1);
                    } else {
                        cnt = step;
                    }
                }
                //
                if (first < this.count) {
                    return { found: (this.items[first] == item), index: first };
                }
                return { found: false, index: first };
            },
            /** 
            * Performs a binary search for the last occurrence of the item in the stiff array. Uses an usual JavaScript items comparison: item1 >= item2.
            * @param {*} item - item to search
            * @returns {object} { found: f, index: i } object:
            * - found: true if the item is found, false otherwise
            * - index: index of the found item, or index to insert new (non-found) item
            * @instance
            * @example
            *
            * var arr = new StiffArray(10);
            * arr.add(1); // [0]
            * arr.add(2); // [1]
            * arr.add(2); // [2]
            * arr.add(3); // [3]
            * arr.add(3); // [4]
            * arr.add(3); // [5]
            *
            * arr.search_last(0)  ==>  { found: false, index: 0 }
            * arr.search_last(1)  ==>  { found: true, index: 0 }
            * arr.search_last(2)  ==>  { found: true, index: 2 }
            * arr.search_last(3)  ==>  { found: true, index: 5 }
            * arr.search_last(4)  ==>  { found: false, index: 6 }
            */
            search_last: function (item) {
                var cnt = this.count;
                var first = 0;
                while (cnt > 0) {
                    var step = Math.floor(cnt / 2);
                    var index = first + step;
                    if (item >= this.items[index]) {
                        first = index + 1;
                        cnt -= (step + 1);
                    } else {
                        cnt = step;
                    }
                }
                //
                if ((first > 0) && (first <= this.count)) {
                    if (this.items[first - 1] == item) {
                        return { found: true, index: first - 1 };
                    }
                }
                return { found: false, index: first };
            },
            /** 
            * Performs a binary search for the last occurrence of the prefix in the stiff array. Useful when the stiff array items are strings.
            *
            * A search_first_prefix() method is not implemented because search_first() can be used instead; but search_last() cannot be used instead of the search_last_prefix().
            *
            * @param {string} prefix - prefix to search
            * @returns {object} { found: f, index: i } object:
            * - found: true if the prefixed item is found, false otherwise
            * - index: index of the found item, or index to insert new (non-found) item
            * @instance
            * @example
            *
            * var arr = new StiffArray(10);
            * arr.add("111"); // [0]
            * arr.add("121"); // [1]
            * arr.add("122"); // [2]
            * arr.add("131"); // [3]
            *
            * arr.search_last_prefix("")  ==>  { found: true, index: 3 }
            *
            * arr.search_last_prefix("0")  ==>  { found: false, index: 0 }
            * arr.search_last_prefix("1")  ==>  { found: true, index: 3 }
            * arr.search_last_prefix("2")  ==>  { found: false, index: 4 }
            *
            * arr.search_last_prefix("10")  ==>  { found: false, index: 0 }
            * arr.search_last_prefix("11")  ==>  { found: true, index: 0 }
            * arr.search_last_prefix("12")  ==>  { found: true, index: 2 }
            * arr.search_last_prefix("13")  ==>  { found: true, index: 3 }
            * arr.search_last_prefix("14")  ==>  { found: false, index: 4 }
            *
            *
            *
            */
            search_last_prefix: function (prefix) {
                var prefix_length = prefix.length;
                //
                var check_prefix = function (item) {  
                    if (prefix_length > item.length) return false;
                    return (item.substr(0, prefix_length) == prefix)
                }
                //
                var cnt = this.count;
                var first = 0;
                while (cnt > 0) {
                    var step = Math.floor(cnt / 2);
                    var index = first + step;
                    var item = this.items[index];
                    if ((prefix > item) || check_prefix(item)) {
                        first = index + 1;
                        cnt -= (step + 1);
                    } else {
                        cnt = step;
                    }
                }
                //
                if ((first > 0) && (first <= this.count)) {
                    if (check_prefix(this.items[first - 1])) {
                        return { found: true, index: first - 1 };
                    }
                }
                return { found: false, index: first };
            },
            toString: function () {
                return this.items.slice(0, this.count).toString();
            }
        };


        // -----------------------------------------
        //       return the public interface:
        // -----------------------------------------

        return m_public;
    };
module.exports = StiffArray;


    //return StiffArray;


//});



},{"./jsgui-lang-essentials":38}],36:[function(require,module,exports){
// This is resulting in smaller code in other parts of the framework.
//  This section is getting quite big (again)
//  Still need to make use of the B+ free for ordered indexing.

// Moving some code to jsgui-lang-essentials
//  Will be publishing a 0.4 version of that before so long?
//   Maybe with more explanation?

// It may be worth publishing this, and a discussion forum about it on my own web forum.
//  Perhaps that could come later, but jsgui-lang-essentials may be a good step. Could call it version 0.35.
//   Could have a few examples
//   Would be a useful toolkit I could use while working elsewhere.

//  I think that web site would be lightening fast, and impress people with its speed compared to other web platforms that they are used to
//   (though Facebook is OK)




// May sway implementations of the particular items more easily when they are in their own files.

// It looks like things are pointing towards the Compressed Dynamic Suffix Array.

//  Want something that provides full-text matches.
//   Some simpler data structures may work better to start with.
//   For unit tests, could compare them to a very simple and inefficient algorithm that goes through the whole string.

// Suffixes seem like one of the important things to focus on.

//  Prefix trees seemed like a good way of doing things before.

// I think suffix arrays, compressed suffix arrays, and compressed dynamic ones seem like the major route to take.
// Suffix trees too, those may lead to suffix arrays as well.
//  Definitely do want these fairly difficult features.

// CDSAs are not necessarily Mikael Salson's version either.
//  Could approach it myself.
//  Need the suffix array
//  Need to compress it
//   Changing the uncompressed suffix array
//   Changing a compressed suffix array

// Going from the operation, doing something, to all the steps needed to change the array.
//  Can do some experiments with the suffix arrays, compressing them to another type of suffix array, and decompressing them as well.
//   Performing search operations on the compressed suffix array.
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(["./jsgui-lang-essentials", "./jsgui-data-structures-doubly-linked-list", "./jsgui-data-structures-b-plus-tree"], function(jsgui, Doubly_Linked_List, B_Plus_Tree) {
    */
    var jsgui = require('./jsgui-lang-essentials');
var Doubly_Linked_List = require('./jsgui-data-structures-doubly-linked-list');
var B_Plus_Tree = require('./jsgui-data-structures-b-plus-tree');

    /** 
    * Data structures module.
    * @module core/jsgui-data-structures
    * @exports Data_Structures
    */


	// The data structures will be needed to support some components
	
	var Class = jsgui.Class;
	//console.log('Class ' + Class);
	var mapify = jsgui.mapify;
	//console.log('mapify ' + mapify);

	var is_defined = jsgui.is_defined;
	var stringify = jsgui.stringify;
	var each = jsgui.each;
	var fp = jsgui.fp;
	var tof = jsgui.tof;

	// Also will get the Doubly_Linked_List.
	// Various data structures will be defined separately and this will link them together.
	
	//  I think some data structures would be nice when published online.
	//   They will rely on essentials. A microframework version could be published with the necessary essentials already built in.
	
	
	//  Could include some Jasmine unit tests with them.
	
	
	// Now that this is isolated, removing it and replacing it with a different / better version seems easier... it's just a component.
	
	// This is acting as a friendlier wrapper to the B+ tree.
	//  Not so sure about it having it maintain a dict index too... but maybe it is best to have ksvs
	//  KSVS could possibly be extended so that it makes use of both the tree and the dict.
	
	// I'm interested in making a data structure that uses these sibling lists as well as a dict. That will mean they can be located by full key in O(1) time.
	//  Then the tree can be moved through.
	//   This would mean indexing the leaf node for the object. Then it will be possible to move through the tree.
	//   Finding the place where an item would be put... similar to finding the first key after a certain value.
	//   Then can proceed through the tree (quick to move to the next node) until we have moved past nodes with the specified prefix.
	
	// The point is to have various data structures here that are named, and have APIs as per their usage.
	// Eg Key-Value-Store rather than B+ tree
	
	// Sorted_KVS
	
	//  Could make an API / interface for this.
	
	// May be better to work on the XML processing for the moment?
	
	// Transforming an XML / jsgui page jsguiml? actually ASP.NET?
	//  JSUI (Je Suis, I like that name, it's announcing that things 'are', it's a very declarative statement.)
	//   JSUI-XML
	//   JeSui_XML
	//   Je_Suis_Xml
	
	//  JSUI-ML
	
	// I think maintaining and consuming these data structures as resources will be a very useful functionality.
	//  Distributed result finding could be very useful, where a function in execution is sent over the network.
	//  The function gets sent over to its next node when it has a result from one node.
	//   It could branch as well when necessary, meaning lookups take place in parallel.
	//    Would maybe need or benefit from high latency alert reporting.
	
	// Publishing various data structures such as a sorted list over a network would be useful.
	//  Even if the list itself may not be distributed, it could be a component in a distributed system.
	
	// There will wind up being a variety of different classes that do similar things, but in different ways.
	
	// Could have a high throughput system.
	
	// There could be a KVS resource that is used as a shard, with a published index for the sharding system, and the client machines
	//  using a KVS_Shards(_Client) resource. That will mean that systems that rely on a large array like structure, like a B+ tree, could make use of it.
	// Client access for using the B+ tree could be done accross the network (if its not for locks!)
	//  May run into trouble because of data change and access to it.
	//  Could also implement a locking mechanism? What exactly would it do? Or more like a rapid update notifier? Or again no need because everything gets updated in the shards?
	//  Want to avoid multiple updates taking place at once. The lack of logic could be messy.
	//   Maybe there is a way to partition things so that some part of a tree becomes locked?
	
	// I think a sharded lower level unsorted KSV would be really useful for making a sorted KVS, and also a full-text index.
	//  There could be multiple nodes that access it, but 
	
	// Full text index:
	//  Key(string), text_value(string)
	//  key used to identify the text and for returning the result.
	
	// Full text index on the client would indeed be quite useful.
	//  It would probably be possible to make a text index incorporating some things like BWT for use on the client.
	
	
	
	// The data for the tree would be distributed over the KVS shards, and would then 
	
	
	/*
	
	var Sorted_List = Class.extend({
		'init': function(spec) {
			
			this.tree = new BTree(12);
			
			
		},
		'clear': function() {
			this.tree.clear();
		},
		'put': function(value) {
			var insert_res = this.tree.insert(key);
		},
		'out': function(value) {
			this.tree.remove(key);
		},
		'has': function(value) {
			// tree.has?
			
			
		},
		'values': function(value) {
			
		},
		'count': function() {
			
		},
		'get_cursor': function() {
			
		}
	})
	
	*/
	
	
	// Will have the ordered string list here as well
	//  Commented out for the moment
	
	/*
	 * 
	 * 
	
	var Ordered_String_List = Class.extend({
		'init' : function() {
			// console.log('init osl sig ' + sig);

			var arr = [];
			var dict_indexes = {};

			var reindex_dict_indexes = function() {
				dict_indexes = {};
				for ( var c = 0, l = arr.length; c < l; c++) {
					dict_indexes[arr[c]] = c;
				}
			}

			// (add), remove, get, get_all, has, put, move, splice
			this.has = function(value) {
				return (typeof dict_indexes[value] !== 'undefined');
			}

			this.put = function(value) {
				// by default puts it at the end.
				if (this.has(value)) {
					// stays in same place.
					// arr[dict_indexes[value]]
					// do nothing
				} else {
					var index = arr.length;
					arr.push(value);
					dict_indexes[value] = index;
				}

			}

			this.out = function(value) {
				if (this.has(value)) {
					var idx = dict_indexes[value];
					arr.splice(idx, 1);

					delete dict_indexes[value];

					for ( var c = idx, l = arr.length; c < l; c++) {
						var i = arr[c];
						dict_indexes[i]--;
					}
					// will need the items after it and lower their indexes.

				}
			}

			this.toggle = function(value) {
				if (this.has(value)) {
					this.out(value);
				} else {
					this.put(value);
				}
			}

			this.move_value = function(value, index) {
				if (this.has(value) && dict_indexes[value] != index) {

					// gets removed from current position, causes items after it
					// to move back.
					// gets put in new position, gets items after that to move
					// forwards.

					var old_index = dict_indexes[value];
					arr.splice(old_index, 1);

					arr.splice(index, 0, value);

					if (index < old_index) {
						// moving back.
						// dict_indexes[]
						dict_indexes[arr[index]] = index;
						// the index object of the one it

						// for (var c = index, l = arr.length; c < l; c++) {
						for ( var c = index + 1; c <= old_index; c++) {
							dict_indexes[arr[c]]++;
						}
					} else if (index > old_index) {
						dict_indexes[arr[index]] = index;
						for ( var c = old_index; c < index; c++) {
							dict_indexes[arr[c]]--;
						}
					}

				}

			}
			// for testing

			this._index_scan = function() {
				for ( var c = 0, l = arr.length; c < l; c++) {
					console.log('c ' + c + ' arr[c] ' + arr[c] + ' idx '
							+ dict_indexes[arr[c]]);
				};
			}

			this.toString = function() {
				var res = arr.join(' ');
				return res;
			}

			this.toString.stringify = true;

			this.set = fp(function(a, sig) {
				if (sig == '[s]') {
					arr = a[0].split(' ');
					// console.log('arr ' + jsgui.stringify(arr));
					reindex_dict_indexes();
				}
			});

			// if (sig == '[s]') {
			// this.set(a[0]);
			// }

			var a = arguments;
			if (a.length == 1) {
				var spec = a[0];
				if (tof(spec) == 'string') {
					// console.log('setting');
					this.set(spec);
				}
			}

		}
	});
	 */
	
	
    /**
    * Creates the Sorted_KVS.
    * @constructor
    * @classdesc Represents a sorted key/value pairs storage (with fast access by the key).
    * @memberof module:core/jsgui-data-structures
    */
	
	// Multiple items could be stored in one position.
	//  This may have another layer of functionality beyond the tree.
	
	var Sorted_KVS = Class.extend({
		'init': function(spec) {
			spec = spec || {};
			// both a dict and a BTree
			//  that is used in this case because the BTree only stores string keys.
			//  the improved B+ tree will have value objects/pointers within them
			
			if (is_defined(spec.unique_keys)) this.unique_keys = spec.unique_keys;
			//this.tree = new B_Plus_Tree(12); // order 12
			this.tree = B_Plus_Tree(12); // order 12
			
			
			//this.dict = {};
			// likely to make the dict refer to the tree node
			
			
		},

	    /**
        * Clears the storage, removing all the key/value pairs.
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'clear': function () {
			this.tree.clear();
			//this.dict = {};
		},

	    /**
        * Puts the key/value pairs from the passed object into the storage.
        * @func
        * @param {object} obj
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        * @example
        * var kvs = new Data_Structures.Sorted_KVS();
        * kvs.put({ a: 1});
        * kvs.put({ b: 2, c: 3});
        */
		'put': mapify(function (key, value) {
			// inserting a bunch of things at once... could that be done more efficiently, such as in one traversal?
			//  sort the items, then can skip through the tree a bit quicker?
			
			
			var insert_res = this.tree.insert(key, value);
			// with tree.insert - nice if we can keep the treenode as a result.
			//  the tree does not store objects in the node.
			//   could make the tree node hold a reference to the object?
			
			
			
			
			//console.log('put insert_res ' + insert_res);
			//this.dict[key] = value;
		}),


	    /**
        * Removes from the storage values for the passed key.
        * @func
        * @param {*} key
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'out': function (key) {
			//console.log('key ' + key);
			//
		
			this.tree.remove(key);
			//console.log('this.tree.keys_and_values() ' + stringify(this.tree.keys_and_values()));
			//throw '2.stop';
			//delete this.dict[key];
		},

	    /**
        * Gets from the storage values for the passed key, returns the values array.
        * @func
        * @param {*} key
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'get': function (key) {
			//console.log('Sorted_KVS get');
			//console.log('key ' + stringify(key));

			
			// get all nodes with that key
			
			//var tree_res = this.tree.
			//console.log('this.tree.keys() ' + stringify(this.tree.keys()));
			//throw ('stop');
			
			//return 
			// if this is treating the keys as unique it will just return 1 item or undefined / null.
			// otherwise it returns array on n items
			
			// don't want KVPs
			
			return this.tree.get_values_by_key(key);
			
			//return this.dict[key];
		},


	    /**
        * Returns true if the storage contains the passed key.
        * @func
        * @param {*} key
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'has': function (key) {
			//return (typeof this.dict[key] !== 'undefined');
			
			return this.key_count(key) > 0;
			
		},
		'get_cursor': function() {
			//var res = new KSVS_Cursor(this);
			//res.move_first();
			//return res;
		},


	    /**
        * Returns an array of all the keys in the storage.
        * @func
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'keys': function () {
			
			return this.tree.keys();
			
			//return this.tree.keys();
		},

	    /**
        * Returns an array of [key, value] arrays for all the items in the storage.
        * @func
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'keys_and_values': function () {
			return this.tree.keys_and_values();
		},
		
		/*
		'values': function() {
			var keys = this.keys();
			var res = [];
			var that = this;
			console.log('keys.length ' + keys.length );
			console.log('keys ' + jsgui.stringify(keys));
			
			each(keys, function(i, v) {
				res.push(that.dict[v]);
			});
			return res;
		},
		*/
		
	    /**
        * Returns an amount of all the keys in the storage.
        * @name key_count
        * @func
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */

	    /**
        * Returns an amount of the passed key occurrences in the storage.
        * @func
        * @param {*} key
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'key_count': function (key) {
			
			if (is_defined(key)) {
				return this.tree.count(key);
			} else {
				return this.tree.count();
			}
			
			// also want to do it for a particular key
			
			
		},
		
		/*
		
		'get_keys_by_prefix': function(prefix) {
			var leaf = this.tree.searchLeaf(prefix);
			var node = leaf.node;
			var res = [];
			var index = leaf.index;
			var plen = prefix.length;
			var check_prefix = function(key) {
				if (plen > key.length) return false;
				return (key.substr(0, plen) == prefix)
			}
			var has_prefix = true;
	        while (node != null && has_prefix) {
	        	// what is the original index?
	        	var key = node.keys.items[index];
	        	console.log('key ' + key);
	        	//var value = node.values.items[index];
	        	has_prefix = check_prefix(key);
	        	if (has_prefix) {
	        		if (index >= node.keys.count) {
			        	res.push(key);
			            node = node.nextLeaf;
		        		index = 0;
		        	} else {
			        	res.push(key);
		        		index++;
		        	}
	        	}
	        }
	        return res;
		},
		
		*/
		
	    /**
        * Returns an array of the keys that start from the passed prefix.
        * @func
        * @param {string} prefix
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'get_keys_by_prefix': function (prefix) {
			return this.tree.get_keys_by_prefix(prefix);
		},
		
	    /**
        * Invokes the callback function for each item in the storage: `callback(key, value)`
        * @func
        * @param {function} callback
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'each': function (callback) {
			// iterate through every item
			//  key, value
			return this.tree.each(callback);
		},
		
	    /**
        * Returns an array of [key, value] arrays for the keys that start from the passed prefix.
        * @func
        * @param {string} prefix
        * @memberof module:core/jsgui-data-structures.Sorted_KVS
        * @instance
        */
		'get_by_prefix': function (prefix) {
			
	        return this.tree.get_by_prefix(prefix);
		}
	});



    /**
    * Creates the Ordered_KVS.
    * @constructor
    * @classdesc Represents an unsorted key/value pairs storage, but with fast access by the key. The each()-based operations 
    * (e.g. keys(), values() etc.) returns the items in the same order as they was added. But the get() and out() operations 
    * use a fast key access. Unfortunately these operation works with the last added value only if several values have equal keys.
    * @memberof module:core/jsgui-data-structures
    */

	// Double Linked List inside, as well as a simple dict with references to the nodes.
	// Use liked list nodes?
	
	// Items are identified with a key, but stored in any order.
	//  This could be useful for storing a list of fields. Allows fast retrieval by field name, also preserves the ordering.
	
	// will have functions for re-ordering as well.
	
	var Ordered_KVS = Class.extend({
		'init': function() {
			this.dll = new Doubly_Linked_List();
			this.node_map = {};
		},


	    /**
        * Returns an amount of items in the storage.
        * @func
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'length': function () {
			return this.dll.length;
		},


	    /**
        * Adds the key/value pair to the storage.
        * @func
        * @param {*} key
        * @param {*} value
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'put': function (key, value) {
			// does it already exist with that key - if so that item gets replaced, stays in the same position?
			// or maybe push - that means the item that goes in gets added to the end.
			return this.push(key, value);
		},


	    /**
        * Returns the value for the passed key, or `undefined` if the key does not exists. <br />
        * If the key was added several times, then returns the latest added value.
        * @func
        * @param {*} key
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'get': function (key) {
			//console.log('get key ' + key);
			var kvs_node = this.node_map[key];
			if (kvs_node) {
				return kvs_node.value;
			} else {
				return undefined;
				//throw 'Missing KVS node: ' + key;
			}
		},


	    /**
        * Adds the key/value pair to the storage.
        * @func
        * @param {*} key
        * @param {*} value
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'push': function (key, value) {
			// does it already have a node with that key?
			var node = this.dll.push(value);
			node.key = key;
			this.node_map[key] = node;
		},

	    /**
        * Removes the pair with the passed key from the storage. Throws an exception if the key does not exists. <br />
        * If the key was added several times, then removes the latest added pair only (and throws an exception for the next time).
        * @func
        * @param {*} key
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'out': function (key) {
			var node = this.node_map[key];
			//delete node.key;
			delete this.node_map[key]
			
			this.dll.remove(node);
		},

	    /**
        * Invokes the callback function for each item in the storage: `callback(key, value, stop)`
        * @func
        * @param {function} callback
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'each': function(callback) {
			
			// return the key as well as the value in the callback.
			this.dll.each_node(function(node, stop) {
				callback(node.key, node.value, stop);
			});
			
			
			//this.dll.each(callback);
		},

	    /**
        * Returns an array of all the values in the storage.
        * @func
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'values': function () {
			var res = [];
			this.each(function(key, value) {
				res.push(value);
			});
			return res;
		},

	    /**
        * Returns an array of all the keys in the storage.
        * @func
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'keys': function () {
			var res = [];
			this.each(function(key, value) {
				res.push(key);
			});
			return res;
		},

	    /**
        * Returns an array of [key, value] arrays for all the items in the storage.
        * @func
        * @memberof module:core/jsgui-data-structures.Ordered_KVS
        * @instance
        */
		'keys_and_values': function () {
			var res = [];
			this.each(function(key, value) {
				res.push([key, value]);
			});
			return res;
		}
		// will not need to deal with nodes on the user level.
		// want to be able to add and remove items, normally items will get pushed to the end of the list.
		
		// will provide a key and value in order to do this.
	});
	// have a KSVS cursor - this will be able to get the key and value at any position.
	//  Need to be able to move the cursor.
	
	/*
	
	var Sorted_KVS_Cursor = Class.extend({
		'init': function(ksvs) {
			this.ksvs = ksvs;
			this.b_plus_cursor = new BTreeCursor();
			this.b_plus_cursor.move_first();
		},
		'move_first': function() {
			return this.b_plus_cursor.move_first();
		},
		'move_next': function() {
			return this.b_plus_cursor.move_next();
		},
		'move_prev': function() {
			return this.b_plus_cursor.move_prev();
		},
		'kv': function() {
			var key = this.b_plus_cursor.get_value();
			var value = this.ksvs.dict[key];
			return [key, value];
		}
	});
	*/



    /**
    * Creates the Ordered_String_List.
    * @classdesc Represents an unsorted string list.
    * @constructor
    * @param {string} [values] - space-separated list of values
    * @memberof module:core/jsgui-data-structures
    * @example
    * var list1 = new Data_Structures.Ordered_String_List();
    * var list2 = new Data_Structures.Ordered_String_List("value1 value2 value3");
    */

	// This could be useful for a few things, like storing tables in a DB
	// schema.
	// Maybe quite a few more things.

	// May make some objects with friendlier interfaces...
	//  And may use collection for this to store lists of strings.
	//  Like CSS flags at the moment.

	// Uses private variables.
	var Ordered_String_List = Class.extend({
		'init' : function() {
			// console.log('init osl sig ' + sig);

			var arr = [];
			var dict_indexes = {};

			var reindex_dict_indexes = function() {
				dict_indexes = {};
				for ( var c = 0, l = arr.length; c < l; c++) {
					dict_indexes[arr[c]] = c;
				}
			}

		    /**
            * Returns `true` if the passed value exists in the list.
            * @func
            * @alias has
            * @param {string} value
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            */
		    // (add), remove, get, get_all, has, put, move, splice
			this.has = function(value) {
				return (typeof dict_indexes[value] !== 'undefined');
			}

		    /**
            * Adds the passed value to the end of the list. Does nothing if the value already exists in the list.
            * @func
            * @alias put
            * @param {string} value
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            */
			this.put = function (value) {
				// by default puts it at the end.
				if (this.has(value)) {
					// stays in same place.
					// arr[dict_indexes[value]]
					// do nothing
				} else {
					var index = arr.length;
					arr.push(value);
					dict_indexes[value] = index;
				}

			}

		    /**
            * Removes the passed value from the list. Does nothing if the value does not exists in the list.
            * @func
            * @alias out
            * @param {string} value
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            */
			this.out = function (value) {
				if (this.has(value)) {
					var idx = dict_indexes[value];
					arr.splice(idx, 1);

					delete dict_indexes[value];

					for ( var c = idx, l = arr.length; c < l; c++) {
						var i = arr[c];
						dict_indexes[i]--;
					}
					// will need the items after it and lower their indexes.

				}
			}

		    /**
            * Toggles the passed value presence in the list: if the value already exists then removes it, or adds the value on other case.
            * @func
            * @alias toggle
            * @param {string} value
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            */
			this.toggle = function (value) {
				if (this.has(value)) {
					this.out(value);
				} else {
					this.put(value);
				}
			}

		    /**
            * Toggles the passed value to the specified position in the list. Does nothing if the value does not exists in the list.
            * @func
            * @alias move_value
            * @param {string} value
            * @param {number} index - new index for the value (zero-based)
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            * @example
            * var list = new Data_Structures.Ordered_String_List("v0 v1 v2");
            * list.move_value("v0", 1);
            * console.log(list.toString()); // "v1 v0 v2"
            */
			this.move_value = function (value, index) {
				if (this.has(value) && dict_indexes[value] != index) {

					// gets removed from current position, causes items after it
					// to move back.
					// gets put in new position, gets items after that to move
					// forwards.

					var old_index = dict_indexes[value];
					arr.splice(old_index, 1);

					arr.splice(index, 0, value);

					if (index < old_index) {
						// moving back.
						// dict_indexes[]
						dict_indexes[arr[index]] = index;
						// the index object of the one it

						// for (var c = index, l = arr.length; c < l; c++) {
						for ( var c = index + 1; c <= old_index; c++) {
							dict_indexes[arr[c]]++;
						}
					} else if (index > old_index) {
						dict_indexes[arr[index]] = index;
						for ( var c = old_index; c < index; c++) {
							dict_indexes[arr[c]]--;
						}
					}

				}

			}
			// for testing

			this._index_scan = function() {
				for ( var c = 0, l = arr.length; c < l; c++) {
					console.log('c ' + c + ' arr[c] ' + arr[c] + ' idx '
							+ dict_indexes[arr[c]]);
				};
			}

		    /**
            * Returns the string representation of the list: all the string values separated by space.
            * @func
            * @alias toString
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            */
			this.toString = function () {
				var res = arr.join(' ');
				return res;
			}

			this.toString.stringify = true;

		    /**
            * Sets the values in the list.
            * @func
            * @alias set
            * @param {string} values - space-separated list of values
            * @memberof module:core/jsgui-data-structures.Ordered_String_List
            * @instance
            */
			this.set = fp(function (a, sig) {
				if (sig == '[s]') {
					arr = a[0].split(' ');
					// console.log('arr ' + jsgui.stringify(arr));
					reindex_dict_indexes();
				}
			});

			// if (sig == '[s]') {
			// this.set(a[0]);
			// }

			var a = arguments;
			if (a.length == 1) {
				var spec = a[0];
				if (tof(spec) == 'string') {
					// console.log('setting');
					this.set(spec);
				}
			}

		}
	});

	
	
	var Data_Structures = {
		'Doubly_Linked_List': Doubly_Linked_List,
		'B_Plus_Tree': B_Plus_Tree,
		'Sorted_KVS': Sorted_KVS,
		'Ordered_KVS': Ordered_KVS,
		'Ordered_String_List': Ordered_String_List
		//'Sorted_KVS_Cursor': Sorted_KVS_Cursor
	}
	

	// var jsgui = {};
	// alert('returning jsgui from jsgui-lang');
	//return jsgui;
	
	// maybe should mix the data structures into jsgui.
	//  These data structures are likely to be necessary for various things
	
	
	
	
	
	//return Data_Structures;
    module.exports = Data_Structures;
//});
},{"./jsgui-data-structures-b-plus-tree":33,"./jsgui-data-structures-doubly-linked-list":34,"./jsgui-lang-essentials":38}],37:[function(require,module,exports){
// This is resulting in smaller code in other parts of the framework.
//  This section is getting quite big (again)
//  Still need to make use of the B+ free for ordered indexing.

// Moving some code to jsgui-lang-essentials
//  Will be publishing a 0.4 version of that before so long?
//   Maybe with more explanation?

// It may be worth publishing this, and a discussion forum about it on my own web forum.
//  Perhaps that could come later, but jsgui-lang-essentials may be a good step. Could call it version 0.35.
//   Could have a few examples
//   Would be a useful toolkit I could use while working elsewhere.

//  I think that web site would be lightening fast, and impress people with its speed compared to other web platforms that they are used to
//   (though Facebook is OK)

// This is going to be using data_types as well.
// Will also have a system of requirements.
//  That could mean they need to be both the right data type, as well as having some other specified properties.

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(["./jsgui-lang-util", "./enhanced-data-object"], function(jsgui, Enhanced_Data_Object) {

    */
var jsgui = require('./jsgui-lang-util');
var Enhanced_Data_Object = require('./enhanced-data-object');
	
	// Will use data structures.
	//  Not sure about using all of them here.
	
	// A mix-in system of enhancing the data structures may work best.
	//  It does not start with B+ tree, but that gets brought in?
	
	// However, having B+ as part of it could work quite nicely.
	var tof = jsgui.tof;
	var Collection = jsgui.Collection;
	var Data_Value = jsgui.Data_Value;

	jsgui.Enhanced_Data_Object = Enhanced_Data_Object;

	// Not sure about this for the moment.
	//  Quite a lot is going in lang-util.
	//jsgui.map_data_type_data_object_constructors = Enhanced_Data_Object.map_data_type_data_object_constructors;

	jsgui.Mini_Context = Enhanced_Data_Object.Mini_Context;

	// Maybe can give a context as well?

	var fromObject = function(value) {
		var tValue = tof(value);
		if (tValue == 'array') {
			var collRes = new Collection();

			for (var c = 0, l = value.length; c < l; c++) {
				collRes.push(fromObject(value[c]));
			}
			return collRes;

		}
		if (tValue == 'object') {
			var edoRes = new Enhanced_Data_Object();
			for (i in value) {
				edoRes.set(i, fromObject(value[i]));
			}
			return edoRes;
		}
		if (tValue == 'string') {
			var dvRes = new Data_Value({'value': value});
			return dvRes;
		}
		if (tValue == 'number') {
			var dvRes = new Data_Value({'value': value});
			return dvRes;
		}

	}

	jsgui.fromObject = fromObject;
	
    //Enhanced_Data_Object.prototype._get_input_processors = function() {
    //	return jsgui.input_processors;
    //}
    module.exports = jsgui;
	//return jsgui;

//});
},{"./enhanced-data-object":31,"./jsgui-lang-util":39}],38:[function(require,module,exports){
(function (Buffer){


   /**
    * lang essentials module.
    * @module core/jsgui-lang-essentials
    * @version 0.4.4
    */

/* Changelog:

	0.4.4
	-----
	Removed excess comments, inlcuding unused commented-out code

	0.4.3
	-----
	Added comment about changing arr_like_to_arr

	0.4.2
	-----

	Performance improvements, based on profiling
	isArray uses Array.isArray if available


*/

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}
*/

if (typeof window === 'undefined') {
    //exports.foo = {};
    var Stream = require('stream');
} else {
    //window.foo = {};
}


// needs to use node.js's stream for the moment.
// Will make a new jsgui-node-lang-essentials version because it's got node-specific & dependant code now.

//define(['Stream'],
//function (Stream) {


//define(function() {

    // ========================================================
    //                      Class
    // ========================================================

    // seems based on http://ejohn.org/blog/simple-javascript-inheritance/

    /**
    * Base class like John Resig's "Simple JavaScript Inheritance" tehnique.
    *
    * In addition, when the inherited class contains a property that name starts from '#',
    * then the property adds to the class without '#', and the property value is the base class property value,
    * but the base class property name used is the rest of the initial property name (after the '#').
    * @see [John Resig's "Simple JavaScript Inheritance"]{@link http://ejohn.org/blog/simple-javascript-inheritance/}
    * @name Class
    * @member
    * @memberof module:core/jsgui-lang-essentials
    */


	var initializing = false, fnTest = /xyz/.test(function() { xyz; }) ? /\b_super\b/ : /.*/;
	var Class = function() {
	};

	// not so sure of the utility of namespcExtension, propsToMerge
	Class.extend = function(prop) {
		var _super = this.prototype;
		initializing = true;
		var prototype = new this();
		initializing = false;
		for (var name in prop) {
			if (name.charAt(0) === '#') {
				prototype[name.substring(1)] = prototype[prop[name]];
			} else {
				prototype[name] = typeof prop[name] === 'function'
						&& typeof _super[name] === 'function'
						&& fnTest.test(prop[name]) ?
				// had some difficulty using fp() with 'init' functions. could
				// it have to do with function names?

				(function(name, fn) {
					return function() {
						var tmp = this._super;
						this._super = _super[name];
						var res = fn.apply(this, arguments);
						this._super = tmp;
						return res;
					};
				})(name, prop[name]) : prop[name];
			};
		};
		function Class() {
			//console.log('initializing ' + initializing);
			//console.log('!!this.init ' + !!this.init);
			if (!initializing && this.init) {
				this.init.apply(this, arguments);
				//if (this.post_init) {
				//	this.post_init();
				//}
			}
		};
		Class.prototype = prototype;
		Class.prototype.constructor = Class;
		//Class.constructor = Class;
		Class.extend = arguments.callee;
		//Class._superclass = _super;

		Class._superclass = this;

		return Class;
	};


    // ========================================================
    //                      functions
    // ========================================================



    /**
    * Break iteration callback function.
    * @example
    * jsgui.each([1, 2, 3, 4, 5], function(index, element, stop){
    *    if (element > 3) stop();
    * });
    *
    * jsgui.eac([1, 2, 3, 4, 5], function(element, index, stop){
    *    if (element > 3) stop();
    * });
    *
    * @callback module:core/jsgui-lang-essentials.stopIterationCallback
    */

    /**
    * Array iterator callback function.
    *
    * @callback module:core/jsgui-lang-essentials.arrayIteratorCallback
    * @param {number} index
    * @param {*} element
    * @param {module:core/jsgui-lang-essentials.stopIterationCallback} stop
    */

    /**
    * Object iterator callback function.
    *
    * @callback module:core/jsgui-lang-essentials.objectIteratorCallback
    * @param {string} key
    * @param {*} value
    * @param {module:core/jsgui-lang-essentials.stopIterationCallback} stop
    */


    /**
    * Iterates over a collection calling the collection.each(fn, context) method.
    *
    * @name each
    * @func
    * @param {Collection} collection - collection of elements
    * @param {function} fn - iterator function
    * @param {Object} [context] - context object
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * // TODO..............
    *
    */


    /**
    * Iterates over the array elements. The iterator function calls for each element: fn(index, element, stop):
    * - index: the element index
    * - element: the element value
    * - stop: call this function to prevent further iterations
    *
    * The iterator function is bound to the context object, if passed.
    *
    * @name each
    * @func
    * @param {Array} arr - array of elements
    * @param {module:core/jsgui-lang-essentials.arrayIteratorCallback} fn - iterator function
    * @param {Object} [context] - context object
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.each([1, 2, 3, 4, 5], function(index, element, stop){
    *    console.log(index + ":" + element);  // 0:1 1:2 2:3 3:4 4:5
    *    if (index > 1000) stop();
    * });
    *
    */


    /**
    * Iterates over the object properties. The iterator function calls for each element: fn(key, value, stop):
    * - key: the property key
    * - value: the property value
    * - stop: call this function to prevent further iterations
    *
    * The iterator function is bound to the context object, if passed.
    *
    * @name each
    * @func
    * @param {Object} obj - object
    * @param {module:core/jsgui-lang-essentials.objectIteratorCallback} fn - iterator function
    * @param {Object} [context] - context object
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.each({a: 1, b: 2}, function(key, value, stop){
    *    if (key == "secretKey"){
    *      stop();
    *      return;
    *    }
    *    console.log(key + ":" + value);  // a:1  b:2
    * });
    *
    */
	// new addition with the loop being stoppable using a function call. 18/06/2012
	var each = function(collection, fn, context) {
		// each that puts the results in an array or dict.
		if (collection) {

			if (collection.__type == 'collection') {
				return collection.each(fn, context);
			}

			// could have a break function that stops the loop from continuing.
			//  that would be useful as a third parameter that can get called.
			//  stop() function
			var ctu = true;
			var stop = function() {
				ctu = false;
			}

			if (is_array(collection)) {
			    var res = [], res_item;
				for (var c = 0, l = collection.length; c < l; c++) {
					res_item;
					if (ctu == false) break;

					if (context) {
						res_item = fn.call(context, c, collection[c], stop);

					} else {
						res_item = fn(c, collection[c], stop);
					}
					res.push(res_item);
				}
				return res;
			} else {
				var name, res = {};
				for (name in collection) {
					if (ctu == false) break;
					if (context) {
					    res[name] = fn.call(context, name, collection[name], stop);
					} else {
						res[name] = fn(name, collection[name], stop);
					}
				}
				return res;
			}
		}

	};

    /**
    * Array iterator callback function.
    *
    * @callback module:core/jsgui-lang-essentials.arrayIteratorCallback-eac
    * @param {number} index
    * @param {*} element
    * @param {module:core/jsgui-lang-essentials.stopIterationCallback} stop
    */

    /**
    * Object iterator callback function.
    *
    * @callback module:core/jsgui-lang-essentials.objectIteratorCallback-eac
    * @param {string} key
    * @param {*} value
    * @param {module:core/jsgui-lang-essentials.stopIterationCallback} stop
    */

    /**
    * Iterates over a collection calling the collection.each(fn, context) method.
    *
    * <mark>maybe collection.each() must be changed to collection.eac()?</mark>
    *
    * @name eac
    * @func
    * @param {Collection} collection - collection of elements
    * @param {function} fn - iterator function
    * @param {Object} [context] - context object
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * // TODO.......
    *
    */

    /**
    * Iterates over an array, just like the [each()]{@link module:core/jsgui-lang-essentials.each} function, but the iterator function parameters order is changed:<br>
    * `fn(element, index, stop)` instead of `fn(index, element, stop)`
    *
    * Better each function, first param of callback is obj, 2nd is index. Will replace all each functions with this version then change the name to each.
	*  Useful for new code.
    *
    * @name eac
    * @func
    * @param {Array} arr - array of elements
    * @param {module:core/jsgui-lang-essentials.arrayIteratorCallback-eac} fn - iterator function
    * @param {Object} [context] - context object
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.each([1, 2, 3, 4, 5], function(element, index, stop){
    *    console.log(index + ":" + element);  // 0:1 1:2 2:3 3:4 4:5
    *    if (index > 1000) stop();
    * });
    *
    */

    /**
    * Iterates over the object properties, just like the [each()]{@link module:core/jsgui-lang-essentials.each} function, but the iterator function parameters order is changed:<br />
    * `fn(value, key, stop)` instead of `fn(key, value, stop)`
    *
    * Better each function, first param of callback is obj, 2nd is index. Will replace all each functions with this version then change the name to each.
	*  Useful for new code.
    *
    * @name eac
    * @func
    * @param {Object} obj - object
    * @param {module:core/jsgui-lang-essentials.objectIteratorCallback-eac} fn - iterator function
    * @param {Object} [context] - context object
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.eac({a: 1, b: 2}, function(value, key, stop){
    *    if (key == "secretKey"){
    *      stop();
    *      return;
    *    }
    *    console.log(key + ":" + value);  // a:1  b:2
    * });
    *
    */
	var eac = function (collection, fn, context) {
		// each that puts the results in an array or dict.
		if (collection) {

			if (collection.__type == 'collection') {
				return collection.eac(fn, context);
			}

			// could have a break function that stops the loop from continuing.
			//  that would be useful as a third parameter that can get called.
			//  stop() function
			var ctu = true;
			var stop = function() {
				ctu = false;
			}

			if (is_array(collection)) {
				var res = [], res_item;
				for (var c = 0, l = collection.length; c < l; c++) {
					res_item;
					if (ctu == false) break;

					if (context) {
						res_item = fn.call(context, collection[c], c, stop);

					} else {
						res_item = fn(collection[c], c, stop);
					}
					res.push(res_item);
				}
				return res;
			} else {
				var name, res = {};
				for (name in collection) {
					if (ctu == false) break;
					if (context) {
						res[name] = fn.call(context, collection[name], name, stop);
					} else {
						res[name] = fn(collection[name], name, stop);
					}
				}
				return res;
			}
		}
	};



	var jq_class2type = {};
	var jq_type = function (obj) {
	    //return obj == null ? String(obj) : jq_class2type[toString.call(obj)] || "object";
	    if (obj == null) return String(obj);
	    var s = Object.prototype.toString.call(obj);
	    return jq_class2type[s] || "object";
	};



    /**
    * Returns `true` if the passed `obj` is an `Array`. Delegates to the native `Array.isArray()` function if it exists.
    * @func
    * @param {Object} obj - object to check
    * @memberof module:core/jsgui-lang-essentials
    */
	var is_array = Array.isArray || function (obj) {
	        return jq_type(obj) === "array";
	};

    /**
    * Returns `true` if the passed `obj` is a DOM node. Uses the duck typing.
    * @func
    * @param {Object} obj - object to check
    * @memberof module:core/jsgui-lang-essentials
    */
    var is_dom_node = function isDomNode(obj) {
		return (!!obj && typeof obj.nodeType != 'undefined' && typeof obj.childNodes != 'undefined');
	};


    jq_class2type["[object Boolean]"] = "boolean";
    jq_class2type["[object Number]"] = "number";
    jq_class2type["[object String]"] = "string";
    jq_class2type["[object Function]"] = "function";
    jq_class2type["[object Array]"] = "array";
    jq_class2type["[object Date]"] = "date";
    jq_class2type["[object RegExp]"] = "regexp";
    jq_class2type["[object Object]"] = "object";

    /* each() calls isArray(), isArray() calls jq_type(), jq_type() uses jq_class2type[] in turn
    each("Boolean Number String Function Array Date RegExp Object".split(" "),
		function(i, name) {
			if (typeof(name) == 'string') {
		        jq_class2type["[object " + name + "]"] = name.toLowerCase();
		    }
		});*/

	/*
	 * var jq_type = function( obj ) { return obj == null ? String(obj):
	 * jq_class2type[toString.call(obj)] || "object"; };
	 */

	var jq_isFunction = function(obj) {
		return jq_type(obj) === "function";
	};

	var jq_isWindow = function(obj) {
		return obj && typeof obj === "object" && "setInterval" in obj;
	};

	var hasOwn = Object.prototype.hasOwnProperty;

	var jq_isPlainObject = function(obj) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor
		// property.
		// Make sure that DOM nodes and window objects don't pass through, as
		// well
		if (!obj || jq_type(obj) !== "object" || obj.nodeType
				|| jq_isWindow(obj)) {
			return false;
		}

		// Not own constructor property must be Object
		if (obj.constructor && !hasOwn.call(obj, "constructor")
				&& !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
			return false;
		}
		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for (key in obj) {
		}

		return key === undefined || hasOwn.call(obj, key);
	};

	// jQuery Extend

    /**
    * Merge the contents of two or more objects together into the first object. Returns the updated object.
    * If only one parameter is passed, the extends `this`.
    * @func
    * @param {boolean} [deep] - if true, performs recursive deep copy. if false or omitted, performs simple reference copy.
    * @param {(object|array)} [target] - target object; if omitted then `this` is used.
    * @param {...(object|array)} extender - object(s) to add the content
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *   jq_extend({a:1}, {b:2})  ==> {a:1, b:2}
    *   jq_extend([1,2,3], [4,5])  ==> [4,5,3]
    *
    *   var ext = {sub2:{prop2:2}};
    *   var result1 = jq_extend(true, {}, ext)  ==> {sub2:{prop2:2}}
    *   var result2 = jq_extend(false, {}, ext)  ==> {sub2:{prop2:2}}
    *   ext.sub2.prop2 = 20;  ==> (result1.sub2.prop2 == 2) & (result2.sub2.prop2 == 20)
    */
	var jq_extend = function() {
		var options, name, src, copy, copyis_array, clone, target = arguments[0]
				|| {}, i = 1, length = arguments.length, deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}
		// Handle case when target is a string or something (possible in deep
		// copy)
		if (typeof target !== "object" && !jq_isFunction(target)) {
			target = {};
		}

		// (extend (jQuery) itself if only one argument is passed) no longer in
		// jQuery
		if (length === i) {
			target = this;
			--i;
		}

		for (; i < length; i++) {
			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {
				// Extend the base object

				// nope... need to go through all items in the array if its an
				// array, copying undefined as needed.

				if (is_array(options)) {

					// could maybe use each here anyway.
					// but a direct function may be faster.

					for ( var name = 0, l = options.length; name < l; name++) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep
								&& copy
								&& (jq_isPlainObject(copy) || (copyis_array = is_array(copy)))) {
							if (copyis_array) {
								copyis_array = false;
								clone = src && is_array(src) ? src : [];
							} else {
								clone = src && jq_isPlainObject(src) ? src : {};
							}
							// Never move original objects, clone them
							target[name] = jq_extend(deep, clone, copy);
							// Don't bring in undefined values???
						} // else if ( copy !== undefined ) {
						else {
							target[name] = copy;
						}
					}

				} else {
					for (name in options) {

						// console.log('name ' + name);

						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep
								&& copy
								&& (jq_isPlainObject(copy) || (copyis_array = is_array(copy)))) {
							if (copyis_array) {
								copyis_array = false;
								clone = src && is_array(src) ? src : [];
							} else {
								clone = src && jq_isPlainObject(src) ? src : {};
							}
							// Never move original objects, clone them
							target[name] = jq_extend(deep, clone, copy);
							// Don't bring in undefined values
						} else if (copy !== undefined) {
							target[name] = copy;
						}
					}
				}

			}
			// console.log('arguments[i] ' + stringify(arguments[i]));
			// console.log('options ' + stringify(options));
		}
		// Return the modified object
		// console.log('target ' + stringify(target));
		return target;
	};

    /**
    * Alias to the [jq_extend()]{@link module:core/jsgui-lang-essentials.jq_extend} function.
    * @func
    * @memberof module:core/jsgui-lang-essentials
    */
    var extend = jq_extend;

	/*
	var x_clones = function(obj, x) {

	};
	*/

    /**
    * Returns a truth map created from the given array.
    *
    * The truth map is an object containing key/value pairs; the keys are the array elements, the values are all true.
    * @example get_truth_map_from_arr(["a", "b", "c"]) ==> { a: true, b: true, c: true}
    * @func
    * @param {Array} arr - source array
    * @memberof module:core/jsgui-lang-essentials
    */
	var get_truth_map_from_arr = function(arr) {
		var res = {};
		each(arr, function(i, v) {
			res[v] = true;
		});
		return res;
	};

    /**
    * Returns a map created from the given array.
    *
    * The map is an object containing key/value pairs; the keys are the array elements, the values are the array indexes.
    * @example get_map_from_arr(["a", "b", "c"]) ==> { a: 0, b: 1, c: 2}
    * @func
    * @param {Array} arr - source array
    * @memberof module:core/jsgui-lang-essentials
    */
	// not a truth map because 0 == false. Could use this but do different
	// check, like is_defined.
	var get_map_from_arr = function(arr) {
		var res = {};
		for (var c = 0, l = arr.length; c < l; c++) {
			res[arr[c]] = c;
		}
		//each(arr, function(i, v) {
		//	res[v] = i;
		//});
		return res;
	}

	//var arrSliceCall = Array.prototype.slice.call;

    /**
    * Returns an array created from the given "array-like" object (e.g. `arguments`).
    * @func
    * @param {Object|Array} arr_like - the array-like object
    * @example
    * function example(){
    *    var arguments_array = arr_like_to_arr(arguments);
    *    console.log(arguments_array);
    * }
    * @memberof module:core/jsgui-lang-essentials
    */
	var arr_like_to_arr = function(arr_like) {
		// like an arguments list
		// is this working in Safari?

		//var res = [];
		//return arrSliceCall(arr_like, 0);


		//return Array.prototype.slice(arr_like);
		// May have better way of doing this.



		var res = new Array(arr_like.length);


		// This was not working in Safari! Worked in Chrome. Probably
		// (mis?)recognised it as an object.
		// each(arr_like, function(i, v) {
		// res.push(v);
		// });

		for (var c = 0, l = arr_like.length; c < l; c++) {
			//res.push(arr_like[c]);
			res[c] = arr_like[c];
		};
		return res;
	};



	// Could do better... could check actual instanceof
	//  But a more advanced jsgui level could do this check, and have its own tof function.
	//  That would be jsgui-lang-html has the check for is control.

    /**
    * <mark>description...</mark>
    * @func
    * @memberof module:core/jsgui-lang-essentials
    */
	var is_ctrl = function(obj) {
		return (typeof obj != 'undefined' && obj != null && is_defined(obj._) && is_defined(obj.__type_name));
	};


    // Also a bit of node.js specific code.
    //  May make node version of jsgui-lang-essentials, jsgui-node-lang-essentials.

    /**
    * Returns the type of the given object as a string. If the t1 parameter is passed, then returns t1 for all the t1 values excepting 'object' one.
    * Possible results are:
    * - "number"
    * - "string"
    * - "function"
    * - "boolean"
    * - "object"
    * - "undefined"
    * - "null"
    * - <mark>obj.__type</mark>
    * - "date"
    * - "array"
    * - "control"
    * - "regex" (obj instanceof RegExp)
    * - "buffer" (obj instanceof Buffer)
    * - "readable_stream" (obj instanceof Stream.Readable)
    * - "writable_stream" (obj instanceof Stream.Writable)
    * @func
    * @param {*} obj - object to inspect type
    * @param {string} [t1] - type to return (?)
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * tof(1) ==> "number"
    * tof([]) ==> "array"
    * tof(1, "myType") ==> "myType"
    * tof(1, "object") ==> "object"
    * tof([], "object") ==> "array"
    */
	// may change to the jq_type code.
	var tof = function(obj, t1) {
		var res = t1 || typeof obj;

		if (res === 'number' || res === 'string' || res === 'function' || res === 'boolean') {
		    return res;
		}


		if (res === 'object') {

			if (typeof obj !== 'undefined') {

				if (obj === null) {
					return 'null';
				}



				//console.log('typeof obj ' + typeof obj);
				//console.log('obj === null ' + (obj === null));

				if (obj.__type) {
					return obj.__type;
				} else {

          if (is_ctrl(obj)) {
              //return res;
              return 'control';
          }

					// Inline array test, earlier on?

					if (obj instanceof Date) {
						return 'date';
					}


					if (is_array(obj)) {
				        //res = 'array';
				        //return res;
				        return 'array';
				    } else {

				        if (obj instanceof RegExp) res = 'regex';

				        // For running inside Node.
				        //console.log('twin ' + typeof window);
				        if (typeof window === 'undefined') {
				        	//console.log('obj.length ' + obj.length);
				        	if (obj instanceof Buffer) res = 'buffer';

							if (obj instanceof Stream.Readable) res = 'readable_stream';
							if (obj instanceof Stream.Writable) res = 'writable_stream';
				        }


				    }
				    //console.log('res ' + res);
					return res;

				}
			} else {
				return 'undefined';
			}

		}

		return res;
	};

	// Bug for a test case - checking if a function is an instanceOf stream.

    /**
    * Returns an array containing type strings for the passed array elements. The type strings are made using the [tof()]{@link module:core/jsgui-lang-essentials.tof} function.
    * @func
    * @param {Array} arr - source array
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * atof([1, "", null]) ==> ["number", "string", "null"]
    */
	var atof = function(arr) {

		var res = new Array(arr.length);
		//each(arr, function(i, v) {
		//	res.push(tof(v));
		//});
		for (var c = 0, l = arr.length; c < l; c++) {
			//res.push(tof(arr[c]));
			res[c] = tof(arr[c]);
		}

		return res;
	};

    /**
    * Returns true if the value is defined (e.g. not equals to undefined)
    * @func
    * @param {*} value - value to check
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * is_defined(Math.PI) ==> true
    * is_defined(Math.PI_PI_PI) ==> false
    */
	var is_defined = function(value) {
		// tof or typeof

		return typeof (value) != 'undefined';
	}, isdef = is_defined;

	var is_data_object = function(obj) {

		if(obj) {
			if (obj.__type == 'data_object') return true;
			if (obj.__type == 'collection') return true;
		}

		//this.__type = 'collection'

		return false;

	}

	// will test for control using similar means as well.

	var is_collection = function(obj) {
		//if (obj.__type == 'data_object') return true;

		if (obj) {
			if (obj.__type == 'collection') return true;
		}


		//this.__type = 'collection'

		return false;

	}

    /**
    * Outputting a string in a convenient format - currently JSON.
    * @func
    * @param {*} obj - value to convert
    * @param {bool} [includeFunctions] - if true, then include functions to the result
    * @param {array(string)} [excludingProps] - exclude the listed object properties from the result
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * stringify(1) ==> '1'
    * stringify("1") ==> '"1"'
    * stringify([1, "a", null]) ==> '[1, "a", null]'
    * stringify({p1:1, p2:"a", p3:null}) ==> '{"p1": 1, "p2": "a", "p3": null}'
    */
	var stringify = function(obj, includeFunctions, excludingProps) {

		var _stringify = function(obj, includeFunctions, callerObjItem) {

			//_stringify(a, b, { prev: callerObjItem, obj: obj });

			var isCircularReference = function(obj, callerObjItem){
				while(callerObjItem){
					if (callerObjItem.obj === obj) return true;
					callerObjItem = callerObjItem.prev;
				}
				return false;
			};

			if (isCircularReference(obj, callerObjItem)) return "(CircularRef)";

			// Likely optimization: use array to build the string, then join it for
			// the result.
			// Now updated.
			// Could probably use polymorphism here and save space

			// Designed for stringifying specs including functions in mind.

			// Could use tof as well... I think that would make a lot of sense.

			var t = typeof obj, res = [];

			// to stringify a collection?

			if (obj === String) {
				return 'JS_String';
			}

			if (t == 'object') {
				// will be testing it to see if it is a Data_Object
				//  and then if it is a Collection


				if (obj && is_defined(obj.stringify)) {
					return obj.stringify();
				} else {

					var ia = is_array(obj);
					if (ia) {
						// res = res + '[';
						res.push('[');
						var first = true;
						for ( var c = 0; c < obj.length; c++) {
							// if (!first) res = res + ', ';
							if (!first)
								res.push(', ');
							// res = res + stringify(obj[c]);
							//res.push(_stringify(obj[c], undefined, { prev: callerObjItem, obj: obj }));
							res.push(_stringify(obj[c], includeFunctions, { prev: callerObjItem, obj: obj }));
							first = false;
						}
						;
						// res = res + ']';
						res.push(']');
					} else if (obj == null) {
						res = [ 'null' ];
						// don't do this is_control test.
					//} else if (is_ctrl(obj)) {
						// res = res + '{"ctrl": "' + obj.id() + '"}';
					//	res.push('{"ctrl": "' + obj.id() + '"}');
					} else {
						// console.log('obj ' + obj);

						// a way of checking for a non-native toString?
						if (is_defined(obj.toString) && obj.toString.stringify === true) {
							res.push('"' + obj.toString() + '"');
						} else {
						    var propIsPrintable = function (name, value) {
						        if (!includeFunctions && tof(value) === 'function') return false;
						        //
						        if (excludingProps) {
						            for (var i = 0; i < excludingProps.length; i++) {
						                if (name == excludingProps[i]) return false;
						            }
						        }
						        //
						        return true;
						    };
                            //
							var first = true;
							// res = res + '{';
							res.push('{');
							each(obj, function(i, v) {
								//console.log(tof(v));
								//
								//var propIsPrintable = true;
								//if (propIsPrintable && !includeFunctions && tof(v) === 'function') propIsPrintable = false;
								//if (propIsPrintable && excludingProps && excludingProps.indexOf(i)>=0) propIsPrintable = false;
								//
								/*if (includeFunctions !== false
										&& tof(v) !== 'function') {
									// if (!first) res = res + ', ';
									if (!first)
										res.push(', ');
									// res = res + '"' + i + '": ' +
									// stringify(v);
									res.push('"' + i + '": ' + _stringify(v, undefined, { prev: callerObjItem, obj: obj }));
									first = false;
								}*/
								//
							    if (propIsPrintable(i, v)) {
							        if (!first) res.push(', ');
							        //res.push('"' + i + '": ' + _stringify(v, undefined, { prev: callerObjItem, obj: obj }));
							        res.push('"' + i + '": ' + _stringify(v, includeFunctions, { prev: callerObjItem, obj: obj }));
							        first = false;
							    }
							});
							// res = res + '}';
							res.push('}');
						}
					};

				}

			} else if (t == 'string') {
				// Escape characters in JSON string?
				// res = '"' + obj + '"';
				res.push('"' + obj + '"');
			} else if (t == 'undefined') {
				res = [ 'undefined' ];
			} else if (t == 'function') {
				//if (includeFunctions !== false) {
				if (!!includeFunctions) {
					res = [obj.toString()];
				}
			} else {
				res = [obj.toString()];
			}
			return res.join('');
		}; // var _stringify =

		return _stringify(obj, includeFunctions);
	};



    /**
    * Returns a type signature for the given value.
    * Possible results are:
    * - "s" (string)
    * - "n" (number)
    * - "b" (boolean)
    * - "f" (function)
    * - "a" (array)
    * - "o" (object)
    * - "u" (undefined)
    * - "!" (null)
    * - "c" (control)
    * - "r" (RegEx)
    * - "B" (Buffer)
    * - "R" (readable_stream)
    * - "W" (writable_stream)
    * - "X" (collection_index)
    * - "D" (data_object)
    * - "~D" (abstract data_object)
    * - "V" (data_value)
    * - "~V" (abstract data_value)
    * - "C" (collection)
    * - "~C" (abstract collection)
    * @func
    * @param {*} i - value to get the type signature
    * @param {*} [arr_depth] - array nesting depth to include the array element signatures
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * get_item_sig(1) ==> 'n'
    * get_item_sig("1") ==> 's'
    * get_item_sig([1, 2]) ==> 'a'
    * get_item_sig([1, 2], 1) ==> '[n,n]'
    */

  var get_a_sig = function(a) {
    // For arguments
    // String building optimized for newer JS?

    var c = 0, l = a.length;
    var res = '[';
    var first = true;
    for (c = 0; c < l; c++) {
      if (!first) {
        res = res + ',';
      } else {
        first = false;
      }
      res = res + get_item_sig(a[c]);
    }

    res = res + ']';
    return res;

  }


	var get_item_sig = function(i, arr_depth) {

	    // an option about how far into the array to look.



		// also want to be able to do polymorphic rearrangements.
		// these will need to be specified so they get rearranged as required.
		// will check for some signatures and rearrange the arguments, and
		// return that array. Will be useful all over the place in the library.

		// v2 = [i, i], v3 = [i, i, i]
		// or even i2 = [i, i]? maybe not for the moment, plenty of
		// simplification already, could maybe express things like that at some
		// stage.

		// rearrangement - '[i, i], s' <- 's, [i, i]'
		// if second arrangement, output the items in the order given.
		// that seems to require parsing these signature strings.

		// returns the polymorphic signature.
		// same for each item in the array.

		// will get the poly signature for each item in the array?
		// is it an array?


		var res;
		var t1 = typeof i;

		// could possibly have two functions - one that will be very fast, and a more dynamic, slower one.



		if (t1 === 'string') {
			res = 's';
		} else if (t1 === 'number') {
			res = 'n';
		} else if (t1 === 'boolean') {
			res = 'b';
		} else if (t1 === 'function') {
			res = 'f';
		} else {
			var t = tof(i, t1);

			//if (i === 0) {
				//console.log('i ' + i);
				//console.log('t ' + t);
			//}

      // But with array-like?



			//console.log('i ' + i);
			//console.log('t ' + t);

			// likely to use a map for this logic instead.
			// console.log('t ' + t);
			if (t === 'array') {

			    // look into it with one nested level...
			    if (arr_depth) {
			        res = '['
	                for (var c = 0, l = i.length; c < l; c++) {
	                    if (c > 0) res = res + ',';
	                    res = res + get_item_sig(i[c], arr_depth - 1);
	                }
	                res = res + ']';
			    } else {
			        res = 'a';
			    }
			    //console.log('res* ' + res);

				// return res;
			//} else if (t == 'string') {
				// is it a string that parses to an integer?
				// parses to a decimal number
				// parses to an rgb value
				// parses to hex value
				// various string regexs used (optionally), can say what we are
				// looking for (for various parameters).
				// may want a quick basic poly.

			//	res = 's';
			//} else if (t == 'boolean') {
			//	res = 'b';
			//} else if (t == 'function') {
			//	res = 'f';
    } else if (t === 'control') {
				res = 'c';
			} else if (t === 'date') {
				res = 'd';
			} else if (t === 'regex') {
				res = 'r';
			} else if (t === 'buffer') { // may remove for non node.js.
				res = 'B';
			//} else if (t == 'stream') { // may remove for non node.js.
			//	res = 'S';

			// Will also incorporate dubplex and transformation streams.

    } else if (t === 'readable_stream') { // may remove for non node.js.
				res = 'R';
			} else if (t === 'writable_stream') { // may remove for non node.js.
				res = 'W';
			//} else if (t == 'number') {
				// is it an integer?
				// is it a decimal?

				// are we checking for those anyway? maybe not by default.

			//	res = 'n';
    } else if (t === 'object') {

				// not sure about showing all the details of the object.

				res = 'o';
			} else if (t === 'undefined') {
				res = 'u';
			} else {

				if (t == 'collection_index') {
					return 'X';
				} else if (t === 'data_object') {
					if (i._abstract) {
						res = '~D';
					} else {
						res = 'D';
					}


				} else {
					if (t === 'data_value') {
						if (i._abstract) {
							res = '~V';
						} else {
							res = 'V';
						}


					} else if (t === 'null') {
						res = '!';
					} else if (t === 'collection') {
						if (i._abstract) {
							res = '~C';
						} else {
							res = 'C';
						}

					} else {


						//console.log('t ' + t);
						throw 'Unexpected object type ' + t;
					}
				}

				// May have decimal type as well?

				// d for the moment?
				//  May want decimal numbers too?
				//  D is better for Data_Object.

				// c for Control
				// C for Collection

				// Could say Data_Object is D
				// Collection is C?

			}
		}
		return res;

	};


    /**
    * Removes the leading and trailing square brackets from the signature, if the brackets are presented.
    * @func
    * @param {string} sig - the signature
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * trim_sig_brackets("[n]") ==> "n"
    * trim_sig_brackets("n") ==> "n"
    */
	var trim_sig_brackets = function(sig) {
	    if (tof(sig) === 'string') {
	        if (sig.charAt(0) == '[' && sig.charAt(sig.length - 1) == ']') {
				return sig.substring(1, sig.length - 1);
			} else {
				return sig;
			}
		}
	};

    /**
    * Returns an array without the trailing undefined values, made from the array-like source.
    * @func
    * @param {array-like} arr_like - the source
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * arr_trim_undefined([undefined, 1, undefined]) ==> [undefined, 1]
    */
	var arr_trim_undefined = function(arr_like) {
		var res = [];
		var last_defined = -1;
		var t, v;
		for (var c = 0, l = arr_like.length; c < l; c++) {
			v = arr_like[c];
			t = tof(v);
			if (t == 'undefined') {

			} else {
				last_defined = c;
			}
		}

		for (var c = 0, l = arr_like.length; c < l; c++) {
			if (c <= last_defined) {
				res.push(arr_like[c]);
			}
		}
		return res;
	};

    /**
    * Helps to create a polymorphic version of the passed function. The function will get 2 parameters: `a` and `sig`.
    * Array `a` will contains the actual parameters, `a.l` property will contains the parameters count.
    * The `sig` parameter will contains the parameter types array signature. The function will use these parameters
    * to select a required polymorphic code branch to execute.
    * @func
    * @param {*} [options] - not used
    * @param {function} fn - the function
    * @memberof module:core/jsgui-lang-essentials
    * @example
    * var myFunc = functional_polymorphism(function(a, sig){
    *    return stringify(a) + ": " + sig;
    * });
    *
    * myFunc(1, "a", [null])  ==>  '[1, "a", [null]]: [n,s,a]'
    *
    */
	var functional_polymorphism = function(options, fn) {
		var a0 = arguments;
		if (a0.length === 1) {
			fn = a0[0];
			options = null;
		}

		//is there a this?

		//var that = this;
		//var _super = that._super;

		// not having access to this here
		var arr_slice = Array.prototype.slice;
		var arr, sig, a2, l, a;

		return function() {

			//that = this;

			// not sure we want super here?
			//  We hardly ever use this, it would slow things down.
			//var _super = that._super;

			a = arguments;
			// and if there is an array of arguments given... give as one
			// argument.
			l = a.length;

			if (l === 1) {
				sig = get_item_sig([a[0]], 1);
				//console.log('fp sig, a.l == 1 ' + sig);
				// a 'l' property given to array given
				a2 = [a[0]];
				a2.l = 1;
				//return fn.call(that, a2, sig, _super);
				return fn.call(this, a2, sig);
			} else if (l > 1) {
				//var arr = arr_like_to_arr(a);
				//var arr = arr_slice.call(a, 0);
				//
				arr = arr_trim_undefined(arr_slice.call(a, 0));

				//arr = arr_trim_undefined(arr);
				//var sig = get_item_sig(arr, 1);
				sig = get_item_sig(arr, 1);
				//arr.l = l;
				arr.l = arr.length;
			    //console.log('arr.l ' + arr.l);
				//return fn.call(that, arr, sig, _super);
				return fn.call(this, arr, sig);
			} else if (a.length === 0) {
				arr = new Array(0);
				arr.l = 0;
				//return fn.call(that, arr, '[]', _super);
				return fn.call(this, arr, '[]');
			}
		}
	};

    /**
    * A shortcut for the [functional_polymorphism()]{@link module:core/jsgui-lang-essentials.functional_polymorphism} function.
    * @func
    * @memberof module:core/jsgui-lang-essentials
    */
    var fp = functional_polymorphism;


    /**
    * Returns an array containing [key, value] arrays of the passed object properties.<br />
    *
    * @name arrayify
    * @func
    * @param {object} obj - arrayifing object
    * @memberof module:core/jsgui-lang-essentials
    *
    * @example
    *
    * arrayify({a: 1, b: 2})  ==> [["a", 1], ["b", 2]]
    *
    */


    /**
    * Returns an arrayified version of the function. The arrayified version accepts an array of values instead of single value for some parameter.
    * For example: `func(a, b) ==> arrayified_func([a], b)`
    * The original function will be called several times, one time for each value from the array. The result of the arrayified function
    * will be an array containing the original function return values.
    *
    * By default it arrayifies the first parameter. You can specify the arrayifying parameter index as the first argument of the arrayify() function: <br />
    * `arrayify(func)  ==>  arrayified_func([a], b, c, d, ...)` <br />
    * `arrayify(2, func)  ==>  arrayified_func(a, b, [c], d, ...)`
    *
    * You can arrayify an async function as well. If the very last argument passed to the arrayified version is function, then this case is considered
    * as async function call. The last parameter is considered as a callback function receiving the async array processing final result. The callback
    * format is `callback(error, result)`, where `error` is an error object or null, and `result` is the result array.
    *
    * The original async function must call a callback function in turn. The callback function is passed as a last argument to the async function
    * call, following the usual [call_multiple_callback_functions()]{@link module:core/jsgui-lang-essentials.call_multiple_callback_functions} rules.
    *
    * @func
    * @param {number} [param_index = 0] - arrayifing parameter index
    * @param {function} fn - arrayifing function
    * @memberof module:core/jsgui-lang-essentials
    *
    * @example
    *
    * // ------- arrayifing a function: -------
    *
    * var multiply = function (a, b) {
    *     return a * b;
    * };
    *
    * // multiply([a], b):
    *
    * var arrayified_multiply = jsgui.arrayify(multiply);
    *
    * console.log(arrayified_multiply([1, 5, 10], 2));  // [2, 10, 20]);
    *
    * // multiply(a, [b]):
    *
    * var arrayified_multiply2 = jsgui.arrayify(1, multiply);
    *
    * console.log(arrayified_multiply2(10, [1, 5, 10])); // [10, 50, 100]);
    *
    *
    * // ------- arrayifing an async function: -------
    *
    * var asyncMultiply = function (a, b, cb) {
    *     setTimeout(function () { cb(null, a * b); }, 1000);
    * };
    *
    * var arrayified_asyncMultiply = jsgui.arrayify(asyncMultiply); // asyncMultiply([a], b, cb)
    *
    * var callback = function (error, result) {
    *     console.log(error);  // null
    *     console.log(result); // [2, 10, 20]);
    *     done();
    * };
    *
    * arrayified_asyncMultiply([1, 5, 10], 2, callback);
    *
    */
	var arrayify = fp(function(a, sig) {
        // but when the function has it's last parameter as a function...
        //  can we assume it is a callback?
        // when given a whole bunch of strings (or numbers) these can be used to make a map for the results.
        //  ie for load_file could give a bunch of string files, it loads them, can provide the results as one object.
        // may also want to specify if functions get called in parallel, and the limit to how many get called at once.
        // this could take options in the signature - be able to return a results map.
		// What about arrayifying a map rather than a function?
		// Turns it into name/value pairs. Easier to process with each or
		// measure the length of.

		// what about a pf function that provides an 'a' map.
		// has whatever properties have been provided and asked for.
		var param_index, num_parallel = 1, delay = 0, fn;
		// (param_index, fn)
		var res;
		var process_as_fn = function() {
		    //console.log('process_as_fn');
			res = function() {
				// could use pf here? but maybe not
				//console.log('arguments.length ' + arguments.length);
				//console.log('arguments ' + stringify(arguments));
				var a = arr_like_to_arr(arguments), ts = atof(a), t = this;
			    //console.log('a ' + stringify(a));
                var last_arg = a[a.length - 1];
                //console.log('last_arg ' + last_arg);
                //console.log('a.length ' + a.length);
                if (tof(last_arg) == 'function') {
                    // it seems like a callback function.

                    // will do callback result compilation.

                    //console.log('ts[param_index] ' + ts[param_index]);

                    if (typeof param_index !== 'undefined' && ts[param_index] == 'array') {
                        // var res = [], a2 = a.slice(1); // don't think this makes
                        // a copy of the array.
                        var res = []; // don't think this makes a copy of the
                                        // array.
                        // console.log('fn ' + fn);

                        // but we can make this process a function with a callback.


                        var fns = [];

                        each(a[param_index], function(i, v) {
                            var new_params = a.slice(0, a.length - 1);
                            new_params[param_index] = v;
                            // the rest of the parameters as normal

                            // context, function, params
                            fns.push([t, fn, new_params]);

                            //var result = fn.apply(t, new_params);
                            // console.log('result ' + stringify(result));
                            //res.push(result);
                        });
                        //return res;

                        // call_multi not working right?
                        console.log('delay', delay);
                        //throw 'stop';

                        call_multiple_callback_functions(fns, num_parallel, delay, function(err, res) {
                            if (err) {
                                throw err;
                            } else {
                                //

                                //console.log('res ' + stringify(res));

                                // we get back the results of the multiple callback functions.
                                //  let's put them in one array.

                                // maybe make result array concat optional.
                                //  likely to be needed.

                                // concat all of the arrays in the results.

                                var a = [];
                                a = a.concat.apply(a, res);

                                var callback = last_arg;
                                //console.log('last_arg ' + last_arg);
                                callback(null, a);
                            }
                        })
                    } else {
                        return fn.apply(t, a);
                    }
                } else {
									//console.log('not cb fn');
									//console.log('arguments', arguments);

                    if (typeof param_index !== 'undefined' && ts[param_index] == 'array') {
                        // var res = [], a2 = a.slice(1); // don't think this makes
                        // a copy of the array.
                        var res = []; // don't think this makes a copy of the
                                        // array.
                        // console.log('fn ' + fn);
                        // but we can make this process a function with a callback.

												for (var c = 0, l = a[param_index].length; c < l; c++) {
													//a[param_index] = a[param_index][c];
													var result = fn.apply(t, a);
													// console.log('result ' + stringify(result));
													res.push(result);
												}

												/*
                        each(a[param_index], function(i, v) {
                            //var new_params = a;
                            a[param_index] = v;
                            // the rest of the parameters as normal
                            var result = fn.apply(t, a);
                            // console.log('result ' + stringify(result));
                            res.push(result);
                        });
												*/


                        return res;
                    } else {
                        return fn.apply(t, a);
                    }
                }
				// console.log('a.length ' + a.length);
				// console.log('a ' + stringify(a));
				// console.log('param_index ' + param_index);
				// console.log('ts ' + stringify(ts));
                // but if the last function there is a function... it may be best to compile the results into one object.
			};
		}

		if (sig == '[o]') {
			var res = [];
			each(a[0], function(i, v) {
				res.push([i, v]);
			});
		} else if (sig == '[f]') {
			param_index = 0, fn = a[0];
			process_as_fn();
		} else if (sig == '[n,f]') {
		    param_index = a[0], fn = a[1];
			process_as_fn();
		} else if (sig == '[n,n,f]') {
            param_index = a[0], num_parallel = a[1], fn = a[2];
            process_as_fn();
        } else if (sig == '[n,n,n,f]') {
            param_index = a[0], num_parallel = a[1], delay = a[2], fn = a[3];
            process_as_fn();
        }

		// maybe done with pf for getting function signature.
		// console.log('using arrayify');
		// if (typeof param_index == 'undefined') param_index = 0;

		return res;
	});


    /**
    * Returns an object containing keys and values from the [key, value] pairs of the array.
    *
    * @name mapify
    * @func
    * @param {array} arr - mapifying array
    * @memberof module:core/jsgui-lang-essentials
    *
    * @example
    *
    * mapify([["name", "John"], ["age", 22]])  ==> { name: "John", age: 22 }
    *
    */

    /**
    * The array is an objects array. The mapify() function gathers values of the (by_property_name) properties. The values will be keys (property names) of the
    * returning object. The values of the returning object will be the objects itself.
    *
    * @name mapify
    * @func
    * @param {array} arr - mapifying array
    * @param {string} by_property_name - mapping property name
    * @memberof module:core/jsgui-lang-essentials
    *
    * @example
    *
    * var obj_arr = [{ name: "Larry", age: 21 }, { name: "John", age: 22 }];
    *
    * mapify(obj_arr, "name")  ==> { Larry: { name: "Larry", age: 21 }, John: { name: "John", age: 22 } }
    *
    */

    /**
    * Returns an mapified version of the function. The orginal function receives 2 parameters: key and value. The mapified version receives an object, and
    * calls the original function for each key/value pair of the object.
    *
    * You can mapify an async function as well. If you pass a function as the second parameter to the mapified version call, then this case is considered
    * as async function call. The second parameter is considered as a callback function receiving the async object processing final result. The callback
    * format is `callback(error, result)`, where `error` is an error object or null, and `result` is the result array.
    *
    * The original async function must call a callback function in turn. The callback function is passed as a last argument to the async function
    * call, following the usual [call_multiple_callback_functions()]{@link module:core/jsgui-lang-essentials.call_multiple_callback_functions} rules.
    *
    * So, the mapified function parameters are (object) or (object, function). You can call the mapified function with other parameters type, but in
    * this case it will just call the original function (if the parameters number >= 2).
    *
    * @func
    * @param {function} fn - mapifying function
    * @memberof module:core/jsgui-lang-essentials
    *
    * @example
    *
    * var keys = [];
    * var values = [];
    *
    * var addKeyValue = function (key, value) {
    *     keys.push(key);
    *     values.push(value);
    * };
    *
    * var mapified_addKeyValue = jsgui.mapify(addKeyValue);
    *
    * mapified_addKeyValue({ a: 1, b: 2, name: "John" });
    *
    * console.log(keys); // ["a", "b", "name"]
    * console.log(values); // [1, 2, "John"]
    *
    *
    * // ------- mapify an async function: -------
    *
    *
    * var keys = [];
    * var values = [];
    *
    * var asyncAddKeyValue = function (key, value, cb) {
    *     setTimeout(function () {
    *         keys.push(key);
    *         values.push(value);
    *         cb(null, key + "=" + value);
    *     }, 1000);
    * };
    *
    * var callback = function (error, result) {
    *     console.log(result); // ["a=1", "b=2", "name=John"]
    *     //
    *     console.log(keys);   // ["a", "b", "name"]
    *     console.log(values); // [1, 2, "John"]
    * };
    *
    * var mapified_asyncAddKeyValue = jsgui.mapify(asyncAddKeyValue);
    *
    * mapified_asyncAddKeyValue({ a: 1, b: 2, name: "John" }, callback);
    *
    *
    * // ------- call the original function: -------
    *
    * var func = function (a, b, c) {
    *     console.log(a + " " + b + " " + c);  // 1 5 10
    * };
    *
    * var mapified_func = jsgui.mapify(func);
    *
    * mapified_func(1, 5, 10);
    *
    *
    */
    // that target function could take a callback(err, res) parameter.
    //  that means, when calling the function, if the last function is a callback, we can act differently.
	var mapify = function(target) {
		var tt = tof(target);
		if (tt == 'function') {
			var res = fp(function(a, sig) {
				var that = this;
				//console.log('mapified fn sig ' + sig);
				if (sig == '[o]') {
					var map = a[0];
					each(map, function(i, v) {
					    //fn.call(that, i, v);
					    target.call(that, i, v);
					});
				} else if (sig == '[o,f]') {
				    var map = a[0];
				    // call_multi on the function, using the items in the map, calling with 1 param (+callback).
				    var callback = a[1];
				    var fns = [];
				    each(map, function(i, v) {
				        fns.push([target, [i, v]]);
				    });
				    call_multi(fns, function(err_multi, res_multi) {
				        if (err_multi) {
				            callback(err_multi);
				        } else {
				            callback(null, res_multi);
				        }
				    });

				} else if (a.length >= 2) {
				    // applying the target function with a callback...

				    //var last_arg = a[a.length - 1];

					// could take functions, but not dealing with objects may be
					// tricky?
					// or just if there are two params its fine.
					target.apply(this, a);
				}
			});
			return res;
		} else if (tt == 'array') {

            // If it's an array of strings, want to make a truth map from it.

            // I think check to see if it's an array of strings would help.





			// a bunch of items, items could have name

			// could just be given an array to mapify.

			var res = {};

			if (arguments.length == 1) {

                if (is_arr_of_strs(target)) {
                    each(target, function(i, v) {
                        res[v] = true;
                    });
                } else {
                    each(target, function(i, v) {
                        res[v[0]] = v[1];
                    });
                }


				// dealing with [name, value] pairs

			} else {
				var by_property_name = arguments[1];
				each(target, function(i, v) {
					res[v[by_property_name]] = v;
				});
			}

			return res;

		}
		// we may be given a function,
		// we may be given an array.

		// been given a map / object

	};

    /**
    * Creates a clone of the given value. The result depends of the input value type:
    * - array: an array containing clones of the input array elements
    * - undefined: undefined
    * - string: same string
    * - number: same number
    * - function: same function reference
    * - boolean: same boolean value
    * - null: null
    * - other (object): deep copy of the object
    *
    * If the second parameter is passed, then returns an array containing the requested number of the clones.
    * @func
    * @param {*} obj - source value
    * @param {number} [count] - number of the output values
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *  clone(1) ==> 1
    *
    *  clone("abc") ==> "abc"
    *  clone("abc", 3) ==> ["abc", "abc", "abc"]
    *
    *  clone([1, undefined]) ==> [1, undefined]
    *
    *  clone({a: 1, b:{c:2}}) ==> {a: 1, b:{c:2}}
    *
    */
	// had x_clones folded into it
	var clone = fp(function(a, sig) {
		var obj = a[0];
		if (a.l == 1) {


			var t = tof(obj);
			if (t == 'array') {

				// slice removes undefined items
				// console.log('clone obj ' + stringify(obj));
				// console.log('obj.length ' + obj.length);

				var res = [];


				eac(obj, function(v) {
					//console.log('i ' + i);
					res.push(clone(v));
				});




				return res;

				//return obj.slice();

				// deep clone...?

			} else if (t == 'undefined') {
				return undefined;
			} else if (t == 'string') {
			    return obj;
			} else if (t == 'number') {
			    return obj;
			} else if (t == 'function') {
			    return obj;
			} else if (t == 'boolean') {
			    return obj;
			} else if (t == 'null') {
			    return obj;
			} else {

				// extend not cloning the undefined values in the array properly,
				// don't want them trimmed.

				return extend(true, {}, obj);
			}

		} else if (a.l == 2 && tof(a[1]) == 'number') {
			var res = [];
			for ( var c = 0; c < a[1]; c++) {
				res.push(clone(obj));
			}
			return res;

		}


	});

    /**
    * Returns true if all the passed arguments are equals. Performs a "deep equals" for objects and arrays.
    *
    * If one array argiment passed, then returns true if all the array elements are equals.
    *
    * If one other (non-array) argument passed, returns true.
    *
    * If no arguments passed, returns null.
    *
    * @func
    * @param {...*} obj - values to compare.
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * are_equal(1, 1, 1) => true
    * are_equal(1, 2, 1) => false
    *
    * are_equal([1, 1, 1]) => true
    * are_equal([1, 2, 1]) => false
    *
    * are_equal([1, { b1: "2", b2: 2 }, 3], [1, { b1: "2", b2: 2 }, 3]) => true
    * are_equal([1, { b1: "2", b2: 2 }, 3], [1, { b1: 2, b2: 2 }, 3]) => false
    *
    */
	var are_equal = function() {
		var a = arguments;
		if (a.length == 0)
			return null;
		if (a.length == 1) {
			var t = jsgui.tof(a[0]);
			if (t == 'array' && a[0].length > 1) {
				for ( var c = 1, l = a[0].length; c < l; c++) {
					if (!jsgui.are_equal(a[0][0], a[0][c]))
						return false;
				}
			} else {
				return true;
			}
		}
		if (a.length == 2) {
			var ts = jsgui.atof(a);
			if (ts[0] != ts[1])
				return false;
			var t = ts[0];
			if (t == 'string' || t == 'number')
				return a[0] == a[1];
			if (t == 'array') {
				if (a[0].length != a[1].length)
					return false;
				for ( var c = 0, l = a[0].length; c < l; c++) {
					if (!jsgui.are_equal(a[0][c], a[1][c]))
						return false;
				}
				;
			} else if (typeof a[0] == 'object') {
			    // get the dict of keys for both, compare the lengths, (compare
			    // the keys), get merged key map
			    var merged_key_truth_map = {};
			    var c1 = 0;
			    each(a[0], function (i, v) {
			        merged_key_truth_map[i] = true;
			        c1++;
			    });
			    var c2 = 0;
			    each(a[1], function (i, v) {
			        merged_key_truth_map[i] = true;
			        c2++;
			    });
			    if (c1 != c2)
			        return false;
			    var objects_are_equal = true;
			    each(merged_key_truth_map, function (i, v) {
			        if (!jsgui.are_equal(a[0][i], a[1][i])) {
			            objects_are_equal = false;
			            return;
                    }
			    });
			    return objects_are_equal;
			} else {
			    return a[0] == a[1];
			}
		}
		if (a.length > 2) {
			var ts = jsgui.atof(a);
			if (!jsgui.are_equal(ts))
				return false;
			var o = a[0];
			for ( var c = 1, l = a.length; c < l; c++) {
				if (a[c] !== o)
					return false;
			}
		};
		return true;
	};


    /**
    * Assigns property values from map to obj.
    * @func
    * @param {object} obj - target object
    * @param {object} map - source key/value object
    * @returns undefined
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  var obj1 = {};
    *  jsgui.set_vals(obj1, { a: 1, b: 2});  // obj1 == { a: 1, b: 2 }
    *
    *  var obj2 = { a: 1, b: 2};
    *  jsgui.set_vals(obj2, { b: 200, c: 300});  // obj2 == { a: 1, b: 200, c: 300 }
    *
    */
	var set_vals = function(obj, map) {
		each(map, function(i, v) {
			obj[i] = v;
		});
	};


    /**
    * Assigns a property value of the object using a qualified (dotted) property name. Nested sub-objects are created if needed.
    *
    * if the object contains an internal object named "_", then assigns the internal object property.
    *
    * @func
    * @param {object} obj - target object
    * @param {string} prop_name - property name
    * @param {*} prop_value - property value
    * @returns property value
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  // object itself:
    *
    *  var obj1 = {};
    *  jsgui.ll_set(obj1, "a", 1);  // obj1 == { a: 1 }
    *
    *  var obj2 = {};
    *  jsgui.ll_set(obj2, "a.b.c", 1);  // obj2 == { a: { b: { c: 1 } } }
    *
    *  var obj3 = { a: { b: { c: 1 } };
    *  jsgui.ll_set(obj3, "a.b.c", 100);  // obj3 == { a: { b: { c: 100 } } }
    *
    *  // internal object:
    *
    *  var obj4 = { _: {}, a: 100 };
    *  jsgui.ll_set(obj4, "a", 1);  // obj4 == { _: { a: 1 }, a: 100 }
    */
	var ll_set = function(obj, prop_name, prop_value) {
		// not setting sub-properties specifically. sub-properties are
		// properties of a kind
		// however will not use ll_set inappropriately eg border.width works
		// differently

		var arr = prop_name.split('.');
		//console.log('arr ' + arr);
		var c = 0, l = arr.length;
		var i = obj._ || obj, s;

		while (c < l) {
			s = arr[c];
			//console.log('s ' + s);
			if (typeof i[s] == 'undefined') {
				if (c - l == -1) {
					// console.log('default_value ' + default_value);
					i[s] = prop_value;
				} else {
					i[s] = {};
				}
			} else {
				if (c - l == -1) {
					// console.log('default_value ' + default_value);
					i[s] = prop_value;
				}
			}
			i = i[s];
			c++;
		};
		return prop_value;
	};

	/*
	var ll_get_inner = function(a0, a1) {
		var i = a0._ || a0;
		var arr = a1.split('.');

		// shows how much the ll functions get used when they get logged!

		//console.log('ll_get arr ' + arr);
		var c = 0, l = arr.length, s;

		while (c < l) {
			s = arr[c];
			//console.log('s ' + s);
			//console.log('typeof i[s] ' + typeof i[s]);
			//console.log('c ' + c);
			//console.log('l ' + l);
			if (typeof i[s] == 'undefined') {
				if (c - l == -1) {
					// console.log('default_value ' + default_value);
					// console.log(i[s]);
					//i[s] = a[2];
					//return i[s];
				} else {
					// i[s] = {};
					throw 'object ' + s + ' not found';
				}
			} else {
				if (c - l == -1) {
					// console.log('default_value ' + default_value);
					// console.log(i[s]);
					// i[s] = a[2];
					return i[s];
				}
			}
			i = i[s];
			c++;
		}
	}
	*/


    /**
    * Returns a property value of the object using a qualified (dotted) property name.
    *
    * Returns `undefined` if the property does not exists.
    *
    * Throwns an exception if an inner object containing the property does not exists.
    *
    * if the object contains an internal object named "_", then return the value of the internal object property.
    *
    * Allows to pass "." (dot) as the `prop_name` parameter returning a value of the '.' property for the object or internal "_" object (if the value exists).
    *
    * @func
    * @param {object} obj - object
    * @param {string} prop_name - property name
    * @returns property value
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  // object itself:
    *
    *  jsgui.ll_get({}, "a");  ==> undefined
    *  jsgui.ll_get({ a: 1 }, "a");  ==> 1
    *  jsgui.ll_get({ '.': 1 }, ".");  ==> 1
    *
    *  jsgui.ll_get({ a: { b: { c: 1 } } }, "a.b.c");  ==> 1
    *  jsgui.ll_get({ a: { b: { } } }, "a.b.c");  ==> undefined
    *  jsgui.ll_get({ a: { } }, "a.b.c");  ==> exception
    *  jsgui.ll_get({ }, "a.b.c");  ==> exception
    *
    *  // internal object:
    *
    *  jsgui.ll_get({ _ : { '.': 1 } }, ".");  ==> 1
    *  jsgui.ll_get({ _ : { a: { b: { c: 1 } } } }, "a.b.c");  ==> 1
    *  jsgui.ll_get({ _ : { '.': 1 } }, "a.b.c");  ==> exception
    *
    */
	var ll_get = function(a0, a1) {

		if (a0 && a1) {
			var i = a0._ || a0;

			if (a1 == '.') {
				//(function() {
					if (typeof i['.'] == 'undefined') {
						//throw 'object ' + s + ' not found';
						return undefined;
					} else {
						return i['.'];
					}
				//})();

			} else {

				//return ll_get_inner(a0, a1);


				var arr = a1.split('.');

				// shows how much the ll functions get used when they get logged!

				//console.log('ll_get arr ' + arr);
				var c = 0, l = arr.length, s;

				while (c < l) {
					s = arr[c];
					//console.log('s ' + s);
					//console.log('typeof i[s] ' + typeof i[s]);
					//console.log('c ' + c);
					//console.log('l ' + l);
					if (typeof i[s] == 'undefined') {
						if (c - l == -1) {
							// console.log('default_value ' + default_value);
							// console.log(i[s]);
							//i[s] = a[2];
							//return i[s];
						} else {
							// i[s] = {};
							throw 'object ' + s + ' not found';
						}
					} else {
						if (c - l == -1) {
							// console.log('default_value ' + default_value);
							// console.log(i[s]);
							// i[s] = a[2];
							return i[s];
						}
					}
					i = i[s];
					c++;
				}



			}
			// return i;
		}
	};


	/*
	var ll_get = fp(function(a, sig) {

		if (a.l == 2) {
			var i = a[0]._ || a[0];

			if (a[1] == '.') {
				if (typeof i['.'] == 'undefined') {
					//throw 'object ' + s + ' not found';
					return undefined;
				} else {
					return i['.'];
				}
			} else {
				var arr = a[1].split('.');

				// shows how much the ll functions get used when they get logged!

				//console.log('ll_get arr ' + arr);
				var c = 0, l = arr.length;


				while (c < l) {
					var s = arr[c];
					//console.log('s ' + s);
					//console.log('typeof i[s] ' + typeof i[s]);
					//console.log('c ' + c);
					//console.log('l ' + l);
					if (typeof i[s] == 'undefined') {
						if (c - l == -1) {
							// console.log('default_value ' + default_value);
							// console.log(i[s]);
							//i[s] = a[2];
							//return i[s];
						} else {
							// i[s] = {};
							throw 'object ' + s + ' not found';
						}
					} else {
						if (c - l == -1) {
							// console.log('default_value ' + default_value);
							// console.log(i[s]);
							// i[s] = a[2];
							return i[s];
						}
					}
					i = i[s];
					c++;
				}
			}
			// return i;
		}
	});
	*/

    /**
    * Returns true only if the passed value is a boolean true.
    * @param {*} value - value to check
    * @func
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  jsgui.truth(true)  ==> true
    *  jsgui.truth(1)  ==> false
    *
    *
    *
    */
	var truth = function(value) {
		return value === true;
	};

    /**
    * Iterates over ancestor classes hierarchy calling the callback function for each class in the inheritance tree. Starts from the passed class, ends on jsgui.Class.
    *
    * The iteration can be broken calling the `stop()` function (the callback second parameter).
    *
    * @func
    * @param {jsgui.Class} obj - class to start the iteration
    * @param {function} callback - callback function (obj, stop).
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
	*  var Class = jsgui.Class;
	*  var Person = Class.extend({});
	*  var Ninja = Person.extend({});
    *
	*  var classes = [];
    *
	*  var callback = function (_class, stop) {
	*    classes.push(_class);
	*  };
	*
	*  jsgui.iterate_ancestor_classes(Ninja, callback);  // classes == [Ninja, Person, Class]
    *
    */
	var iterate_ancestor_classes = function(obj, callback) {

		/*
		if (obj.constructor &! obj._superclass) {
			iterate_ancestor_classes(obj.constructor, callback)
		} else {
			callback(obj);
			if (obj._superclass) {
				iterate_ancestor_classes(obj._superclass, callback);
			}

		}
		*/

		var ctu = true;

		var stop = function() {
			ctu = false;
		}

		callback(obj, stop);
		if (obj._superclass && ctu) {
			iterate_ancestor_classes(obj._superclass, callback);
		}


	}



    /**
    * Returns `true` if the passed object is an array containing values of the specified type only.
    * @param {*} obj - object to check
    * @param {string} type_name - estimated type name
    * @func
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  jsgui.is_arr_of_t("1", "string")  ==>  false
    *
    *  jsgui.is_arr_of_t([], "string")  ==>  true
    *
    *  jsgui.is_arr_of_t(["1", "2", "3"], "string")  ==>  true
    *
    *  jsgui.is_arr_of_t(["1", 2, "3"], "string")  ==>  false
    *
    */
	var is_arr_of_t = function(obj, type_name) {
		var t = tof(obj), tv;
		if (t == 'array') {
			var res = true;

			each(obj, function(i, v) {
				//console.log('2) v ' + stringify(v));
				tv = tof(v);
				//console.log('tv ' + tv);
				//console.log('type_name ' + type_name);
				if (tv != type_name) res = false;
			});
			return res;
		} else {
			return false;
		}

	}

    /**
    * Returns `true` if the passed object is an array containing arrays in turn.
    * @param {*} obj - object to check
    * @func
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  jsgui.is_arr_of_arrs([])  ==>  true
    *
    *  jsgui.is_arr_of_arrs(["1", "2", "3"])  ==>  false
    *
    *  jsgui.is_arr_of_arrs([[], [1, "2"]])  ==>  true
    *
    */
	var is_arr_of_arrs = function(obj) {
		return is_arr_of_t(obj, 'array');
	}


    /**
    * Returns `true` if the passed object is an array containing strings only.
    * @param {*} obj - object to check
    * @func
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  jsgui.is_arr_of_strs("1")  ==>  false
    *
    *  jsgui.is_arr_of_strs([])  ==>  true
    *
    *  jsgui.is_arr_of_strs(["1", "2", "3"])  ==>  true
    *
    *  jsgui.is_arr_of_strs(["1", 2, "3"])  ==>  false
    *
    */
	var is_arr_of_strs = function(obj) {
		//console.log('obj ' + stringify(obj));
		return is_arr_of_t(obj, 'string');
	}


    /**
    * <mark>description... TODO</mark>
    * @member
    * @memberof module:core/jsgui-lang-essentials
    */
	var input_processors = {};

    /**
    * <mark>description... TODO</mark>
    * @member
    * @memberof module:core/jsgui-lang-essentials
    */
	var output_processors = {};

	// for data types...
	//  don't look up the data types directly for the moment.
	//  they are composed of input processors, validation and output processors.


    /**
    * <mark>Returns `true` if the passed object has a prototype (typically the object is a function).</mark>
    * @func
    * @param {function} fn - object to check
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    *  jsgui.is_constructor_fn(Object)  ==>  true
    *  jsgui.is_constructor_fn(new Object())  ==>  false
    *
    *  jsgui.is_constructor_fn(setInterval)  ==>  true
    *
    */
	var is_constructor_fn = function(fn) {
		return is_defined(fn.prototype);
	}


	//var output_processors = {};

	// Possibly validators here too.
	//  They may well get used for data structures that deal with these data types. The typed constraints could make use of them (the basis that is set in essentials)
	//  while adding to them. Perhaps a 'core' intermediate layer will be there extending essentials with some of the data types that are to be used throughout the system.

	// May find that the functionality for 'nested' gets moved out from that code file. Not so sure about using the Data_Type_Instance...
	//  it could be useful, but not really useful on the level of what the user wants the system to do.
	//  Want to get the Data_Object and Collections system working in some more generic tests, also want to explore some of the more complicated data structures
	//  that will be used for HTML. The idea is that the HTML section will not need so much code because it is making use of some more generally defined things.

	// Defining an element's style attributes... will use a Data_Object system internally that is customized to reformat data.
	//  That seems like a fairly big goal, want to get these things working on a simpler level and in collections.
	//  Will use some kind of polymorphic rearrangement to rearrange where suitable.

    /**
    * Executes several tasks one by one (default) or simultaneously (up to specified amount of tasks at the same time).
    *
    * Each task can be a function, or an array in. The following task formats are supported:
    * - fn
    * - [context, fn]
    * - [fn, params]
    * - [fn, params, fn_callback]
    * - [context, fn, params]
    * - [context, fn, params, fn_callback]
    *
    * The task parts mean:
    * - context: execution context ("this" value)
    * - fn - task function
    * - params - task function parameters array
    * - fn_callback - callback function calling when the task is completed: fn_callback(null, result), where "result" is the task function result
    *
    * The task function must call a predefined callback function. The callback function is passed as the last parameter to the task function.
    * The callback function looks as follows: callback(error, result)
    * - error: an error object or null
    * - result: the task result
    *
    * The "main" callback (passed to the call_multiple_callback_functions() call) looks as follows:
    * callback(error, result), where "result" is all the tasks result array.
    *
    * @example
    * var tasks = [];
    *
    * var task1 = function(arg1, arg2, cb) {
    *    setTimeout(function () { cb(null, (arg1 * arg2)); }, 1000); // multiply arg1 * arg2
    * };
    *
    * tasks.push([task1, [10, 2]]);   // multiply 10 * 2
    *
    * call_multiple_callback_functions(tasks, function(error, result) {
    *    console.log("All the tasks are done. The first task result is " + result[0]);
    * });
    *
    *
    * @func
    * @param {array} tasks - tasks array
    * @param {number} [num_parallel = 1] - maximum amount of tasks running simultaneously
    * @param {function} callback - callback function called when all the tasks are completed
    * @param {boolean} [return_params = false] - include the task parameters to the task result
    * @memberof module:core/jsgui-lang-essentials
    */
	var call_multiple_callback_functions = fp(function(a, sig) {
		// will look at the signature and choose what to do.
		//if (sig == )
		// need to be checking if the item is an array - nice to have a different way of doing that with fp.

		// and want to look out for a number in there.
		//  want it to call multiple functions, but have them running in parallel too.
		//  like the async library, but also accepting parameters.

		// arr_functions_params_pairs, callback
		var arr_functions_params_pairs, callback, return_params = false;
        var delay;

		//console.log('a.l ' + a.l);
		//console.log('');
		//console.log('');
		//console.log('call_multi sig ' + sig);

        // what about num_parallel being zero to do them all in parallel?
        //  maybe try just a very high number at the moment.



		var num_parallel = 1;
		//console.log('a.l', a.l);
		if (a.l == 2) {
			arr_functions_params_pairs = a[0];
			//console.log('arr_functions_params_pairs', arr_functions_params_pairs);
			callback = a[1];
			//console.log('callback', callback);
		}
		if (a.l == 3) {
		    // look at the sig
		    // arr, num, fn - number is the number of parallel to do at once.
		    // return_params is a boolean?

		    // want a signature that just treats an array as a?
		    //  may make more sense for these function signatures.
		    //   at least for the first stage... could look in more detail at the array.
		    //   not using the more complicated signatures right now. could change to a different sig method when needed, or use different sig or fp options.

		    //console.log('sig ' + sig);

		    if (sig == '[a,n,f]') {
		        arr_functions_params_pairs = a[0];
		        num_parallel = a[1];
		        callback = a[2];
		    }
            if (sig == '[n,a,f]') {
                arr_functions_params_pairs = a[1];
                num_parallel = a[0];
                callback = a[2];
            }
		    if (sig == '[a,f,b]') {
		        arr_functions_params_pairs = a[0];
                callback = a[1];
                return_params = a[2];
		    }


		}
        if (a.l == 4) {
            // look at the sig
            // arr, num, fn - number is the number of parallel to do at once.
            // return_params is a boolean?

            // want a signature that just treats an array as a?
            //  may make more sense for these function signatures.
            //   at least for the first stage... could look in more detail at the array.
            //   not using the more complicated signatures right now. could change to a different sig method when needed, or use different sig or fp options.

            console.log('sig ' + sig);

            if (sig == '[a,n,n,f]') {
                arr_functions_params_pairs = a[0];
                num_parallel = a[1];
                delay = a[2];
                callback = a[3];
            }
            if (sig == '[n,n,a,f]') {
                arr_functions_params_pairs = a[2];
                num_parallel = a[0];
                delay = a[1];
                callback = a[3];
            }
            //if (sig == '[a,f,b]') {
            //    arr_functions_params_pairs = a[0];
            //    callback = a[1];
            //    return_params = a[2];
            //}

        }



		// also want the context.

		var res = [];

		var l = arr_functions_params_pairs.length;
		var c = 0;
		var that = this;

		var count_unfinished = l;

		// the number of processes going

		// the maximum number of processes allowed.
        //  num_parallel

        var num_currently_executing = 0;

		var process = function(delay) {
            num_currently_executing++;
            var main = function() {

                // they may not be pairs, they could be a triple with a callback.
                //console.log('num_currently_executing ' + num_currently_executing);
                //console.log('num_parallel', num_parallel);
                //console.log('c ' + c);

                var pair = arr_functions_params_pairs[c];
                // maybe there won't be a pair.
                //  should try to prevent this situation.





                //console.log('pair', pair);

                // object (context / caller), function, params
                // object (context / caller), function, params, fn_callback

                var context;
                var fn, params, fn_callback;
                // function, array
                // context
                //console.log('pair.length ' + pair.length);
                var pair_sig = get_item_sig(pair);
                //console.log('pair_sig ' + pair_sig);
                //console.log(jsgui.atof(pair));
                //console.log('pair.length ' + pair.length);

                var t_pair = tof(pair);
                //console.log('t_pair', t_pair);

                if (t_pair == 'function') {
                    fn = pair;
                    params = [];
                } else {


                    if (pair) {
                        if (pair.length == 1) {

                        }

                        if (pair.length == 2) {
                            // [context, fn]
                            // [fn, params]

                            //if (tof(pair[0]) == 'function' && tof(pair[1]) == 'array' && pair.length == 2) {
                            //	fn = pair[0];
                            //	params = pair[1];
                            //}
                            // ?, function

                            if (tof(pair[1]) == 'function') {
                                context = pair[0];
                                fn = pair[1];
                                params = [];
                            } else {
                                fn = pair[0];
                                params = pair[1];
                            }
                        }

                        // function, array, function
                        if (pair.length == 3) {
                            // [fn, params, fn_callback]
                            // [context, fn, params]

                            if (tof(pair[0]) == 'function' && tof(pair[1]) == 'array' && tof(pair[2]) == 'function') {
                                fn = pair[0];
                                params = pair[1];
                                fn_callback = pair[2];
                            }
                            // object / data_object?
                            // ?, function, array
                            if (tof(pair[1]) == 'function' && tof(pair[2]) == 'array') {
                                //console.log('has context');
                                context = pair[0];
                                fn = pair[1];
                                params = pair[2];

                                // may not be a fn_callback in this case.
                            }
                        }

                        if (pair.length == 4) {
                            // [context, fn, params, fn_callback]

                            // context, function being called, params, cb
                            context = pair[0];
                            fn = pair[1];
                            params = pair[2];
                            fn_callback = pair[3];
                        }
                    } else {
                        //console.log('missing pair');

                    }

                    // For some reason the pair can be undefined.

                    // We don't have a pair of them.
                    //  Have we called with the wrong data?
                    //   Do a callback, result is false.






                }



                var i = c;
                // not sure it keeps this same value of i.
                //  can try some tests on this.

                c++;
                //throw 'stop';

                var cb = function(err, res2) {
                    num_currently_executing--;
                    count_unfinished--;
                    //console.log('cb num_currently_executing ' + num_currently_executing + ', c ' + c);
                    if (err) {
                        var stack = new Error().stack;
                        //console.log(stack);
                        throw err;
                    } else {
                        //console.log('i ' + i + ', res2 ' + res2);
                        if (return_params) {
                            //console.log('call_multi inner cb return_params ' + stringify(return_params));
                            //throw 'stop';
                            //console.log('params ' + params);
                            res[i] = [params, res2];
                        } else {
                            res[i] = res2;
                        }
                        //console.log('pair.length ' + pair.length);

                        if (fn_callback) {
                            fn_callback(null, res2);
                        }
                        /*

                         if (pair.length == 3) {
                         fn_callback(null, res2);
                         }
                         if (pair.length == 4) {
                         fn_callback(null, res2);
                         }
                         */
                        //console.log('c', c);
                        //console.log('l', l);

                        if (c < l) {

                            // only process if the num executing is less than the max num to execute.
                            // otherwise the process will be done when a callabck is produced from the function.
                            //console.log('num_currently_executing', num_currently_executing);
                            if (num_currently_executing < num_parallel) {
                                process(delay);
                            }


                        } else {
                            //console.log('count_unfinished', count_unfinished);
                            if (count_unfinished <= 0) {
                                callback(null, res);
                            }
                        }
                    }
                };
                // Clone the params?
                //  Really not sure about that.
                //var arr_to_call = clone(params) || [];
                var arr_to_call = (params) || [];
                //console.log('params', params);
                //console.log('arr_to_call', arr_to_call);
                //console.log('params ' + params);
                //console.log('fn ' + fn);
                arr_to_call.push(cb);
                // but if the function does not have a callback?
                //console.log('context ' + context);

                if (fn) {
                    if (context) {
                        fn.apply(context, arr_to_call);
                    } else {
                        fn.apply(that, arr_to_call);
                    }
                } else {
                    //cb(null, undefined);
                }
            }
            //console.log('2) delay', delay);

            if (arr_functions_params_pairs[c]) {
                if (delay) {
                    setTimeout(main, delay);
                } else {
                    main();
                }
            }
		}
		//console.log('** arr_functions_params_pairs.length ' + arr_functions_params_pairs.length);
		if (arr_functions_params_pairs.length > 0) {
		    while ((c < l)  && (num_currently_executing < num_parallel)) {
                if (delay) {
                    //console.log('sto');
                    //setTimeout(process, delay * c);
                    process(delay * c);
                } else {
                    process();
                }
		    }
		} else {
		    if (callback) {
		        //callback(null, null);
		    }
		}
	});
	var multi = call_multiple_callback_functions;
    /**
    * Alias to the [call_multiple_callback_functions()]{@link module:core/jsgui-lang-essentials.call_multiple_callback_functions} function.
    * @func
    * @memberof module:core/jsgui-lang-essentials
    */
    var call_multi = call_multiple_callback_functions;
    /**
    * Returns a [call_multiple_callback_functions()]{@link module:core/jsgui-lang-essentials.call_multiple_callback_functions} helper object. The object is an array with `go()` method added.
    * You can add the [call_multiple_callback_functions()]{@link module:core/jsgui-lang-essentials.call_multiple_callback_functions} tasks to the array, then call the go() method passing the callback function.
    * @func
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
	*   var taskPlus = function (a, b, cb) { cb(null, a + b); };
	*   var taskMinus = function (a, b, cb) { cb(null, a - b); };
    *
	*   var fns = jsgui.Fns();
    *
	*   fns.push([taskPlus, [1, 2]]);
	*   fns.push([taskPlus, [3, 4]]);
	*   fns.push([taskMinus, [1, 2]]);
	*   fns.push([taskPlus, [10, 12]]);
    *
	*   fns.go(function (error, result) {
	*       console.log(result);  //  [3, 7, -1, 22]
	*   });
    *
    */
	var Fns = function() {
	    var fns = [];
	    fns.go = function(parallel, delay, callback) {

            // Should have better param checking here.




            //if (!callback) {
            //    call_multi(fns, parallel);
            //} else {
            //    call_multi(parallel, fns, callback);
            //}

            var a = arguments;
            var al = a.length;



            // No, we may give the number in parallel, alongside a callback.



            if (al == 1) {
                call_multi(fns, parallel);
            }
            if (al == 2) {
                call_multi(parallel, fns, delay);
            }
            if (al == 3) {
                call_multi(parallel, delay, fns, callback);
            }






	    }
	    return fns;
	}

    /**
    * Returns a name of the passed native constructor function. Possible return values are:
    * - "String"
    * - "Number"
    * - "Boolean"
    * - "Array"
    * - "Object"
    * - undefined (for all other arguments)
    *
    * @func
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.native_constructor_tof(String)  ==>  "String"
    *
    * jsgui.native_constructor_tof(Date)  ==>  undefined
    *
    */
	var native_constructor_tof = function(value) {
		if (value === String) {
			return 'String';
		}
		if (value === Number) {
			return 'Number';
		}
		if (value === Boolean) {
			return 'Boolean';
		}
		if (value === Array) {
			return 'Array';
		}
		if (value === Object) {
			return 'Object';
		}
	}

	//var storage_closure

	// jsgui.get and jsgui.set
	//  so JSGUI itself would have some properties within a closure.
	//  Not sure if that would allow some kind of global variables (again).
	var storage_map = {};


    /**
    * Gets value from the module's internal key/value storage.
    * @func
    * @param {string|*} key - the value key
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.set("a", 1);
    * jsgui.set(100, 2);
    *
    *
    * jsgui.get("a")  ==>  1
    * jsgui.get(100)  ==>  2
    *
    */
	var get = function(key) {
		return storage_map[key];
	}

    /**
    * Sets value for the module's internal key/value storage.
    * @func
    * @param {string|*} key - the value key
    * @param {*} value - the value
    * @memberof module:core/jsgui-lang-essentials
    * @example
    *
    * jsgui.set("a", 1);
    * jsgui.set(100, 2);
    *
    *
    * jsgui.get("a")  ==>  1
    * jsgui.get(100)  ==>  2
    *
    */
	var set = function(key, value) {
		storage_map[key] = value;
	}


    var sig_match = function(sig1, sig2) {
        // Does sig2 match sig1

        // We go through sig1, checking item by item.

        // Sigs have to be the same length I think?

        // I think just check flat sigs?
        //  Or we could do this recursively anyway.

        var sig1_inner = sig1.substr(1, sig1.length - 2);
        console.log('sig1_inner', sig1_inner);

        var sig2_inner = sig2.substr(1, sig2.length - 2);
        console.log('sig2_inner', sig2_inner);

        if (sig1_inner.indexOf('[') > -1 || sig1_inner.indexOf(']') > -1 || sig2_inner.indexOf('[') > -1 || sig2_inner.indexOf(']') > -1) {
            throw 'sig_match only supports flat signatures.';
        }

        var sig1_parts = sig1_inner.split(',');
        var sig2_parts = sig1_inner.split(',');

        var res = true;

        if (sig1_parts.length == sig2_parts.length) {
            var c = 0, l = sig1_parts.length, i1, i2;
            while (res && c < l) {
                i1 = sig1_parts[c];
                i2 = sig2_parts[c];

                if (i1 === i2) {

                } else {
                    if (i1 !== '?') {
                        res = false;
                    }
                }

                c++;
            }
            return res;
        } else {
            return false;
        }

        //throw 'stop';






    }


	/*

	(function() {


	})();

	*/
	// will put functions into the jsgui object.

	// with the functions listed like this it will be easier to document them.

	var jsgui = {
		'Class' : Class,
		'each' : each,
		'eac': eac,
		'is_array' : is_array,
		'is_dom_node' : is_dom_node,
		'is_ctrl' : is_ctrl,
		'extend' : extend,
		'clone' : clone,
		//'x_clones' : x_clones,
		'get_truth_map_from_arr' : get_truth_map_from_arr,
		'arr_trim_undefined': arr_trim_undefined,
		'get_map_from_arr' : get_map_from_arr,
		'arr_like_to_arr' : arr_like_to_arr,
		'tof' : tof,
		'atof' : atof,
		'is_defined' : is_defined,
		'stringify' : stringify,
		'functional_polymorphism' : functional_polymorphism,
		'fp' : fp,
		'arrayify' : arrayify,
		'mapify' : mapify,
		'are_equal' : are_equal,
    'get_a_sig': get_a_sig,
		'get_item_sig' : get_item_sig,
		'set_vals': set_vals,
		'truth': truth,
		'trim_sig_brackets' : trim_sig_brackets,
		'll_set': ll_set,
		'll_get': ll_get,
		'iterate_ancestor_classes': iterate_ancestor_classes,
		'is_constructor_fn': is_constructor_fn,
		'is_arr_of_t': is_arr_of_t,
		'is_arr_of_arrs': is_arr_of_arrs,
		'is_arr_of_strs': is_arr_of_strs,
		'input_processors': input_processors,
		'output_processors': output_processors,
		'call_multiple_callback_functions': call_multiple_callback_functions,
		'call_multi': call_multi,
		'multi': call_multi,
		'native_constructor_tof': native_constructor_tof,
		'Fns': Fns,
		'get': get,
		'set': set,
        'sig_match': sig_match
	};


    /**
    * description...
    * @alias data_types_info
    * @member
    * @memberof module:core/jsgui-lang-essentials
    */
	// Maybe this will be moved to an intermediate layer.
	jsgui.data_types_info = jsgui.data_types_info || {};




	// and the local variable shortcuts that go at the beginning:

	/*

	 var j = jsgui;
	 var Class = j.Class;
	 var each = j.each;
	 var is_array = j.is_array;
	 var is_dom_node = j.is_dom_node;
	 var is_ctrl = j.is_ctrl;
	 var extend = j.extend;
	 var x_clones = j.x_clones;
	 var get_truth_map_from_arr = j.get_truth_map_from_arr;
	 var get_map_from_arr = j.get_map_from_arr;
	 var arr_like_to_arr = j.arr_like_to_arr;
	 var tof = j.tof;
	 var is_defined = j.is_defined;
	 var stringify = j.stringify;
	 var functional_polymorphism = j.functional_polymorphism;
	 var fp = j.fp;
	 var arrayify = j.arrayify;
	 var mapify = j.mapify;
	 var are_equal = j.are_equal;
	 var get_item_sig = j.get_item_sig;
	 var set_vals = j.set_vals;
	 var truth = j.truth;
	 var trim_sig_brackets = j.trim_sig_brackets;
	 var ll_set = j.ll_set;
	 var ll_get = j.ll_get;
	 var is_constructor_fn = j.is_constructor_fn;
	 var is_arr_of_arrs = j.is_arr_of_arrs;
	 var is_arr_of_strs = j.is_arr_of_strs;
	 var is_arr_of_t = j.is_arr_of_t;
	 */


	// var jsgui = {};
	// alert('returning jsgui from jsgui-lang');
	//return jsgui;
    module.exports = jsgui;
//});

}).call(this,require("buffer").Buffer)

},{"buffer":2,"stream":21}],39:[function(require,module,exports){
// This is resulting in smaller code in other parts of the framework.
//  This section is getting quite big (again)
//  Still need to make use of the B+ free for ordered indexing.

// Moving some code to jsgui-lang-essentials
//  Will be publishing a 0.4 version of that before so long?
//   Maybe with more explanation?

// It may be worth publishing this, and a discussion forum about it on my own web forum.
//  Perhaps that could come later, but jsgui-lang-essentials may be a good step. Could call it version 0.35.
//   Could have a few examples
//   Would be a useful toolkit I could use while working elsewhere.

//  I think that web site would be lightening fast, and impress people with its speed compared to other web platforms that they are used to
//   (though Facebook is OK)

// This is going to be using data_types as well.
// Will also have a system of requirements.
//  That could mean they need to be both the right data type, as well as having some other specified properties.
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(["./jsgui-lang-essentials", "./jsgui-data-structures", "./data-object", "./collection"],
	function(jsgui, Data_Structures, Data_Object, Collection) {
	*/
    var jsgui = require('./jsgui-lang-essentials');
var Data_Structures = require('./jsgui-data-structures');
var Data_Value = require('./data-value');
var Evented_Class = require('./evented-class');
var Data_Object = require('./data-object');
var Collection = require('./collection');

	// Will use data structures.
	//  Not sure about using all of them here.

	// A mix-in system of enhancing the data structures may work best.
	//  It does not start with B+ tree, but that gets brought in?

	// However, having B+ as part of it could work quite nicely.


 var j = jsgui;
 var Class = j.Class;
 var each = j.each;
 var is_array = j.is_array;
 var is_dom_node = j.is_dom_node;
 var is_ctrl = j.is_ctrl;
 var extend = j.extend;
 var x_clones = j.x_clones;
 var get_truth_map_from_arr = j.get_truth_map_from_arr;
 var get_map_from_arr = j.get_map_from_arr;
 var arr_like_to_arr = j.arr_like_to_arr;
 var tof = j.tof;
 var atof = j.atof;
 var is_defined = j.is_defined;
 var stringify = j.stringify;
 var functional_polymorphism = j.functional_polymorphism;
 var fp = j.fp;
 var arrayify = j.arrayify;
 var mapify = j.mapify;
 var are_equal = j.are_equal;
 var get_item_sig = j.get_item_sig;
 var set_vals = j.set_vals;
 var truth = j.truth;
 var trim_sig_brackets = j.trim_sig_brackets;

jsgui.Data_Object = Data_Object;
jsgui.Collection = Collection;

jsgui.Data_Value = Data_Value;
jsgui.Evented_Class = Evented_Class;

//var B_Plus_Tree = Data_Structures.B_Plus_Tree;
var Sorted_KVS = Data_Structures.Sorted_KVS;

var vectorify = function(n_fn) {
    // Creates a new polymorphic function around the original one.

    var fn_res = fp(function(a, sig) {
        //console.log('vectorified sig ' + sig);
        if (a.l > 2) {
            var res = a[0];
            for ( var c = 1, l = a.l; c < l; c++) {
                res = fn_res(res, a[c]);
                // console.log('res ' + res);
            }
            return res;
        } else {
            if (sig == '[n,n]') {
                return n_fn(a[0], a[1]);
            } else {
                // will need go through the first array, and the 2nd... but
                // will need to compare them.
                var ats = atof(a);
                //console.log('ats ' + stringify(ats));
                if (ats[0] == 'array') {
                    if (ats[1] == 'number') {
                        var res = [], n = a[1];
                        each(a[0], function(i, v) {
                            res.push(fn_res(v, n));
                        });
                        return res;
                    }
                    if (ats[1] == 'array') {
                        if (ats[0].length != ats[1].length) {
                            throw 'vector array lengths mismatch';
                        } else {
                            var res = [], arr2 = a[1];
                            each(a[0], function(i, v) {
                                res.push(fn_res(v, arr2[i]));
                            });
                            return res;
                        }
                    }
                }
            }
        }
    });
    return fn_res;
};

var n_add = function(n1, n2) {
    return n1 + n2;
}, n_subtract = function(n1, n2) {
    return n1 - n2;
}, n_multiply = function(n1, n2) {
    return n1 * n2;
}, n_divide = function(n1, n2) {
    return n1 / n2;
};

var v_add = vectorify(n_add), v_subtract = vectorify(n_subtract);

// these are not the standard, established vector or matrix operations. They
// can be used for scaling of arrays of vectors.
var v_multiply = vectorify(n_multiply), v_divide = vectorify(n_divide);

var vector_magnitude = function(vector) {
    // may calculate magnitudes of larger dimension vectors too.
    // alert(tof(vector[0]));
    // alert(vector[0] ^ 2);

    var res = Math.sqrt((Math.pow(vector[0], 2)) + (Math.pow(vector[1], 2)));
    return res;

};

var distance_between_points = function(points) {
    var offset = v_subtract(points[1], points[0]);
    console.log('offset ' + stringify(offset));
    return vector_magnitude(offset);
}

// Does this have a general use?
var remove_sig_from_arr_shell = function(sig) {
    // first and last characters?
    // use regex then regex to extract the middle?

    if (sig[0] == '[' && sig[sig.length - 1] == ']') {
        return sig.substring(1, sig.length - 1);
    }
    return sig;
    // but also do this to the arguments?
};

var execute_on_each_simple = function(items, fn) {
    // currently no arguments provided, there may be in the future / future
    // versions
    var res = [], that = this;
    each(items, function(i, v) {
        res.push(fn.call(that, v)); // function called with item as its only
                                    // parameter.
    });
    return res;
};

var filter_map_by_regex = function(map, regex) {
    var res = {};
    each(map, function(i, v) {
        // if (regex.match(i)) {
        if (i.match(regex)) {
            res[i] = v;
        }
    });
    return res;
}

// May be replaced by a more veristile replacement system, ie input transformation and parsing in schemas.
var npx = arrayify(function(value) {
    // don't think we can use arrayify?

    // good candidate for pf? but how it deals with array trees...
    // could have another one, like sf or spf that is simpler in terms of
    // treating an array in the signature as just one array?

    var res, a = arguments, t = tof(a[0]);

    // fn sigs??? performance?

    if (t == 'string') {
        res = a[0];
    } else if (t == 'number') {
        res = a[0] + 'px';
    }
    return res;
});

var no_px = arrayify(fp(function(a, sig) {
    // no_px - removes the 'px' if it ends with px
    // Generally returns a number.
    // value
    var re = /px$/, res;
    if (sig == '[s]' && re.test(a[0])) {
        res = parseInt(a[0]);
    } else {
        res = a[0];
    }
    ;
    return res;
}));

var arr_ltrb = [ 'left', 'top', 'right', 'bottom' ];

var str_arr_mapify = function(fn) {
    var res = fp(function(a, sig) {
        if (a.l == 1) {
            if (sig == '[s]') {
                var s_pn = a[0].split(' ');
                // console.log('s_pn ' + s_pn.length);

                if (s_pn.length > 1) {
                    return res.call(this, s_pn);
                } else {
                    return fn.call(this, a[0]);
                }
            }

            if (tof(a[0]) == 'array') {
                var res2 = {}, that = this;

                each(a[0], function(i, v) {
                    res2[v] = fn.call(that, v);
                });
                return res2;
            }
        }
    });
    return res;
};

// Lower level functions
// For the moment not exposed

// These two do deal with nested data... but the purpose of the nested
// module is to put the complicated nested stuff there.
// This one looks quite useful and it is limited in what it does, easy to
// understand. Keep here.


var arr_hex_chars = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'A', 'B', 'C', 'D', 'E', 'F' ];
var dict_hex_to_bin = {
    '0' : 0,
    '1' : 1,
    '2' : 2,
    '3' : 3,
    '4' : 4,
    '5' : 5,
    '6' : 6,
    '7' : 7,
    '8' : 8,
    '9' : 9,
    'A' : 10,
    'B' : 11,
    'C' : 12,
    'D' : 13,
    'E' : 14,
    'F' : 15
};
var str_hex_to_int = function(str_hex) {
    str_hex = str_hex.toUpperCase();
    var i = str_hex.length; // or 10
    var res = 0, exp = 1;
    while (i--) {
        var i_part = dict_hex_to_bin[str_hex.charAt(i)];
        var ip2 = i_part * exp;
        res = res + ip2;
        exp = exp * 16;
        // ...
    }
    ;
    return res;
};
var byte_int_to_str_hex_2 = function(byte_int) {
    var a = Math.floor(byte_int / 16), b = byte_int % 16, sa = arr_hex_chars[a], sb = arr_hex_chars[b], res = sa
            + sb;
    return res;
};
var arr_rgb_to_str_hex_6 = function(arr_rgb) {
    var r = byte_int_to_str_hex_2(arr_rgb[0]);
    var res = r + byte_int_to_str_hex_2(arr_rgb[1])
            + byte_int_to_str_hex_2(arr_rgb[2]);
    return res;
};
var arr_rgb_to_css_hex_6 = function(arr_rgb) {
    // a / b // divide a by b
    // a % b // find the remainder of division of a by b
    return '#' + arr_rgb_to_str_hex_6(arr_rgb);
};
/*
 * Consider the following:
 *
 *
 * var arr_multi_set_item = function(arr, iBegin, iEnd, item_name, value) {
 * var c = iBegin; while (c <= iEnd) { arr[item_name][c] = value; }; return
 * arr; }; var item_cond_set_multi_values = function(target, source,
 * value_names) { each(value_names, function(i, v) { if (typeof source[v] !=
 * 'undefined') { target[v] = source[v]; } }); return target; }; var
 * arr_item_cond_set_multi_values = function(arr_target, arr_source, iMin,
 * iMax, value_names) { for (var c = iMin; c <= iMax; c++) {
 * item_cond_set_multi_values(arr_target[c], arr_source[c], value_names); }; };
 *
 */

// information about data types such as 'int'?
// Perhaps some number data types could be re-implemented, like Decimal.

var input_processors = {};

var output_processors = {};

var validators = {
    'number' : function(value) {
        return tof(value) == 'number';
    }
};

// create data type instance from info

// Code will be better organized using this, but it will still be quite a
// large amount of logic.
// Will make reference to special cases (directives) to control the flow.

// I think the recursion inherant in the data types will be enough for this
// to work (hope so).
// The logic here looks at two layers sometimes, I hope it does not need
// recursion there, but rather that one directive may reference other
// things.
// Those other things could be their own data types that can be referenced.

var referred_object_is_defined = function(object_reference) {
    return is_defined(object_reference[0][object_reference[1]]);
}

// This code is really big now.
// Without WS and logging it will be smaller.

// The HTML module will give it HTML and CSS-like properties it will use for
// its internal representation and translations to and from
// DOM representations.

// The B (or B+?) tree coming up. It's quite a big one....
// There will be some other, simpler classes that use it.

// KSVS, Keys and Values store
// May want something that stores only a single value for a key.
// Likely to want to specify this, in how an index is used.
// Don't want to impose an extra requirement on there being unique values
// for indexed fields.
// That's why more complex data types may fit the data better than dicts.

// Will make a new B+ tree structure.
//  I'll want to know what it does anyway - and I'll see that this one is optimized as well as useful for various operations that would get performed on the tree.

// Quite a few data types will wind up here, in this bit of the library.
//  I don't think they will take up all that much space.

// Could have Data_Structures before util?
//  I don't think they'll be making use of functionality such as Collection or Data_Object. Collection will use these data structures for its index.
//   May be good having them really compatable too?

//  Perhaps there will be a lang 'essentials' set?
//   Before data structures, core tools such as polymorphism, stringify, each, tof
//    That would be a really good toolkit in a few KB of code.
//    I think those things won't change so much.
//     Other parts of lang are developing, but are taking far more code to do.




// Data_Object and Collection are not data structures - they are more than that.
//  They provide a utility, and use the appropriate data structures to do so. They also deal with events and have/enable MVC patterns.
//  That means that data structures won't use them.

// There will be a data structures part of the system that will be used as building blocks for this part.
//  The data structures will use jsgui-lang-essentials.






//var Doubly_Linked_List =


// var BTree = function() {

// BTree is fairly big.
// It can be shrunk a bit further... but not massively
// May find this is an integral part of code to well functioning data
// systems on the client.
// May only be useful when there is a more significant amount of data to
// deal with?

// Makes things possible though.

var set_vals = function(obj, map) {
    each(map, function(i, v) {
        obj[i] = v;
    });
};

// its functions may get proxied.

// OK, so looks like it's working so far.

// indexed collection. keeps track of the index of each item in it.

// Will use this within the typed data I think.

// every item needs an id, need an index too.

// Need to be able to access controls in a collection using a nice interface
// at different levels.

// items in the collection have got index() and id() functions for access to
// the variables.
// index is the position in the collection.

// Think this one is quite specific for when items have ids.

// Should be made much more general, or given specific name.

// Will be phased out.
// Will have Collection.

// That will be a Data_Object.
// It will have an array
// It will have index capabilities.
// Perhaps it could even be able to handle larger datasets with efficient
// indexing capabilities.

// As an abstract class?

// Indexed by position in another index?
// Or ordered by it...

// And that order could change, too.
// have it respond automatically for that...
// Would like to get this to be easy to express.

// collection 1 not particularly ordered
// collection 2 ordered by items' positions in collection 1.
// don't want lots of code specifically for this - but should be possible
// using a fairly general system.
// so each object will have its collection1_index value available.
// Need to think about where to hook up the listeners to listen for a change
// in collection1 so order could be updated in collection 2.
// Probably not for any single item that changes position
// Could maybe be given a list of all items that change position...
// Or it could be an event on the object.
// May re-index that.

// Also, need to look out for property changes on indexed items.
// Need to update the index in that situation.

// Seems like quite a lot of work to get this all going - but I think it
// will be worth it when the indexed collection system is working.
// Will need to refer to the index record when the property value changes.
// Perhaps update all relevant indexes.
// But then don't want to proceed with other things until this is done.

// The system gets somewhat complicated, but this is something which could
// be an integral component that could be reused a lot, if it is done right.

// A collection of collections could be a lot like a database.
// May want more examples about dealing with such collections.

// Don't want to spend a long time making and testing various things that
// have this collection and ordering functionality...
// However need to do what is necessary. Some of them may not seem that
// useful in the abstract - like having something that is indexed by the
// position within another control.
// Indexed by the position in another control or ordered by it? Same thing?
// May require quite a bit behind the scenes to get everything working
// right.
// It won't be a very large amount of code... but it needs to be right.
// Really don't want to make the download too large. May change the b+
// implementation and experiment with it, get a smaller b+ tree size.
// Could perhaps be loaded after lang, as a separate module, but using lang.
// Lang could start with the indexing system set up, but not all the types
// of indexes. Maybe just the dict index?
// Other indexes will then be easier to work on separately.
// But b+ could be so essential to the library working smoothly in the GUI.
// Won't be impossible to make a micro-b+ implementation.
// So could still get by id with the dict index
// Maintaining another collection ordered by the position in another
// collection does seem like a good objective.
// Position in collection = position within the normal array...
// Not the position within some kind of index.

// index_by(other_collection)
// only if items are in the other collection...

// item position in collection... collection is always an array as well.
// could that make things inefficient there?
// moving items around the array, changing the array index of items.
// may not be worth so much indexing with those inherant limitations?

// could make different collections with different internal storage?
// linked list? something that maintains an order?

// at the moment, controls are stored in an array, other indexing is done
// too.

// A single index.


/*
var DataCollection = Class.extend({
    'init' : function(spec) {
        this._id_map = {};
        this._arr = [];
        this.length = 0;
    },

    // function reference - add functions to that?

    // much like fn_call. Perhaps DataObject could have fn_call - the same
    // as this. But this one deals with an empty sig, maybe that's the
    // default function which can be assigned.
    'action' : fp(function(a, sig) {
        // what about calling this with more parameters?

        // console.log('action sig ' + sig);

        if (sig == '[]') {
            // console.log('1) this._arr ' + tof(this._arr));
            // console.log(this._arr.length);
            return this._arr;
        } else {
            var action_name = a[0];

            // console.log('action_name ' + action_name);

            // then call the relevant function... eg add(a[1])

            // and then make it so that more parameters can be given.

            var params = a.slice(1);

            // return this[action_name](a[1]);

            return this[action_name].apply(this, params);

        }

    }),

    'add' : fp(function(a, sig) {
        // item
        console.log('add sig ' + sig);

        if (sig == '[o]' || sig == '[c]') {
            // if ()
            var i = this._arr.length;
            this._arr.push(a[0]);
            this.length++;
            // console.log('2) this._arr ' + (this._arr));
            // console.log('2) this._arr ' + stringify(this._arr));

            // circular references with controls?

            // but could index be a read-only property?
            if (tof(a[0].index) == 'function') {
                a[0].index(i);
            }

            if (tof(a[0].id) == 'function') {
                var id = a[0].id();
                this._id_map[id] = a[0];
            }

        }

    }),
    'get' : fp(function(a, sig) {
        // string, it's an id
        if (sig == '[s]') {
            return this._id_map[a[0]];
        } else if (sig == '[n]') {
            return this._arr[a[0]];
        }

        // number it's an index

    }),
    'insert' : fp(function(a, sig) {
        // can be given one object to insert, can be given an array of items
        // to insert?
        // not for actually inserting an array though. For use with controls
        // really, could be used with other objects.
        // Could maybe turn this off as an object in the construction.
        // maybe told to insert(control, position)

        console.log('insert sig ' + sig);
        // if (sig == '[')
        // checking for an array in the sig is tricky.

        if (sig == '[o,n]') {
            // will need to move the index of items above forward.

            this._arr.splice(a[1], 0, a[0]);
            for ( var c = a[1], l = this._arr.length; c < l; c++) {
                var item = this._arr[c];
                if (item.index) {
                    item._.index = c;
                }
            }
            this.length++;

        } else {

            if (tof(a[0]) == 'array') {

            } else if (tof(a[0]) == 'object' || tof(a[0]) == 'control') {
                // will need to move the ones after it up as well.

            }

        }

    })
});
var p = DataCollection.prototype;
*/
// Functionality for the control's IDs - that seems like its page_context,
// which could be part of html.

var _data_generators = {
    //'Ordered_String_List' : function() {
    //	// console.log('dg Ordered_String_List');
    //	return new Ordered_String_List();
    //}
}

// This could be useful for a few things, like storing tables in a DB
// schema.
// Maybe quite a few more things.

// Uses private variables.

// Different to sorted string list.
//  Indexed by the string too...



var truth = function(value) {
    return value === true;
}

// will put functions into the jsgui object.

// with the functions listed like this it will be easier to document them.

var extend = jsgui.extend, fp = jsgui.fp, stringify = jsgui.stringify, tof = jsgui.tof;


// Connecting these input processors in this instance to the Enhanced_Data_Object?



extend(jsgui.data_types_info, {

    'color': ['indexed_array', [
        ['red', 'number'],
        ['green', 'number'],
        ['blue', 'number']
    ]],
    'oltrb': ['optional_array', ['left', 'top', 'right', 'bottom']]
});

var create_input_function_from_data_type_info = function (data_type_info) {
    console.log('create_input_function_from_data_type_info data_type_info ' + stringify(data_type_info));

    if (tof(data_type_info) == 'array') {
        var secondary_instruction = data_type_info[0];
        var arr_items = data_type_info[1];
        //console.log('secondary_instruction ' + secondary_instruction);
        //console.log('tof(arr_items) ' + tof(arr_items));

        if (tof(arr_items) == 'string') {
            // the distance.
            // console.log('arr_items ' + arr_items);


            if (jsgui.data_types_info[secondary_instruction]) {
                // process it with that instruction, but need to have it operating with the data type given here,
                //  'distance'.

                // seems quite hard to do, may be a recursive process.
                //  optional array being the example here.

                // otlrb.

                // call a new procedure for otlrb?
                //  may need to automatically jump through some indirection.
                //   really, want to be layering functional processors.

                if (jsgui.data_types_info[arr_items]) {
                    // process it with that instruction, but need to have it operating with the data type given here,
                    //  'distance'.

                    // seems quite hard to do, may be a recursive process.
                    //  optional array being the example here.

                    // otlrb.

                    // call a new procedure for otlrb?
                    //  may need to automatically jump through some indirection.
                    //   really, want to be layering functional processors.

                    //console.log('processing ' + arr_items + ' according to ' + secondary_instruction);

                    // load up the oltrb item...
                    //  I think we need a reader for that.

                    // A constructor / a function that is an input processor for oltrb.
                    //  Test that, then use it here.


                }
            }
        }

        if (tof(arr_items) == 'array') {
            // process the secondary instruction...
            if (secondary_instruction == 'indexed_array') {

                var res = fp(function (a, sig) {

                    // check the arguments given... do they match what is expected?

                    // or if it is an object, put them into place in the correct position.

                    // data_types_info could have associated maps, attached to the data_types_info.

                    //console.log('input processor for dti ' + stringify(data_type_info));
                    //console.log('sig ' + sig);
                    // with an indexed array, there should be a dti.position_map

                    if (sig == '[[[n,n,n]]]') {
                        res = a[0][0];
                        return res;
                    }

                    // The preprocessor is dealing with these.
                    /*
                    if (sig == '[[s]]') {
                        // likely to best use some regex color matches.
                        //  could have a pre-input?
                        //  specifific formatting for color anyway, could use a preprocessor.

                    }
                    */

                    if (!data_type_info.map_pos) {
                        data_type_info.map_pos = {};

                        each(arr_items, function (i, v) {
                            console.log('i ' + i);
                            console.log('v ' + v);
                            data_type_info.map_pos[v[0]] = i;
                        });
                    }

                    if (sig == '[[o]]') {
                        // put the items from that object into an array.

                        var dtimp = data_type_info.map_pos;
                        var o = a[0][0];

                        var res = [];

                        each(o, function (i, v) {
                            var pos = dtimp[i];
                            console.log('pos ' + pos);
                            console.log('v ' + v);
                            res[pos] = v;
                        });
                        //console.log('res ' + stringify(res));
                        return res;
                    }

                    // also use regular expression identifiers for parsing from a string?

                    //throw '3) stop';
                    // then use data_type_info.map_pos

                    //console.log('data_type_info.map_pos ' + stringify(data_type_info.map_pos));

                });
                return res;
            }
        }
    }
}

// or just .extend('control');
//  Data_Object('control'); (not a constructor).

//var Control = Data_Object.extend({'data_type': 'control'});
//var Control = Data_Object.extend('control');


// could have an input preprocessor as well.
//  so that generalized functionality gets used too.

// Is really a CSS hex string -> [r, g, b] converter

// color parser...
//  want to parse the input
// color preprocessor_parser

var color_preprocessor_parser = fp(function(a, sig) {
    console.log('color_preprocessor_parser a ' + stringify(a));
    console.log('color_preprocessor_parser sig ' + sig);
    if (sig == '[s]') {
        var input = a[0];
        var rx_hex = /(#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2}))/;
        var m = input.match(rx_hex);
        //console.log('m ' + stringify(m));

        if (m) {
            // Could use arrayify or something to make the conversion quicker... will do that in more places, mainly want to get the code working now.

            var r = jsgui.str_hex_to_int(m[2]);
            var g = jsgui.str_hex_to_int(m[3]);
            var b = jsgui.str_hex_to_int(m[4]);

            var res = [r, g, b];
            return res;
        }
    }

})


var color_preprocessor = (function (fn_color_processor) {
    var that = this;
    //throw '!stop';
    var res = fp(function (a, sig) {

        //console.log('color_preprocessor sig ' + sig);

        if (sig == '[[s]]') {
            //var new_input =
            // use regexes to detect / read the string.

            //var rx_hex = /^#?[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]$/;
            var rx_hex = /(#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2}))/;
            //var rx_hex = /(#(([0-9A-Fa-f]{2}){3}))/;
            //var rx_hex = /(#([0-9A-Fa-f]{2}){3})/;
            var input = a[0][0];

            //var m = rx_hex.match(input);
            var m = input.match(rx_hex);
            //console.log('m ' + stringify(m));

            if (m) {
                // Could use arrayify or something to make the conversion quicker... will do that in more places, mainly want to get the code working now.

                var r = jsgui.str_hex_to_int(m[2]);
                var g = jsgui.str_hex_to_int(m[3]);
                var b = jsgui.str_hex_to_int(m[4]);

                var res = [r, g, b];
                return res;
            }

        } else {
            // call with the same arguments.
            //console.log('calling normal...');
            return fn_color_processor.apply(that, a);

        }
    });
    return res;
});

// In previous modules, it won't keep the same input_processors.
//  Is there a way of retrieving that from the most inner modules?
//test_Color();

// And inputting an indexed array.
//  Will need to accept 2d size inputs.
// Size could possibly be 3d, maybe 1d? A line has a size, which is also its length (though in the world of GUI it could also have
//  a thickness).

// Optional array looks more like a language feature (enhancement).
//  Or even a core language feature?


// There will be different types of optional arrays, will have different input parameters.
jsgui.input_processors['optional_array'] = fp(function (a, sig) {
    // would need to take in objects with the names of the properties as well.
    //  populate a sparse array with them.
    //   will make a very flexible HTML interface.
    //   controls will be able to have their properties changed in a flexible way, and output seamlessly to a wide variety of browsers.

    // the items in the index could be a bit more complicated, but we are going to say they are just strings for the moment.
    //  items_data_type_name...
    //   is the params an array of strings?
    // oa_params, input
    if (a.l == 2) {
        var oa_params = a[0],
            input = a[1];
        if (tof(input) == 'array') {
            // check it is within the right number.
            if (input.length <= oa_params.length) {
                return input;
            }
        } else {
            return input;
        }
    }
    if (a.l == 3) {
        var oa_params = a[0],
            items_data_type_name = a[1],
            input = a[2];
        // now need to get every item in the array or the item to conform to the given type.
        var input_processor_for_items = jsgui.input_processors[items_data_type_name];
        //console.log('input_processor_for_items ' + input_processor_for_items);
        //console.log('tof(input) ' + tof(input));
        if (tof(input) == 'array') {
            // check it is within the right number.
            if (input.length <= oa_params.length) {
                var res = [];
                each(input, function (i, v) {
                    res.push(input_processor_for_items(v));
                });
                return res;
            }
        } else {
            return input_processor_for_items(input);
        }
    }
    //console.log('oa_params ' + stringify(oa_params));
});

jsgui.input_processors['indexed_array'] = fp(function (a, sig) {
    // it may be taking some kind of data type that things need to be applied to.
    // eg 'size': ['indexed_array', ['distance', ['width', 'height']]],
    // would need to take in objects with the names of the properties as well.
    if (a.l == 2) {
        var ia_params = a[0],
            input = a[1];
        //console.log('ia_params ' + stringify(ia_params));

        if (tof(input) == 'array') {
            if (input.length <= ia_params.length) {
                return input;
            }
        }
    }
    if (a.l == 3) {
        var ia_params = a[0],
            items_data_type_name = a[1],
            input = a[2];
        var input_processor_for_items = jsgui.input_processors[items_data_type_name];
        if (tof(input) == 'array') {
            // check it is within the right number.
            if (input.length <= ia_params.length) {
                var res = [];
                each(input, function (i, v) {
                    res.push(input_processor_for_items(v));
                });
                return res;
            }
        }
    }
});

jsgui.input_processors['n_units'] = function (str_units, input) {
    // this will change things to have both the number of units and a string with the unit in an array.
    //  will make it easier to do maths on the distances.

    if (tof(input) == 'number') {
        return [input, str_units];
    }
    if (tof(input) == 'string') {
        //var rx_n_units = /^(?:(\d+)(\w+))|(?:(\d*)\.(\d+)(\w+))$/;
        var rx_n_units = /^(\d+)(\w+)$/;
        // then match it, should be multiple parts to the match.

        // Do want to get the various pieces working for the Control system.
        //  Then will be very nice indeed when compacted for a mobile-client.

        var match = input.match(rx_n_units);
        //console.log('match ' + stringify(match));

        if (match) {
            return [parseInt(match[1]), match[2]];
        }

        rx_n_units = /^(\d*\.\d+)(\w+)$/;
        match = input.match(rx_n_units);
        //console.log('match ' + stringify(match));
        if (match) {
            return [parseFloat(match[1]), match[2]];
        }
        //throw('stop');
    }
};
jsgui.map_data_type_data_object_constructors = jsgui.map_data_type_data_object_constructors || {};


var ensure_data_type_data_object_constructor = function (data_type_name) {
    //console.log('');
    //console.log('');
    //console.log('jsgui.map_data_type_data_object_constructors[data_type_name] ' + stringify(jsgui.map_data_type_data_object_constructors[data_type_name]));
    //console.log('');
    //console.log('');

    if (!jsgui.map_data_type_data_object_constructors[data_type_name]) {
        //console.log('html module: creating new Data_Object constructor for data_type: ' + data_type_name)
        //throw 'stop';
        // Need to get the variable back through the modules...
        //  Missing global variables?
        //  Move this function somewhere else?
        //  Maybe we could have some storage available in jsgui-lang-essentials through a closure.
        //  That way the code could be sent back... but do we still have different instances running?

        // Could just be different execution contexts... co can't feed back this information about other objects.
        //  But can feed functionality forards.

        // May need to have things more independant.

        //var dti = jsgui.get('dti');
        //console.log('dti ' + dti);
        //throw 'stop';
        var dto = jsgui.data_types_info[data_type_name];
       //console.log('dto ' + stringify(dto));
        //console.log()
        //throw 'stop';
        var dtc = Data_Object.extend({
            'fields': dto
        })
        dtc.prototype._data_type_name = data_type_name;
        jsgui.map_data_type_data_object_constructors[data_type_name] = dtc;
    }
    return jsgui.map_data_type_data_object_constructors[data_type_name];
}
jsgui.ensure_data_type_data_object_constructor = ensure_data_type_data_object_constructor;
//console.log('jsgui.input_processors ' + stringify(Object.keys(jsgui.input_processors)));
var dti_color = jsgui.data_types_info['color'];

jsgui.input_processors['color'] = function(input) {
    console.log('processing color input: ' + stringify(input));

    var input_sig = get_item_sig(input, 2);
    //console.log('input_sig ' + input_sig);

    if (input_sig == '[s]') input = input[0];

    var res = color_preprocessor_parser(input);
    // not sure that using the preprocessor is right...
    //  it returns a function, I think it applies to a function.
    throw '!!stop';
    //console.log('res ' + stringify(res));
    return res;
}

//color_preprocessor(create_input_function_from_data_type_info(dti_color));
jsgui.ensure_data_type_data_object_constructor('color');

jsgui.output_processors['color'] = function (jsgui_color) {
    var res = jsgui.arr_rgb_to_css_hex_6(jsgui_color);
    return res;
};

// collection needs a context...
//  can get the context from the first object.

// Grouping not working so well so far...
//  Maybe a less reflective way of making the group function?



var group = function() {

    // Hope this grouping system is not too slow.
    //  May be able to optimize / selectively make the grouping functions.

    var a = arguments;

    if (a.length == 1 && tof(a[0]) == 'array') {
        return group.apply(this, a[0]);
    }

    //var res = new Collection();
    var res;
    for (var c = 0, l = a.length; c < l; c++) {
        var item = a[c];

        if (c == 0) {
            res = new Collection({'context': item._context});

        }
        res.push(item);

    }

    var C = a[0].constructor;
    var p = C.prototype;

    //console.log('C ' + C);
    //console.log('p ' + p);

    for (i in p) {

        var tpi = tof(p[i]);
        //console.log('tpi ' + tpi);

        // if tpi is a function, then we can make a version for the collection.

        // need this to remember the function name... maybe with another closure.



        if (tpi == 'function') {
            // make a group version.

            (function(i) {
                //console.log('i ' + i);

                if (i != 'each' && i != 'get' && i != 'add_event_listener') {
                    res[i] = function() {
                        //console.log(i + ' called');
                        //console.log('called');
                        //throw 'stop';

                        // then for each of the items in the collection we call with the same parameters.
                        // But with which context?
                        //  Can we have a group context?

                        // this - will be the collection?

                        // then we need to call the collective function ...
                        //  on each of them?
                        var a = arguments;

                        res.each(function(i2, v) {
                            //console.log('i ' + i);


                            //v[i].apply(res, a);

                            // adding an event listener...

                            // do it differently?
                            //  have it so that the context is the object.
                            //   it needs to be that for the function to work.

                            // can that be changed so we give it another context?
                            //  so that it when the event happens, its triggered context is the group?
                            // group events will be very useful. then applying changes to a group.
                            v[i].apply(v, a);

                        })


                    }
                }
            })(i)



        }

    }

    //throw 'stop';


    // but the group methods...
    //  Collective methods.
    //   Could get the type of the first object.



    return res;

}

var true_vals = function(map) {
    var res = [];
    for (var i in map) {
        if (map[i]) res.push(map[i]);
    }
    return res;
}



var jsgui = extend(jsgui, {
//var jsgui = {
    'vectorify' : vectorify,
    'v_add' : v_add,
    'v_subtract' : v_subtract,
    'v_multiply' : v_multiply,
    'v_divide' : v_divide,
    'vector_magnitude' : vector_magnitude,
    'distance_between_points' : distance_between_points,
    //'arr_trim_undefined' : arr_trim_undefined,
    // 'remove_sig_from_arr_shell': remove_sig_from_arr_shell
    //'ll_set' : ll_set,
    //'ll_get' : ll_get,
    'execute_on_each_simple' : execute_on_each_simple,
    'mapify' : mapify,
    'filter_map_by_regex' : filter_map_by_regex,
    'atof' : atof,
    'npx' : npx,
    'no_px' : no_px,
    'str_arr_mapify' : str_arr_mapify,
    'arr_ltrb' : arr_ltrb,
    'true_vals': true_vals,

    // 'data_type_instance': data_type_instance,

    // 'data_types_info': data_types_info,

    //'input_processors' : input_processors,
    //'output_processors' : output_processors,

    // This is going to do a bit more to do with validation.
    //  Will validate according to types
    //  Will validate according to other specified requirements
    //   Type validation will be fairly easy... but do need to know what types are expected.
    //    Would be different ways of checking types, particularly with a class inheritance structure.
    //    'IS' type check.

    // Want to do checks I like I think is expressed in the HTML section.
    //  This will be integrated with form validation.
    // Will bring that functionality out of 'nested'.

    // Want to specify the requirements so that it can know to check for a property value.

    'validators' : validators,

    //'DataObject' : DataObject,
    //'Data_Object' : DataObject,

    // In some cases the wrapper will add difficulty / slowness.
    //  In others it could be useful for some precise number operations.

    //'KSVS': KSVS,
    //'KSVS_Cursor': KSVS_Cursor,

    //  DataValues could perhaps be addressable within a resource abstraction.

    //'Data_Value': Data_Value,
    //'Collection' : Collection,

    '__data_id_method' : 'lazy',
    // '__data_id_method': 'init',

    // 'DataCollection': DataCollection,

    'str_hex_to_int' : str_hex_to_int,
    'arr_rgb_to_css_hex_6' : arr_rgb_to_css_hex_6,

    // These are likely to be deprecated in favour of having lang handle
    // these internally and exposing add_data_type, which will be mapified.

    /*
     * 'populate_any_maps': populate_any_maps,
     * 'populate_optional_array_pos_maps': populate_optional_array_pos_maps,
     * 'populate_indexed_array_pos_maps': populate_indexed_array_pos_maps
     */
    // 'populate_all_dt_maps': populate_all_dt_maps,
    '_data_generators' : _data_generators,

    'group': group

    //'Ordered_String_List' : Ordered_String_List,

});
//console.log('jsgui.input_processors ' + stringify(jsgui.input_processors));
// var jsgui = {};
// alert('returning jsgui from jsgui-lang');
//return jsgui;
module.exports = jsgui;
//});

},{"./collection":26,"./data-object":29,"./data-value":30,"./evented-class":32,"./jsgui-data-structures":36,"./jsgui-lang-essentials":38}],40:[function(require,module,exports){

/*
define(['../../web/jsgui-html', './client-resource', './pool'],

	function(jsgui, Resource, Resource_Pool) {
*/

var jsgui = require('../../web/jsgui-html');
var Resource = require('./client-resource');
var Resource_Pool = require('./pool');


	// Client_Resource?
	//  I think that makes sense, so that we have something specific which has the URL attached.
	//   It is able to make HTTP requests to the server resource.



	
	var stringify = jsgui.stringify, each = jsgui.each, arrayify = jsgui.arrayify, tof = jsgui.tof;
	var filter_map_by_regex = jsgui.filter_map_by_regex;
	var Class = jsgui.Class, Data_Object = jsgui.Data_Object, Enhanced_Data_Object = jsgui.Enhanced_Data_Object;
	var fp = jsgui.fp, is_defined = jsgui.is_defined;
	var Collection = jsgui.Collection;
	
	//var exec = require('child_process').exec;

	// Perhaps this will have HTTP endpoints as well?
	//  Maybe we can access it through url/resources/

	// Perhaps a resource publisher, or a few of them could be useful.
	//  HTTP_Resource_Publisher?
	//  Generally publishes a resource over HTTP.
	//   Will have some authorization and authentication properties, hooked up with the proper providers.

	// This may be the place in which remote access to the resources is given.
	//  It would make sense.
	//  Perhaps it is worth using a resource publisher? Then is that a resource?
	//  I think the resource pool may be the sensible point of access.
	
	var Client_Resource_Pool = Resource_Pool.extend({
		'fields': {
			'url': String
		},
		'init': function(spec) {
			this._super(spec);



			
			// will add the Resource_Local_Server_Information
			
			
			// Will be nice to set them with an object.
			//  Not just the normal spec.
			//  Maybe can see if the spec matches fields?
			//  Or copy fields from the spec?

			// Have remote server info
			//  Allow for info on a number of different remote servers.
			//   (0 will be the one it got served from or the equivalent jsgui service provider)
			// Have local browser info
			// Other local info as necessary



			/*
			var lsi = new Local_Server_Info({
				'meta': {
					'name': 'Local Server Info'
				},
				'startup_type': 'auto',
				'access': {
					'full': ['server_admin']
				}
			});
			
			this.add(lsi);
			*/

			// And a resource publisher resource.
			//  It goes in the pool, and it publishes other resources (over HTTP)
			//   The resource pool contains its own publisher.

			/*
			var publisher = new Resource_Publisher_HTTP({
				'meta': {
					'name': 'HTTP Resource Publisher'
				},
				'startup_type': 'auto',
				'access': {
					'full': ['server_admin']
				}
			});
			
			this.add(publisher);

			*/
			
			
		},
		'start': function(callback) {

			// download the resource information from the server...
			//  http request.

			// Think that will be in jsgui-client.
			//  It's worth making the jsgui-client bundle

			// Maybe some other jsgui client bundles, like jsgui-client-platform
			//  including all platform client components. Then there could be some other builds that include more thigns still,
			//  like bunches of controls / components for different customers / websites.

			//console.log('Client_Resource_Pool start, window.location ' + window.location);

			// need to get the resources url...


			var _request_resources = function() {
				var loc = window.location.toString();
				var pos1 = loc.indexOf('//');
				var pos2 = loc.indexOf('/', pos1 + 2);
				var part1 = loc.substr(0, pos2 + 1);
				//console.log('part1 ' + part1);

				var that = this;

				// carry out the HTTP request.
				//  Use the result to initialize the various resource objects in a collection...
				//  or using the pool really.

				// Perhaps the client pool will have been told what resources are there.
				//  Also, the client pool could be used to access a single resource on the server, and have a bunch of resources available on the client.
				//  These resources will be a bit like global variables with an asyncronous interface.

				// Not sure about assuming the server will provide the resources list a /resources

				// We don't want that default, it makes an extra requirement for the server to fulfill.

				
				this.set('url', urlResources);

				var urlResources = part1 + 'resources';
				console.log('urlResources', urlResources);

				// An http abstraction may be good for older browsers, or polyfill elsewhere.
				var oReq = new XMLHttpRequest();
				oReq.onload = function(res) {
					console.log('oReq.responseText ' + oReq.responseText);

					var objResponse = JSON.parse(oReq.responseText);

					// Then for each of them we create an object.

					if (tof(objResponse) == 'array') {
						each(objResponse, function(i, v) {
							var tv = tof(v);

							if (tv == 'string') {
								// it's the name of the Resource.

								var resource = new Resource({
									'meta': {
										'name': v,
										'pool': that,
										'url': urlResources + '/' + v
									}
								});
								that.add(resource);
								//console.log('resource', resource);
							}
							if (tv == 'object') {
								//console.log('v', v);
								var resource = new Resource({
									'meta': {
										'name': v.name,
										'pool': that,
										'url': urlResources + '/' + v.name,
										'type_levels': v.type_levels
									}
								});
								that.add(resource);

							}
						})
					}

				};
				oReq.open("get", urlResources, true);
				oReq.send();
			}

			callback(null, true);


			



			/* From resource_pool init.



			this._resources = new Collection({
				'index': {
					//'sorted': [['name']] // similar to above, but literally it's a single index in a list of indexes, that index just has one field, in a list of fields
					
					// The syntax for specifying a (sorted) index is for an attached field.
					//  It gets the data for the attached object.
					// {'attached': {'meta': 'name'}}
					'sorted': [[{'attached': {'meta': 'name'}}]]
					//sorted: [[['attached', 'meta', 'name']]]
				}
			});

			*/





			// http://192.168.1.14:5009/resources
			//  not so sure it needs to make an HTTP request.
			//  Perhaps it can find out about the resource types?

			// Though, the resource pool having the basic information about the resources makes a lot of sense.
			// Perhaps have some more information about the resource, metadata about what they do?
			//  Their API versions?

			// Some resource type info would help.
			//  There could be published APIs on how to access particular resources, maybe call them interfaces.

			// ["Local Server Info","HTTP Resource Publisher","Login HTML Resource","Application Router","Local File System","Web Admin","Info","Site JavaScript","Site CSS","Site Images","Authentication","metabench"]

			// Local Server Info
			//  See a bit of info about the local server
			// HTTP Resource Publisher
			//  Determine how HTTP resources get published? Will see what would be good to administer here, but
			//  we want many of the settings to be open.
			// Web Admin
			//  Would be a good resource to interact with. Through resource mechanisms we will be able to alter the
			//  content of the website.
			// Local File System
			//  Having access to the server file system.
			//   Could modify the site files as they are running.
			// Info
			//  This is a particular database table I think.
			// metabench
			//  This is a database.

			// Identifying the types of resources when /resources is called would be useful. A bit more metadata too
			//  if appropriate.





		}
		
	})
module.exports = Client_Resource_Pool;
	
	
	//return Client_Resource_Pool;
	
	
//});
},{"../../web/jsgui-html":73,"./client-resource":41,"./pool":42}],41:[function(require,module,exports){
// But is this part of the html client, or it uses the html client.

// The client has page context.
//  Page context has the resource pool.

// So, client-resource will need html-enh I think, but not the client system.


/*
define(['../../web/jsgui-html-enh', './resource'],
	function(jsgui, Resource) {
*/
var jsgui = require('../../web/jsgui-html-enh');
var Resource = require('./resource');

	var stringify = jsgui.stringify, each = jsgui.each, arrayify = jsgui.arrayify, tof = jsgui.tof;
	var filter_map_by_regex = jsgui.filter_map_by_regex;
	var Class = jsgui.Class, Data_Object = jsgui.Data_Object, Enhanced_Data_Object = jsgui.Enhanced_Data_Object;
	var fp = jsgui.fp, is_defined = jsgui.is_defined;
	var Collection = jsgui.Collection;

	// Extends AutoStart_Resource?

	// May need to change around a fair few references to make it workable.
	// May need some more complicated logic to change it to the path for service.

	// There can be a client app that's specifically for a resource.
	//  That's a special case.
	// Other client side apps will access multiple resources.
	//  They can do this through a Resource_Pool.
	//  There could be client-side resources that make use of information sharing between these client and server side resources.




	// This client resource could reference a remote resource.

	// Will have client-remote-reference resource
	//  maybe just client-remote
	//  will work in a similar way to remote or node-remote in terms of API, but internally it will do HTTP calls differently.
	//  Possibly could just use jsgui though, have it expose the same API for node and the client.

	// This one is still fairly abstract.
	//  It will be the client-remote-link resource which will have the functionality.
	//  client-remote-link will connect with websockets to get events
	//  it will do get with http.


	// A resource control will recieve events from the client resource.
	//  It may also ensure it has been set up.

	// Also a Resource_Client file that sets up a resource connection with a particular resource?
	//  Maybe don't set up such abstract resource linking for the moment?

	// With the Resource-Client architure, we could define the back-end in terms of a Resource, and not need to write various pieces of boilerplate for them
	//  to communicate with each other.


	// Resource_Client may be a necessary JS file.
	//  Would be JavaScript that runs on a page that's for when it's the client for a single resource?

	// With the clock resource, would want it to have a resource control.
	//  That control could possibly speak to the resource directly.
	//  It could possibly speak to a client-side resource / aggregator that then speaks to the server resource.

	// Serving a page with a component that connects back to the resource...
	//  I think a lot of the activity will be in the user control,
	//  however, it may be that the user control will just be making use of the client-side resources or client-side resource pool.


	var ends_with = function(str, suffix) {
	    return str.indexOf(suffix, str.length - suffix.length) !== -1;
	}

	var Client_Resource = Resource.extend({
		//'fields': {
		//	'url': String
		//},

		'init': function(spec) {
			this._super(spec);

			if (spec.meta) {
				var meta = spec.meta;
				console.log('1) meta.url', meta.url);
				if (meta.url) this.meta.set('url', meta.url);
				if (meta.type_levels) this.meta.set('type_levels', meta.type_levels);


				//console.log('meta.name ' + meta.name);
			}

			this.data = new Data_Object();

			var that = this;


			// both in one parameter here?


			// Why not listen to the resource's data directly?
			//  Should not be a problem when doing it on the client?


			this.data.on('change', function(property_name, property_value) {
				//console.log('');
				//console.log('resource data change property_name', property_name);
				//console.log('property_value', property_value);

				that.trigger('change', property_name, property_value);

			})


			//this.meta.set('custom_paths', new Data_Object({}));
			// Those are custom file paths.

			// could have a collection of directories, indexed by name, that get served.

			// Index the collection by string value?
			//this.meta.set('served_directories', new Collection({'index_by': 'name'}));

			// Will also have a URL.
			//  The client resource pool will have a base url.
			//   Maybe default base URL, it's set up to communicate with the server that served the HTML document.

			// could have a variety of server URLs, but let's deal with one for the moment.


		},
		'get': fp(function(a, sig) {
			var url, callback;
			var url_path;
			if (a.l === 1) {
				url = this.meta.get('url').value();
				callback = a[0];
			}
			if (a.l === 2) {
				url_path = a[0];
				callback = a[1];

				//console.log('url_path', url_path);

				url = this.meta.get('url').value() + url_path;
			}

			// should be able to supply the url

			//var

			// jsgui lang essentials ends function
			//  test if a string ends with something.

			var ends_dot_json = ends_with(url, '.json');
			//console.log('ends_dot_json', ends_dot_json);

			var json_url;

			if (!ends_dot_json) {
				json_url = url + '.json';
			} else {
				json_url = url;
			}

			//console.log('json_url', json_url);
			jsgui.http(json_url, function(err, res) {
				if (err) {
					callback(err);
				} else {
					//console.log('res', res);
					callback(null, res);
				}
			})
		}),

		'notify_change_from_server': function(property_name, property_value) {
			// needs to do some kind of silent set.

			//console.log('client resource notify_change_from_server');

			var data = this.data;

			//console.log('data', this.data);

			// may need to do a set with options, such as {silent: true};
			//  may need to define message propagation in more detail.
			// Will need to have it working by default, but various things explicitly set in the messages to determine where the message gets
			//  sent to, and presented in which way, including messages acknowlwdging that a previous message has been processed.

			// Don't want this to be too complicated.
			//  I think without much more code we will have the functionality.

			// Could do more detail in some areas later on.




			this.data._[property_name] = property_value;

			// also different ways of raising events or options for the events that are raised.
			//  May need to include more change event metadata.
			//   Such as what initiated the event. Perhaps a user.
			//    Maybe info on the event processing chain. Such as user,data_object
			//    or remote,data_object

			// So the system can tell where the change came from, it can know how to propagate the change and how and whether to acknowledge it.

			// It may be worth having message IDs.
			//  Also aggregating messages that get sent from the server.
			//  Could have submessages within an original one.

			// Want a simple enough core to this.
			//  Easy to understand and powerful, and then more complexity can be built on top of that.

			// I think more properties in change events could be helpful.
			//  The change events could be used in processing the events in some cases, and want to avioud ambiguity and infinite loops.
			// Sending a few extra string codes such as it's initiator, possibly a message id that is the change notification, will help the app process
			//  the changes as they take place in different places.

			// Resource changes on the server. Message sent to clients. Clients change the data in corresponding client-side resource. Client components
			//  listen for changes to the local resource and respond accordingly.

			// Will be using different types of change binding.
			//  There will be some complexity there.
			//  It's going to work easily with default configurations.
			//   Will be very fast to set something up as a resource, and the defaults will make sense.

			// There will be a few different information lifecycles, with changes initiating in various places and being propagated to
			//  various other places.

			//  Could be a place for security to validate that whatever is making the change has got the authority to do so.

			// The change event handling in the Data_Objects probably require more work to them.
			//  Making it so that with different types of changes they notify different things about it.

			// A resource publisher could be listening for changes in a data_object on a server.
			//  The changes originate from the server, and are to be viewed as the 'correct' version of the information.

			// There could be some read-only data sources, like a clock on the internet.
			//  Or setting its time would involve setting the computer's system time. Possibly, but something that may need higher security.

			// The simple clock example will just send data fro mthe server. That data is read-only.
			//  It will be good to make enough detail about the data is sent.
			//  Will be interesting to use this clock example for some other types of data transmission, such as peer-to-peer, with the peers running
			//  node.js and being coordinated by a central server. The central server would send its updates to only some of the clients, and
			//  those clients would send it on. Could maybe have a central system defining where the clients are, and what hops of the chain it is.
			// Could also have the central system maintain keys. Public key encryption. Communication between clients could be encrypted. They could be encrypted
			//  so that other clients would not understand them, and so they need to speak to the client they are assigned by the central server.






			// When a client-resource changes, it may send it's info to the server?
			//  Or only when set is called?


			this.data.trigger('change', property_name, property_value);

			// Or the resource listens to data changes, triggers change on itself when the data changes.

			// Or change on the resource itself I think.







		}
		//'start': function(callback) {
		//	callback(null, true);
		//}
	});

module.exports = Client_Resource;
	//return Client_Resource;


//});

},{"../../web/jsgui-html-enh":71,"./resource":43}],42:[function(require,module,exports){
// Maybe it has different requirements in node.
//  Could possibly load these ones seperately if it's a node environment.

// This seems a lot to do with the server-side resource pool.
//  However, it may be worth having a client-side resource pool operate fairly similarly.

// Having some specific JSON and HTML interfaces to some resources would be nice
//  as well as having the system be able to explain such resources.
//   maybe resource/meta

// This could possibly get published by a resource publisher.

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(['../../web/jsgui-html', './resource'], 

	function(jsgui, Resource) {
*/
var jsgui = require('../../web/jsgui-html');
var Resource = require('./resource');
	
	var stringify = jsgui.stringify, each = jsgui.each, arrayify = jsgui.arrayify, tof = jsgui.tof;
	var filter_map_by_regex = jsgui.filter_map_by_regex;
	var Class = jsgui.Class, Data_Object = jsgui.Data_Object, Enhanced_Data_Object = jsgui.Enhanced_Data_Object;
	var fp = jsgui.fp, is_defined = jsgui.is_defined;
	var Collection = jsgui.Collection;

	// Should work to get this closer to the desired get/set resource interface.
	//  That would help with administering it.
	//  Also would make subresources available, these would have their own interfaces.

	// Not sure if the Resource_Pool should have an HTTP endpoint... maybe Server_Resource_Pool?



	// Keeps track of resources available within JavaScript process (browser or node.js).
	var Resource_Pool = Resource.extend({

		'init': function(spec) {
			this._super(spec);
			
			// Sorting them by a Data_Object's.meta name?
			//  need an easy way of expressing this.
			//  meta('name')?
			//  attached('meta', 'name')

			// I think indexing by attached Data_Object properties makes sense.
			//  That would mean defining an index as applying to an attached object.
			//   in this case 'meta'

			// sorted: [['attached', 'meta', 'name']]
			//  does not look nice, but it gets the point accross.
			//  hopefully would not be confused.
			//  One sorted index by its meta.name
			// I think the attached keyword makes sense here as meta is attached to the object rather
			//  than really a component of the object itself.

			// I think registering object attachments makes sense.
			//  That is more core-level work and I want to draw an end to that for the moment.
			// Object attachments being another interesting part which will be worthwhile.


			this._resources = new Collection({
				'index': {
					//'sorted': [['name']] // similar to above, but literally it's a single index in a list of indexes, that index just has one field, in a list of fields
					
					// The syntax for specifying a (sorted) index is for an attached field.
					//  It gets the data for the attached object.
					// {'attached': {'meta': 'name'}}
					'sorted': [[{'attached': {'meta': 'name'}}]]
					//sorted: [[['attached', 'meta', 'name']]]
				}
			});
			
		},

		'resources': fp(function(a, sig) {
			if (sig == '[]') {
				return this._resources;
			}
		}),
		
		'_get_resources_by_interface': function(i_name) {
			var res = [];
			
			this._resources.each(function(i, resource) {
				console.log('resource ' + resource);

				// Not so sure we should treat 'get' like that for the resource.
				//  The resource may be a list of items, one of which is called 'interface'

				// Need that one on a lower level.
				//  Like resource.interface



				var i = resource.get('interface');
				if (tof(i) == 'string') {
					if (i == i_name) res.push(resource);
				} else if (tof(i) == 'array') {
					var done = true;
					each(i, function(i2, v) {
						if (!done) {
							if (i == i_name) res.push(resource);
							done = true;
						}
					})
				}
				
			})
			
			if (res.length > 1) return res;
			return res[0];
			
		},
		
		'index_resource': function(obj) {
			// will get some metadata from the resource.
			
			// resource will be indexed by its location and its type.
			//  so will be able to find the local postgres dataabase that way
			
			// There will be different levels of locality
			//  May be a shorthand for the time and difficulty in communicating between two locations
			
			// in-process
			// same machine
			// lan (same data centre)
			// internet, same region
			// internet
			// stellar (could have more variations perhaps but will not be necessary for most applications)
			
			// to begin with, there will likely be some in-process resources.
			//  some of these resources could be resource connectors.
			
			
		},
		
		'receive_resource_event': fp(function(a, sig) {
			//console.log('receive_resource_event sig ' + sig);
			
			if (sig == '[D,s,[s,s]]') {
				var data_object = a[0];
				//console.log('data_object ' + stringify(data_object));
				
				//console.log('a[1] ' + a[1]);
				//console.log('a[2] ' + stringify(a[2]));
				
			}
			
			if (sig == '[D,s]') {
				var data_object = a[0];
				//console.log('data_object ' + stringify(data_object));
				//console.log('a[1] ' + a[1]);
				
				var event_name = a[1];
				//console.log('event_name ' + event_name);
				// could be that it has started?
				
				
				// then need to raise this event.
				
				
				
				
				// so if an resource has started, could have a particular handler for that.
				
				// There will be groups of resources that are needed for other ones to start.
				//  When one of these resources has loaded, it will check to see if others have also loaded.
				// This should be done with fairly fast algorithms, we don't want the system to slow down as it is getting going.
				
				
				
				
				
				
				
			}
			
		}),
		
		'add': function(obj) {
			// adds the resource obj to the pool.
			
			// Each resource will have its own individual name within the pool.
			//  There may be resources that get put into groups too.
			var that = this;
			
			//console.log('obj ' + stringify(obj));

			var obj_name = obj.meta.get('name');
			
			//console.log('** obj_name ' + obj_name);
			
			if (this.has_resource(obj_name)) {
				throw 'Resource pool already has resource with name ' + obj_name;
			} else {
				
				//this._dict_resources[obj_name] = obj;
				
				// raise an event saying that the resource was added.
				
				this._resources.add(obj);
				//obj.parent(this);

				// don't think we can do it like that.
				//  obj.set('pool', this);
				//  the resource could have a 'pool' object of its own, the resource could hold sports results
				//   for example.

				obj.meta.set('pool', this);
				


				this.raise_event('added', obj);
				// listen to events from that resource.

				// Do we want just a general listener for events?
				//  So we listen to any event from it?
				//obj.add_event_listener(that.receive_resource_event);
				
			}
			
			
		},
		'push': function(obj) {
			return this.add(obj);
		},
		'has_resource': fp(function(a, sig) {
			
			
			//return is_defined(this._dict_resources[resource_name]);
			
			//return 
			
			if (sig == '[s]') {
				// one string value, that will be the value of the unique primary index
				
				var obj_lookup_val = a[0];
				
				return this._resources.has(obj_lookup_val);
				
			}
			
			
			
		}),
		
		// Likely to just be 'get', with it returning resources inside.
		//  And perhaps going through an adapter.

		// Can not get the actual resource as a programming object if it is remote.
		//  In that case, we need to use a transport mechanism.

		// Need to be able to access the resources' data with a convenient interface, not having to write repeated HTTP plumbing.

		


		'get_resource': fp(function(a, sig) {
			//console.log('get_resource sig ' + sig);
			
			//return is_defined(this._dict_resources[resource_name]);
			//return 
			
			if (sig == '[s]') {
				// one string value, that will be the value of the unique primary index
				
				var obj_lookup_val = a[0];
				//console.log('this._resources ' + stringify(this._resources));
				//throw 'stop';
				//console.log('obj_lookup_val ' + obj_lookup_val);

				//console.log('this._resources ' + stringify(this._resources));

				// needs to check ['meta'].name
				//  meta is not accessed through the normal interface.
				//   perhaps we could have a .meta for dealing with properties like name
				//   the resource's get and set should be an unobstructed interface to the resource
				//   itself.

				// Indexing a Data_Object not by it's normal contents, but by metadata or 
				//  other attached objects.

				// I think Data_Object and Resource meta(data) indexing makes the most sense.

				// Data_Object.meta could make a lot of sense.
				//  We could possibly have the same name field in some cases.
				//  Meta makes the most sense for resources. Perhaps only use them there as they enable the
				//   direct object interface.

				// However, the collection of resources in a pool may need indexing by the name field
				//  which is within 'meta'.

				//var res = this._resources.find('name', obj_lookup_val)[0];
				//console.log('obj_lookup_val ' + obj_lookup_val);
				//var res = this._resources.find('["attached", "meta", "name"]', obj_lookup_val)[0];

				// Need to say it's finding a single attached field.
				//  don't want this to be misunderstood for three fields to look for.
				// Perhaps need to think about and formalise the API a bit more.
				//  But getting it to work will be a great help!

				// Collection.find syntax.

				// Find requests... perhaps they could take more work to make a fully flexible and 
				//  intuitive format.
				// ["attached", "meta", "name"] basically being one field in this context.

				// This could quite possibly do with more specification work done outside of the Resource_Pool.

				// .findInAttched('meta', 'name') would search the attached fields.

				// Indexing within the attached fields.

				// Treating the attached fields as just one field name within the index?
				//  But can we tell the difference between ["attached", "meta", "name"] and a collection / array
				//   of fields?

				// {'attached': 'meta.name'}
				//  That may be better for attached fields.
				//  The field is held by an object, which would not get confused with a plural.

				// {'attached': {'meta': 'name'}} - would work for multi-level attachments
				//  Multi-level attachments?

				// {'attached': {'meta': {'attached': {'secondAttachment': 'fieldName'}}}}
				//  That could work for multi-level attachments

				// Attached fields as object makes a lot of sense.



				// we can have a look at the index in the find function




				//var res = this._resources.find(["attached", "meta", "name"], obj_lookup_val)[0];
				//console.log('pre find resource');

				// Not sure it's being indexed properly by attached properties.



				var res = this._resources.find({'attached': {'meta': 'name'}}, obj_lookup_val)[0];
				//console.log('post find resource');

				//var res = this._resources.find(stringify(["attached", "meta", "name"]), obj_lookup_val)[0];
				//console.log('this._resources.length() ' + this._resources.length());
				//console.log('res ' + stringify(res));
				
				return res;
				
			}
			
			
			
		}),
		
		// have resources as a field?
		//  Means no need for the boilerplate code when it is linked.
		//'resources'
		
		
		// May be useful to have a callback parameter here rather than just publish / subscribe.
		
		'start': function(callback) {

			//console.log('resource pool start');

			// needs to look at the various resources in the pool.
			//  start each of them if they are supposed to start automatically.
			
			
			var arr_resources_meeting_requirements = [];
			
			//console.log('this._resources.length() ' + this._resources.length());
			
			this._resources.each(function(i, v) {
				//console.log('i ' + i);
				//console.log('v ' + stringify(v));
				
				// if it has all its requirements met, start it.
				
				// requirments - there may be conditional requirements in the future (like email address is not required when a Facebook profile URL is given), but for the moment each requirement is required
				//  could still be similar, with OR composite requirements.
				
				// check if the resource meets the requirements...
				//console.log('pre meets_requirements');
				var mr = v.meets_requirements();
				//console.log('post meets_requirements');
				
				// and need a callback for when they all have started.
				
				//  I think doing the requirements network planning before starting will be the best way.
				//   That could get things to start very efficiently.
				
				//console.log('meets_requirements ' + mr);
				if (mr) {
					//v.start();
					arr_resources_meeting_requirements.push(v);
				}
			});
			
			//console.log('arr_resources_meeting_requirements.length ' + arr_resources_meeting_requirements.length);
			var l_resources = this._resources.length();
			//console.log('l_resources ' + l_resources);


			
			if (arr_resources_meeting_requirements.length == l_resources) {
				
				var fns = [];
				
				// can do this without call_multi - though I would prefer to use call_multi and have it work by a long way.
				
				var num_to_start = arr_resources_meeting_requirements.length;
				
				//console.log('num_to_start ' + num_to_start);
				//throw 'stop';
				
				var num_starting = 0, num_started = 0;
				var cb = function(err, start_res) {
				    num_starting--;
				    num_started++;
				    //console.log('cb');
				    //console.log('num_started ' + num_started);
				    
				    if (num_started == num_to_start) {
				        callback(null, true);
				    }
				}
				
				each(arr_resources_meeting_requirements, function(i, resource_ready_to_start) {
				    //console.log('');
				    //console.log('');
				    //console.log('resource_ready_to_start ', resource_ready_to_start);
				    //throw 'stop';
				    // should give the context OK.
					//fns.push([resource_ready_to_start, resource_ready_to_start.start, []]);
					//console.log('pre resource start');

					// But starting with the wrong context???
					resource_ready_to_start.start(cb);
					//console.log('post resource start');
					
					num_starting++;
					// but the callback...
					
					//fns.push([function(callback) {
					//    resource_ready_to_start.start(callback);
					//}, []])
					
				});
			}
			
			
		}
	});
	
module.exports = Resource_Pool;
	//return Resource_Pool;
	
	
//});
},{"../../web/jsgui-html":73,"./resource":43}],43:[function(require,module,exports){
// Want to get the core resources working and tested.
//  Want to run a clock website / service to start with.
//  The server could have a clock, while clients could connect to it and share the information.
//  Could also experiment with P2P distribution of the data.
//  A clock is also useful because it contains time signals so we can see how long it takes for data to reach various machines.


// Intersted in having a remote Linux computer.
//  Ability to SSH into it and run commands.

// Want to be able to remotely configure and access a Raspberry Pi as a Resource.





var jsgui = require('../../core/jsgui-lang-util');

var Class = jsgui.Class, Data_Object = jsgui.Data_Object, Collection = jsgui.Collection;
var is_defined = jsgui.is_defined, fp = jsgui.fp, stringify = jsgui.stringify, tof = jsgui.tof;
var call_multiple_callback_functions = jsgui.call_multiple_callback_functions, call_multi = jsgui.call_multi;
var each = jsgui.each;

// Status to see if a resource has started or not?
//  I think resource status is important.
//  However status may entail more things.
//   status.phase
//   phase

// meta.phase

// A resource's context matters.
//  It will be the server rather than a page context.





var Resource = Data_Object.extend({
    // The link between the abstract resource and the resource on the internet / network / computer.
    //'fields': {
    //	//'meta': Data_Object
    //	'meta': 'data_object'
    //},

    'init': function(spec) {
        //
        if (!is_defined(spec)) spec = {};

        this._super(spec);

        if (is_defined(spec.name)) {
            // Need to deal with both resource properties and inner properties.
            //  Not sure about having resource.set('name') naming the resource.
            //   Sounds OK normally, but Resource needs to be flexible, eg a resource could provide
            //   translations of a work to a different language, so get('name') needs to just be calling
            //   the resource with that value.

            // Perhaps some kind of inner get and set?
            // Or inner is the normal.
            //  An object to represent a resource's external properties?

            // Could have .name for it's name
            //  or .self for a Data_Object that refers to itself.
            //  or .inner or .resource for the Data_Object that is the resource's inner data?
            //  .data

            // I like having .get and .set for dealing with the resource's data.
            //  and different ways for indexing the resource.

            // .metadata

            // and name is part of the metadata.

            // this.set('meta.name')

            // This way there is a .meta object which holds the name




            //this.set('meta.name', spec.name);
        }
        this.meta = new Data_Object({
            'fields': {
                name: 'string'
            }
        });

        // But give the resource name in the spec?
        //  That may be the best way of doing it, but it's not the API for now.


        if (spec.meta) {
            var meta = spec.meta;
            if (meta.name) this.meta.set('name', meta.name);
            //console.log('meta.name ' + meta.name);
        }
        // Set the meta url in the client side resource.

        if (is_defined(spec.startup_type)) {
            this.set('startup_type', spec.startup_type);
        }

    },

    'start': function(callback) {
        // check the requirements

        //  check requirements recursive - checks the requirements of everything required, and if they have the check_requirements function, it uses that.
        //   I think using the system of names APIs will help here.

        // I think the base class should raise the event.

        //this.trigger('start');

        //console.log(new Error().stack);
        //throw 'no start function defined for resource (subclass)'

    },

    // meets_requirements
    //  check if all the prerequisite resources are active
    //  maybe check for login status if applicable.

    'meets_requirements': function() {
        // Likely will be part of Status

        //return false;

        return true;
    },

    // 'get' will be the function to use.

    // may have toJson / to_json.
    'get_abstract': function() {

        // Abstract_Resource - would be a description of a resource?
        //  Perhaps we'll only need json and json schema.
        //  Making the data_object and collection conform to json schema would be nice.
        //  Would have something very nice to do with creating a gui for forms.
        /*


        var res = new AR.Abstract_Resource({

        })
        */
    },

    // the last item in the signature is the callback

    'set': fp(function(a, sig) {

        //console.log('Resource.set sig ' + sig);
        //console.log('Resource.set a ' + stringify(a));
        var last_param = a[a.l - 1];
        var callback;

        if (tof(last_param) == 'function') {
            callback = last_param;
            var arr_params = a.slice(0, a.l - 1);
            var res = this._super.apply(this, arr_params);
            callback(null, res);

        } else {
            // but why is a callback still needed?
            //  because in super, it requires a callback when it calls 'get', which is the newer get.

            var res = this._super.apply(this, a);
            return res;
        }




    }),

    // Can we expect a Resource to return its data as a Resource?
    //  Maybe not always




    'get': fp(function(a, sig) {

        //console.log('Resource get sig', sig);

        // if it does not have a function in the sig, it's syncronous

        var is_async = sig.indexOf('f') > 0;

        if (is_async) {
            var callback;
            var last_param = a[a.l - 1];
            if (tof(last_param) == 'function') {
                callback = last_param;
            }
            if (callback) {
                var arr_params = a.slice(0, a.l - 1);
                //console.log('arr_params.length ' + arr_params.length);
                // _super with fp?

                // context with fp?
                // Need to sort out super with fp!
                //  Though super may well use fp anyway.


                //console.log('this._super ' + this._super);
                //console.log('resource arr_params ' + stringify(arr_params));
                //var res = this._super.apply(this, arr_params);

                // We can apply a collection resource's get asyncronously?
                //  Possibly upgrade collection and data_object to handle async operations (though it's not async code)

                // if it is a resource?
                //  have an indicator on a function to see if it is async or not?
                //  asyncify?

                //



                var res = this._super.apply(this, a);
                return res;



                //console.log('res ' + stringify(res));
                //callback(null, res);
            }
        } else {
            //var stack = new Error().stack;
            //var message = 'Resource.get requires a callback (err, result) as its last parameter';
            //console.log(message);
            //console.log(stack);

            //throw

            var res = this._super.apply(this, a);
            return res;
        }




    })

});

/*
var Web_Resource = Resource.extend({
    'init': function(spec) {
        this._super(spec);
    },
    'respond': function(res, req) {

    }

})

var Html_Resource = Web_Resource.extend({
    'init': function(spec) {
        this._super(spec);
    }
})


var Resource_Error = Data_Object.extend({
    'init': function(spec) {
        this._super(spec);

        if (spec.text) {
            this.set('text', spec.text);
        }
    }
});

var res = {
        'Resource_Error': Resource_Error,
        //'Resource_Connector': Resource_Connector,
        'Resource': Resource,
        'Web': Web_Resource,
        'Html': Html_Resource
}

return res;
*/

module.exports = Resource;
	//return Resource;
//});

},{"../../core/jsgui-lang-util":39}],44:[function(require,module,exports){

// will also use the client-resource-pool.
//  This is going to be an interesting class that enables the client to connect to various resources on the server.
//  It may have an interface to browse / connect to the resources on the server that served it.

// Maybe it will do a get request, with its authentication, perhaps a key that was sent for that specific request.
//  We want to fins a way to expose resources on the server for the client to access.

// And this is going to include a client-side resource pool.

// Another problem with circular references here.

// I think the page context should be part of html-enh
//  html-enh including client-side enhancements.



var jsgui = require('./jsgui-html');

var stringify = jsgui.stringify, each = jsgui.each, arrayify = jsgui.arrayify, tof = jsgui.tof;
var filter_map_by_regex = jsgui.filter_map_by_regex;
var Class = jsgui.Class, Data_Object = jsgui.Data_Object, Enhanced_Data_Object = jsgui.Enhanced_Data_Object;
var fp = jsgui.fp, is_defined = jsgui.is_defined;
var Collection = jsgui.Collection;

// The client page context should be able to generate selection scopes.
//  We ask the context for selection scopes, and the selection scopes have IDs that are individual to the context.

// Now thinking that the Client_Page_Context should also hold the Client_Resource_Pool.
//  That client-side resource pool would hold resources that are usable client-side. They would likely involve interacting with a server.
//  They would be client-side proxies of the server-side resource, which goes through a Resource_Publisher to get it out over the network.

var Client_Resource_Pool = require('../resource/core/client-pool');



var Selection_Scope = require('./selection-scope');


//console.log('jsgui.Page_Context', jsgui.Page_Context);
var Client_Page_Context = jsgui.Page_Context.extend({
    'init': function(spec) {
        spec = spec || {};


        this._super(spec);
        //this.set('document', spec.document);
        this.document = spec.document || document;

        // Not so sure about creating the resource pool or requiring the resources.
        //  Could have problems with dependencies.


        // map_controls

        // map_els

        // The context will have a map of elements by their jsgui ids.
        //  This will be needed for activation in some places.
        //   It seems not to be needed (so far) on the server.







        //var resource_pool = new Client_Resource_Pool();
        //this.pool = resource_pool;

        //resource_pool.start();
        // so the pool probably won't have loaded when controls get activated.

        // Add the resource_pool into the page context at a later occasion.
        //  The basic html client will not need resource.
        //  Resource requires some html functionality though.
        this.resource_pool = new Client_Resource_Pool({});

        this.map_els = {};


        // The item IDs could be handled here... use the local variable closure here.
        this.selection_scopes = {};

        this.selection_scope_id_counter = 0;

    },
    'new_selection_scope': function() {
        // create the selection scope, with an assigned id

        var res = new Selection_Scope({
            'context': this,
            'id': this.selection_scope_id_counter++
        })

        return res;

    },

    'get_selection_scope_by_id': function(id) {
        if (!this.selection_scopes[id]) {
            this.selection_scopes[id] = new Selection_Scope({
                'context': this,
                'id': id
            });
        }
        return this.selection_scopes[id];
    },


    'body': function() {
        var doc = this.document;
        //console.log('doc', doc);
        var bod = doc.childNodes[0].childNodes[1];
        //var bod = doc.body;
        //console.log('bod', bod);

        var bod_id = bod.getAttribute('data-jsgui-id');
        //console.log('bod_id', bod_id);
        var res = this.map_controls[bod_id];
        //console.log('res', res);
        return res;
    }

    //get id's of particular types of items...

});
// Also want a File_Server.
//  Want files to be served from a particular path, as a resource in the URL system.
//  Will be able to post files there with the right permission.
module.exports = Client_Page_Context;
	/*
	return Client_Page_Context;


});

*/

},{"../resource/core/client-pool":40,"./jsgui-html":73,"./selection-scope":74}],45:[function(require,module,exports){
var jsgui = require('../../jsgui-html');
var Item = require('./item');

var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof;
var Control = jsgui.Control;
var Collection = jsgui.Collection;

// will have a context menu by default

var Button = Control.extend({

    'init': function(spec, add, make) {
        // Wont fields have been set?
        this._super(spec);
        var that = this;
        this.__type_name = 'button';

        this.set('dom.attributes.class', 'button');

        // Want to have a system of accessing icons.
        //  Will be possible to do using a Postgres website db resource
        //   First want it working from disk though.





        if (spec.text) {
            this.set('text', spec.text);
        }
        if (!this._abstract && !spec.el) {
            if (spec.text) {
                this.add(spec.text);
            }
        }
    },
    'activate': function() {
        this._super();
    }
});

module.exports = Button;
},{"../../jsgui-html":73,"./item":55}],46:[function(require,module,exports){
// object viewer


//if (typeof define !== 'function') { var define = require('amdefine')(module) }

// html-enh depending on Context_Menu?
	


//define(["../../jsgui-html", "./menu-node"],
	//function(jsgui, Menu_Node) {

        var jsgui = require('../../jsgui-html');
        var Menu_Node = require('./menu-node');
		
		var stringify = jsgui.stringify, each = jsgui.eac, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		var group = jsgui.group;

		var Context_Menu = Control.extend({

			// could have a title field.
			//'fields': {
			//	'title': String
			//},

            // Need to call the right events when the item gets chosen / clicked on.




			// maybe add before make would be better. add will probably be used more.
			'init': function(spec, add, make) {
				this._super(spec);

				this.__type_name = 'context_menu';

				this.set('dom.attributes.class', 'context menu');
				console.log('Context_Menu init spec.el', spec.el);

				// Then inside the menu we want a variety of menu nodes.



				// Need to deal with different construction stages better.
				//  Construct and render...
				//  For the moment will stick with whether there is an element given in the spec.

				// May be given the menu object, and need to create the menu nodes from that.

				//if (!spec.abstract && !spec.el) {
				if (!spec.abstract) {
					// the bar at the top.

					// It's going to act as a drag handle for this.
					//  The drag system will integrate with various bands / window positions.

					// Maybe a property to say that it's dockable.
					

					//var top_bar = new Control({
					//	'context': this._context
					//})
					//top_bar.set('dom.attributes.class', 'title bar');
					//this.add(top_bar);

					// 

					var obj = spec.value;

					console.log('menu obj', obj);

					// Create the menu nodes from it.
					var that = this;

					var tobj = tof(obj);
					console.log('tobj', tobj);
					if (tobj == 'object') {
						each(obj, function(v, key) {
							var menu_node = make(Menu_Node({
								'text': key,
								'value': v,
								'menu': that
							}))
							that.add(menu_node);

						})

					}
					if (tobj == 'array') {
						each(obj, function(v, index) {

							var tv = tof(v);
							console.log('tv', tv);

							// then if it's string and function...

							var vsig = jsgui.get_item_sig(v, 1);
							console.log('vsig', vsig);

							if (vsig == '[s,f]') {
								var text = v[0];
								var item_callback = v[1];

								var menu_node = make(Menu_Node({
									'text': text,
									'value': text,
									'menu': that
								}))
								that.add(menu_node);
							}


							/*
							var menu_node = make(Menu_Node({
								'text': key,
								'value': v,
								'menu': that
							}))
							that.add(menu_node);
							*/
							console.log('v', v);
						})
						//throw 'stop';

					}

                    console.log('end init Context_Menu', this);

                    console.log('this._.content._arr.length ' + this._.content._arr.length);


                    //throw 'stop';

                    // If we stop here, the menu seems to have the right number of nodes.
                    // However, when it gets added into the active document, it seems as though content of the context_menu gets duplicated
                    //  There is a sequence of events when it gets added to the document.
                    //   It correctly seems to add it to the DOM and render the initial content.
                    //   However, it then seems to duplicate the internal content.
                    //    It has got the same items listed more than once.
                    //    May be able to help track this down by making an error if you try to add an item that's already there.
                    //     Possibly would require maintaining a map of what the child elements are called.
                    //      That would be possible with the Collection system, where it gets their IDs as they are added.

                    // Maybe track the adding of content better with console logging?












					// then with the menu obj we construct the menu

					// Menu dealt with as objects or arrays?
					//  Possibly as it has more explicit ordering?
					//var exobj = [
					//	['File', ['Open', 'Close']]
					//]

					// Done with keys could be easier?
					//  Maybe arrays are clearer though.



					//throw 'stop';

					

					
				}

			},
			'activate': function() {

                console.log('pre super this._.content._arr.length ' + this._.content._arr.length);

                // So it seems the problem lies within the activate function.

				this._super();

                console.log('post super this._.content._arr.length ' + this._.content._arr.length);

                // If possible, this should be automatically activated when it's put into the document.
                //  But does that break something else?

				console.log('activate Context_Menu');

				// While it is open, clicking outside of the menu should close it.

				// Respond to clicking anywhere.
				//  If it's not a leaf node of the tree, will open further nested menu.

				//var ctrl_html_root = this._context.ctrl_document;
	        	var body = this._context.body();

	        	var that = this;

                // Listen for select events on the nodes.
                //  The menu has a publish/subscribe system for the menu nodes' events.

                // create event listeners on the nodes.
                //  need a way of getting all of the nodes.

                // heirichical iteration, like .ancestor
                // .find (like jquery)
                // .descendants
                // .desc

                var nodes = this.descendants('menu_node');

                console.log('nodes', nodes);










	        	// this.one_mousedown_anywhere

	        	






				// 

			},
			'close_all': function() {
				console.log('menu close_all');

				// need to do this recursively I think.
				//  could call this recursively on all nodes.

				this.get('content').each(function(i, v) {
					//console.log('i', i);
					//console.log('v', v);

					v.close_all();
				});


			}
		})



		//return Context_Menu;

        // but then it would need to be browserified in the client?

        module.exports = Context_Menu;
	//}
//);
},{"../../jsgui-html":73,"./menu-node":57}],47:[function(require,module,exports){
// object editor

/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../../jsgui-html-enh", "../viewer/array", "./factory"], 
	function(jsgui, Array_Viewer, factory) {
*/

var jsgui = require('../../../jsgui-html-enh');
var Array_Viewer = require('../viewer/array');
var factory = require('./factory');

		var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		
		var Array_Editor = Array_Viewer.extend({

			// Maybe should put this into a form, so that it does a form post.
			//  That could possibly be disabled.

			'init': function(spec) {
			    var make = this.make;
				this.factory = factory;
				this._super(spec);

				this.set('dom.attributes.class', 'array-editor');
				this.__type_name = 'array_editor';
				
				// when the object changes, we re-render.
				//  Not sure about re-rendering the whole thing though.

			},
			'refresh_internal': function() {
				this._super();

			}
		});
module.exports = Array_Editor;

		//return Array_Editor;
	//}
//);
},{"../../../jsgui-html-enh":71,"../viewer/array":62,"./factory":51}],48:[function(require,module,exports){
// object editor

/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../../../jsgui-html-enh", "../../viewer/basic/number"],
	function(jsgui, Number_Viewer) {
		*/

// This number editor will be used in different contexts.
// Would be nice to use in a properties editor.

// The properties editor could modify a data_object's fields.



var jsgui = require('../../../../jsgui-html-enh');
var Number_Viewer = require('../../viewer/basic/number');
var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;


// Could have arrows to adjust the numbers
//  Could also listen to the scroll wheel on the mouse.

var Up_Down_Arrow_Buttons = require('./up-down-arrow-buttons');



var Number_Editor = Number_Viewer.extend({

    // Maybe should put this into a form, so that it does a form post.
    //  That could possibly be disabled.


    'init': function(spec) {
        var make = this.make;


        this._super(spec);

        this.set('dom.attributes.class', 'number-editor');
        this.__type_name = 'number_editor';

        var udab = new Up_Down_Arrow_Buttons({
          'context': this._context
        });
        this.add(udab);

        this.set('up_down_arrow_buttons', udab);



        // let's just try adding the up and down arrow buttons.






        // Need to show the number, like with number viewer.

        // Number editor - can have up and down arrows.


        // Should have some up/down arrows for adjustment.
        //  Will be fairly simple, and use a specific internal control.

        // Up_Down_Arrow_Buttons
        //  will raise events, this control will listen to those events and adjust its value, raising events appropriately itself.
        //  eg change

        // Separate tests of the up/down arrow buttons?














        // when the object changes, we re-render.
        //  Not sure about re-rendering the whole thing though.

        // Then when it is selected, have it listen for keyboard events?
        //  Or have some larger / wider keyboard event listener that sends the events to this?

        // I think having this listen to the doc's keyboard events when it is selected makes sense.

        // Could have some events that respond to it being selected (and deselected).


        //this.set('dom.attributes.contenteditable', 'true');
        // Not so fast... not sure contenteditable is the way.



        // I think it should also look out for keyboard events (when activated).
        //  Only when it has the focus will it need to pay attention to these keyboard events.
        //   It could have some real-time validation that prevents invalid values.





    },
    'activate': function() {
        this._super();

        var udab = this.get('up_down_arrow_buttons');
        var that = this;

        // And when the value gets changed, we need to update it in the DOM.
        //  How automatic should that data binding be?

        // Need to be able to listen for the value change???
        //  With value automatically set to be a Data_Value, because it was set as a field?

        




        // Should be able to adjust the value of the number.

        // Getting and setting the 'value' of this numbered control is proving difficult.

        udab.on('up', function() {
          console.log('arrow button up');
          var val = that.get('value');
          console.log('val', val);

          //var v = that.value();
          //console.log('v', v);

          that.set('value', val + 1);

        });

        udab.on('down', function() {
          console.log('arrow button down');
          var val = that.get('value');
          console.log('val', val);

          //var v = that.value();
          //console.log('v', v);

          that.set('value', val - 1);

        });



    }
});
module.exports = Number_Editor;

		//return Number_Editor;
	//}
//);

},{"../../../../jsgui-html-enh":71,"../../viewer/basic/number":63,"./up-down-arrow-buttons":50}],49:[function(require,module,exports){
// object editor

/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../../../jsgui-html-enh", "../../viewer/basic/string"], 
	function(jsgui, String_Viewer) {
		*/
var jsgui = require('../../../../jsgui-html-enh');
var String_Viewer = require('../../viewer/basic/string');

var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var String_Editor = String_Viewer.extend({

    // Bit of a problem with this...
    //  Input does not work when it keeps the same size as the text.
    //  Input needs to be at least slightly bigger than the text.
    //  So, I'm thinking that a new version could be made,
    //   where it displays the text in a span, but there is a hidden input, with focus, being edited.

    // Another possibility is to use contenteditable, but to restrict what gets allowed (maybe not so easy)
    //  Could use blur keyup paste events
    //   have it replace anything in the HTML that's a tag / formatting with plain text.
    //  That seems like a decent way of doing it. Would then be able to expand the size of the contenteditable
    //   to the size of its content? I think that happens anyway...


    // Maybe should put this into a form, so that it does a form post.
    //  That could possibly be disabled.

    // I think persisting the values in the editor, and having them actually do something, like run a CMS,
    // will be very helpful.




    'init': function(spec) {
        var make = this.make;
        var that = this;


        this._super(spec);

        this.set('dom.attributes.class', 'string-editor');
        this.__type_name = 'string_editor';

        // not the control itself having editable content.
        //  Its text content subcontrol will have contenteditable.
        //  I'd prefer to have that done in the construction rather than activation.



        //this.set('dom.attributes.contenteditable', 'true');
        // This could superimpose a textarea?
        // Don't want the various formatting options here...
        //  Or could a contenteditable do the job if restrictions are put in place?
        //  Or the lower level method of showing a cursor, animating it, and processing the user's keyboard actions?
        //   Would want to make interchangable components.

        // Editable text (with various restrictions) seems like an important encapsulation.
        //  For these things, perhaps just a textarea would be best, or single line text for properties.

        // Contenteditable probably is not the right tool for this.
        //  Just putting a textarea in place would do the job.

        // I think superimposing one control over another would work for this.
        //  Absolutely positioned textbox, positioned over where the existing control is in the document.

        // ctrl.superimpose_over(ctrl_target);

        // this.edit

        // Once it is selected, a single click makes it editable.

        // So, will respond to the click event.
        var that = this;



        // This needs to use contenteditable.






        // Needs to have the object that it's going to view...
        //  Flexi - fields?

        // Need to be able to respond to POJO changes.

        // Perhaps by putting the object in a Data_Object we can better respond to object changes.
        //  I think we can use a surrounding div, with display inline.
        //   Some content of the object would not be displayed inline though.
        //   Possibly will want the code to be quite aware of lines.

        //var doObj = this.get('')

        // Calling this a 'change' event now.

        // Want a blur event handler.

        // That's really part of the activated code.




    },
    'refresh_internal': function() {
        this._super();


    },
    '_edit': function() {
        var input = this.get('input');
        if (!input) {

            // we can position it absolutely over the existing element...
            // or hide the existing one?
            // I think it would be easier as a child of existing element.
            //  first child.

            var content = this.get('content');
            // superimpose it over the span.

            var span = this.get('span');
            // position of the span compared to this.

            var el = this.get('dom.el');

            var span_bcr = span.get('dom.el').getBoundingClientRect();
            var this_bcr = el.getBoundingClientRect();

            console.log('span_bcr', span_bcr);
            console.log('this_bcr', this_bcr);

            var span_x_offset = span_bcr.left - this_bcr.left;
            var w = span_bcr.width;

            var value = this.get('value');

            // new Resizing_Input
            //  That type of resizing input control will be a bit specialised.
            //  Will automatically keep in sync with the text inside it.
            //  In this case, there is a corresponding SPAN, so the text size could be easier to measure.
            // Perhaps we can set up a Resizing_Input with a corresponding span.
            //  If it does not have one, it uses a hidden span or div to do its calculations.







            input = new jsgui.input({
                'context': this._context
            });
            input.set('dom.attributes.value', value);
            console.log('value', value);

            // could respond to input keydown?





            // That would be a convenient interface to get the current font size.
            //  It would maybe get it from an abstraction, or from the dom (maybe get computed style)
            var font_size = span.style('font-size');
            var font = span.style('font');
            console.log('font_size', font_size);


            input.style({
                'position': 'absolute',
                'margin-left': span_x_offset + 'px',
                'width': w + 'px',
                'outline': '0',
                //'background-color': 'transparent',
                'border': '0px solid',
                //'font-size': font_size
                'font': font
            });


            content.insert(input, 0);
            var iel = input.get('dom.el');
            var spanel = span.get('dom.el');

            iel.focus();

            var sync_size = function(e) {
                //console.log('input keydown');

                // Perhaps need to see what the letter is, and add it to the span, then measure it
                //  Want there to be space when the item is put into the span.
                console.log('e', e);

                // Keeping a comfort margin within the object?
                //  It may be possible to work out the new width first, with a different means of updating
                //  the span.

                // Fairly sure we'll need a better way.
                //  Is better to make sure there is enough space in the input before putting the extra character
                //  in place.

                // It may be better to suppress adding the text to the input, put it into the span,
                //  measure the span, size the input, then put the text in.
                // Don't want the input getting to much text inside it.

                /*



                setTimeout(function() {
                    var value = iel.value;

                    // Keydown seems to happen before the key is added...
                    // set the content of the span...
                    //span.set('content', value);

                    spanel.innerHTML = value;
                    //setTimeout(function() {
                        var w = spanel.offsetWidth;
                        input.style({
                            'width': w + 'px'
                        });
                    //}, 0);
                }, 0);

                */

                setTimeout(function() {
                    var scrollWidth = iel.scrollWidth;
                    console.log('scrollWidth', scrollWidth);

                    input.style({
                        'width': scrollWidth + 'px'
                    });
                }, 0);




            }

            //input.on('keydown', function(e_keydown) {
            //	sync_size(e_keydown);
            //});
            /*
            input.on('keyup', function(e_keydown) {
                sync_size();
            });

            */
            input.on('keypress', function(e_keydown) {
                sync_size();
            });
            // Then want to focus on the input and select all of its content.


            // Need accurate measuring of text width.
            //  I think we need a ResizingTextInput control here, want to encapsulate that tricky programming.






            //content.superimpose_over(span);
            // means set some properties.
            //  does not have to be in the same place...???
            //  may depend on measurements.



            console.log('has inserted input.');

            this.set('editing', true);
        }

    },
    'activate': function() {

        this._super();
        var that = this;
        //this.on('blur')

        // it's for blurring the span.
        //  want to listen to the span's blur event.

        var span = this.get('span');
        span.on('blur', function(e_blur) {
            console.log('e_blur', e_blur);

            // Then it will be time to update the text value property?
            //  I think the text value would likely be a Data_Object, which could be connected in such
            //  a way that it gets persisted.


        });
        //span.

        //var span = this.get('span');
        //console.log('span', span);
        //console.log('this._', this._);
        //span.set('dom.attributes.contenteditable', 'true');


        var selected_on_mousedown;

        this.on('mousedown', function(e_down) {
            console.log('mousedown');
            var span_selected = this.get('span.selected');
            console.log('md span_selected', span_selected);

            selected_on_mousedown = span_selected;
        })

        this.on('click', function(e_click) {
            // Event before the click has been processed by other automatic processors?
            //  Want to know if it became selected in the click.
            //  If it was already selected.

            // Could use mousedown perhaps.
            //  May be better to find out what happened as the click took place?

            // Or on mousedown we see if its selected or not?





            console.log('string editor click event');

            // Then if it is selected, and not in edit mode, put it into edit mode.

            //var mode = this.get('mode');
            var selected = that.get('selected');
            var editing = that.get('editing');

            console.log('selected', selected);
            console.log('editing', editing);

            if (selected &! editing) {
                console.log('selected and not editing');
            }

            // what about the content text being selected?

            var span_selected = this.get('span.selected');
            console.log('span_selected', span_selected);

            span.get('dom.el').setAttribute('contenteditable', true);

            //if (selected_on_mousedown &! editing) {
            //	console.log('was selected on mousedown, not currently editing');

            //	that.edit();
            //}

        });

        // Also want some code that prevents the single line content editable from having extra lines or html
        //  put in.

        // Will remove all line breaks...
        var elSpan = span.get('dom.el');
        span.on('keyup', function(e_keyup) {
            console.log('span keyup');

            // Adjust the span content to remove all line breaks (or other tags...)

            // I think looking for br elements and removing them will work...
            var cns = elSpan.childNodes;
            console.log('cns.length ' + cns.length);

            if (cns.length > 1) {
                // I think it should only be 1.

                /*
                each(cns, function(i, cn) {
                    //console.log('cn.tagName ' + cn.tagName);
                    //if (i > 0) {
                    //	elSpan.removeChild(cn);
                    //};
                    console.log('cn', cn);
                    console.log('cn.nodeType ' + cn.nodeType);

                    if (cn.nodeType == 3) {
                        // keep it...
                    } else {
                        // mark it for removal.
                        //  harder to do this in a loop, messes up the each.
                        //elSpan.removeChild(cn);
                    }
                });
                */

                for (var i = 0; i < cns.length; i++) {
                    var cn = cns[i];
                    if (cn.nodeType == 3) {
                        // keep it...
                    } else {
                        // mark it for removal.
                        //  harder to do this in a loop, messes up the each.
                        elSpan.removeChild(cn);
                        i--;
                    }
                }

                // Joining together any remaining text nodes may make sense. Not sure it is so important though.






                // But could join them back together again, rather than just removing it?

            }



        });

        // on activation, we can give this a new textinput.



    }
});
module.exports = String_Editor;

		//return String_Editor;
	//}
//);
},{"../../../../jsgui-html-enh":71,"../../viewer/basic/string":64}],50:[function(require,module,exports){
// object viewer
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

define(["../../../../jsgui-html-enh"],
	function(jsgui) {
*/

var jsgui = require('../../../../jsgui-html-enh');
var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;

var Button = require('../../button');


var Up_Down_Arrow_Buttons = Control.extend({

    // Maybe should put this into a form, so that it does a form post.
    //  That could possibly be disabled.


    'init': function(spec) {
        var make = this.make;


        this._super(spec);

        this.set('dom.attributes.class', 'up-down arrow buttons');
        this.__type_name = 'up_down_arrow_buttons';

        // Render up button and down button.

        var btn_up = new Button({
          'context': this._context,
          'text': 'up'
        });
        var btn_down = new Button({
          'context': this._context,
          'text': 'down'
        });

        this.add(btn_up);
        this.add(btn_down);

        this.set('btn_up', btn_up);
        this.set('btn_down', btn_down);


        var that = this;



    },
    'activate': function() {
        this._super();
        var that = this;
        //that.click(function(e) { that.action_select_only() })

        var btn_up = this.get('btn_up');
        var btn_down = this.get('btn_down');
        var that = this;

        btn_up.on('click', function(e_click) {
          console.log('btn_up click');
          that.raise('up');
        });

        btn_down.on('click', function(e_click) {
          console.log('btn_down click');
          that.raise('down');
        });


    }
});
module.exports = Up_Down_Arrow_Buttons;

},{"../../../../jsgui-html-enh":71,"../../button":45}],51:[function(require,module,exports){
// object viewer


//if (typeof define !== 'function') {
//    var define = require('amdefine')(module);
//};

//define(["require", "../../../jsgui-html-enh"/*, "./object", "./array", "./basic/string", "./basic/number" */],
//	function(require, jsgui /*, Object_Editor, Array_Editor, String_Editor, Number_Editor */) {

var jsgui = require('../../../jsgui-html-enh');
var Object_Editor = require('./object');
var Array_Editor = require('./array');
var String_Editor = require('./basic/string');
var Number_Editor = require('./basic/number');
		
		var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		var group = jsgui.group;

		// Need to side-load these various components.
		//  Would be nice to have easy sideload syntax.

		var map_modules = {};

		var that = this;

		var create = function(obj, context) {
			var tobj = tof(obj);
			//console.log('tobj ' + tobj);
			if (tobj == 'object') {
				var Object_Editor = require('./object');
				var res = new Object_Editor({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'array') {
				var Array_Editor = require('./array');
				var res = new Array_Editor({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'string') {
				var String_Editor = require('./basic/string');
				var res = new String_Editor({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'number') {
				var Number_Editor = require('./basic/number');
				var res = new Number_Editor({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'data_value') {
				var val = obj.value();
				var tval = tof(val);

				if (tval == 'string') {
					var String_Editor = require('./basic/string');
					var res = new String_Editor({
						'context': context,
						'value': obj
					})
				}

				if (tval == 'array') {
					var Array_Editor = require('./basic/number');
					var res = new Array_Editor({
						'context': context,
						'value': obj
					})
				}
				
				return res;
			}
		}
module.exports = create;
		


//		return create;
//	}
//);
},{"../../../jsgui-html-enh":71,"./array":47,"./basic/number":48,"./basic/string":49,"./object":53}],52:[function(require,module,exports){
// Maybe just call it KVP editor.
//  The object editor will use it, but so will some other things.




// object editor

/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../../jsgui-html-enh", "../viewer/object-kvp", "./factory", "./basic/string"],
	function(jsgui, Object_KVP_Viewer, factory, String_Editor) {
*/

var jsgui = require('../../../jsgui-html-enh');
var Object_KVP_Viewer = require('../viewer/object-kvp');
var factory = require('./factory');
var String_Editor = require('./basic/string');
var Number_Editor = require('./basic/number');
var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

// A way of telling this to do a component replace?
//  So that it uses the editor components instead of the viewer ones.

// Class substitutions may be a useful thing, so it chooses the correct class to use.
//  So, it could load with various references, and those references could be changed by using substitutions
//   before the module is initialized.
//  So, it would set values in the control's prototype.
//   Running a control could be done in different ways depending on what 'mode' or particular subclass is used.

// This could be more flexible in appearance so it can be used both for a JSON editor and a property editor.
//  Also good to have it so it



var Object_KVP_Editor = Object_KVP_Viewer.extend({
    'init': function(spec) {
        this.factory = factory;
        this.String = String_Editor;
        this.Number = Number_Editor;
        this._super(spec);

        this.set('dom.attributes.class', 'object-kvp-editor');
        // but keep the mode class somehow?
        // Or need to add it back again...?

        // Perhaps there could be a post_init stage where things like that can be done.

        // IE the superclass carries things out after a subclass has made its changes.
        //  The superclass's post init will be after all inits have finished.

        this.add_class(this.get('mode'));





        this.__type_name = 'object_kvp_editor';

    },
    'refresh_internal': function() {
        // Instead of having viewer components, this needs to have editor components.

        this._super();

    },
    'activate': function() {
      this._super();
    }
})
module.exports = Object_KVP_Editor;

		//return Object_KVP_Editor;
	//}
//);

},{"../../../jsgui-html-enh":71,"../viewer/object-kvp":66,"./basic/number":48,"./basic/string":49,"./factory":51}],53:[function(require,module,exports){
// object editor

/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../../jsgui-html-enh", "../viewer/object", "./object-kvp", "./factory"], 
	function(jsgui, Object_Viewer, Object_KVP_Editor, factory) {
*/

var jsgui = require('../../../jsgui-html-enh');
var Object_Viewer = require('../viewer/object');
var Object_KVP_Editor = require('./object-kvp');
var factory = require('./factory');

		var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;
		
		var Object_Editor = Object_Viewer.extend({

			// Maybe should put this into a form, so that it does a form post.
			//  That could possibly be disabled.

			'init': function(spec) {
			    var make = this.make;
				
				this.factory = factory;
				this.Object_KVP = Object_KVP_Editor;

				this._super(spec);


				this.set('dom.attributes.class', 'object-editor');
				this.__type_name = 'object_editor';
				
			},
			'refresh_internal': function() {
				this._super();


			}
		});
module.exports = Object_Editor;

		//return Object_Editor;
	//}
//);
},{"../../../jsgui-html-enh":71,"../viewer/object":67,"./factory":51,"./object-kvp":52}],54:[function(require,module,exports){
// object viewer

/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

// html-enh depending on Context_Menu?



define(["../../jsgui-html", "./menu-node"],
	function(jsgui, Menu_Node) {

*/
var jsgui = require('../../jsgui-html');
var Menu_Node = require('./menu-node');

		var stringify = jsgui.stringify, each = jsgui.eac, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		var group = jsgui.group;

		var Horizontal_Menu = Control.extend({

			// could have a title field.
			//'fields': {
			//	'title': String
			//},


			// maybe add before make would be better. add will probably be used more.
			'init': function(spec, add, make) {
				this._super(spec);

				this.__type_name = 'horizontal_menu';

				this.set('dom.attributes.class', 'horizontal menu');
				//console.log('spec.el', spec.el);

				// Then inside the menu we want a variety of menu nodes.



				// Need to deal with different construction stages better.
				//  Construct and render...
				//  For the moment will stick with whether there is an element given in the spec.

				// May be given the menu object, and need to create the menu nodes from that.

				if (!spec.abstract && !spec.el) {
					// the bar at the top.

					// It's going to act as a drag handle for this.
					//  The drag system will integrate with various bands / window positions.

					// Maybe a property to say that it's dockable.


					//var top_bar = new Control({
					//	'context': this._context
					//})
					//top_bar.set('dom.attributes.class', 'title bar');
					//this.add(top_bar);

					//

					var obj = spec.value;

					//console.log('menu obj', obj);

					// Create the menu nodes from it.
					var that = this;

					var tobj = tof(obj);
					if (tobj == 'object') {
						each(obj, function(v, key) {
							var menu_node = make(Menu_Node({
								'text': key,
								'value': v,
								'menu': that
							}))
							that.add(menu_node);

						})

					}

					// then with the menu obj we construct the menu

					// Menu dealt with as objects or arrays?
					//  Possibly as it has more explicit ordering?
					//var exobj = [
					//	['File', ['Open', 'Close']]
					//]

					// Done with keys could be easier?
					//  Maybe arrays are clearer though.



					//throw 'stop';




				}

			},
			'activate': function() {
				// May need to register Flexiboard in some way on the client.

				if (!this.__active) {
					this._super();

					//console.log('activate Horizontal_Menu');

					// While it is open, clicking outside of the menu should close it.

					// Something for opening the menu.
					//  Need to respond to a click on a (root) node.

					// Want a quick way to get all controls of a certain type inside.
					//  eg this.find(':horizontal_menu')
					//  this.children(':horizontal_menu')

					// this.matches_selector(':horizontal_menu');

					// Needs to have various states
					//  Different parts of it can be open, closed.


					// On click, want to see if any of the nodes are open.
					//  I think being able to do some kind of selector / query that gets a group of controls would be very helpful here.

					// this.children(':menu_node[open]')
					//  Some kind of notation like that to find any open menu nodes.

					// The menu items should have 'state' properties

					this.get('content').each(function(i, v) {
						//console.log('i', i);
						//console.log('v', v);

						//v.close_all();

						var v_state = v.get('state');
						//console.log('v_state', v_state);

						// Undefined state?


						// respond to a click on any of these.

						v.on('click', function(e_click) {
							//console.log('menu item clicked');

							v.open();

							// And mousedown anywhere (else) to close.

							v.one_mousedown_anywhere(function(e_mousedown) {
								//console.log('e_mousedown.within_this ' + e_mousedown.within_this);

								if (!e_mousedown.within_this) {
									v.close();
								}
							});

						})
					});
				}






				//  could find controls with classes and tag names using css queries.






				//

			},
			'close_all': function() {
				console.log('menu close_all');

				// need to do this recursively I think.
				//  could call this recursively on all nodes.

				this.get('content').each(function(i, v) {
					//console.log('i', i);
					//console.log('v', v);

					v.close_all();
				});


			}
		})

module.exports = Horizontal_Menu;

/*
		return Horizontal_Menu;
	}
);
    */

},{"../../jsgui-html":73,"./menu-node":57}],55:[function(require,module,exports){
/**
 * Created by James on 04/08/2014.
 */


/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../jsgui-html"],
function(jsgui) {
*/
var jsgui = require('../../jsgui-html');

    var stringify = jsgui.stringify, mapify = jsgui.mapify, each = jsgui.each, tof = jsgui.tof;
    var Control = jsgui.Control;
    var Collection = jsgui.Collection;
    var Data_Object = jsgui.Data_Object;

    var Item = Control.extend({

        // Items collection as a field?
        //  This would have control content items.
        //  It would / may also have a Collection of items.
        //  It would get given its items as JSON / a JS object / array, and then would create the content Controls.

        // Want it to be easy to create a list, give it the data or the data source.

        /*
         'fields': [
         //['text', String]
         ['toggle_button', Control],
         ['inner_control', Control],
         ['expander', Control]

         ],
         */


        // Also want it to be easy to include images, by key.
        //  Item could make use of an Image control.
        //  Image will enable the presentation at different sizes.
        //   Thumbnail will extend Image.

        // Both of them will refer to the Website Image Resource.
        //  Client side, they will act differently.
        //  Should be possible to download a different image, but maybe will require a client-side image index.
        // Will do more work on accessing server resources from the client in a convenient way.








        'init': function(spec, add, make) {
            this._super(spec);
            this.__type_name = 'item';
            this.set('dom.attributes.class', 'item');

            // Would have a Value.
            //  I think that should be a Data_Object.

            // I think one pattern of the Item will be as follows:
            //  Create Item, give JSON data.
            //  Listen for a change in the item.
            //   UI change, item event called, new data provided / available.
            // Item would create an automatic Model (I think).

            // -----
            // Item could be presented with a data source that has a change event.
            //  Item listens to the change event, and changes with it.

            // With a few fairly versitile classes:
            // Data_Object, Collection, Data_Value
            //  and
            // List, Item
            // We will be able to represent a wide variety of data, and have it editable within an MVC system.




            // Anyway, just want to display some data for the moment.
            // Or is spec.value a function

            console.log('spec.value', spec.value);
            console.log('t spec.value', tof(spec.value));


            //var value = new Data_Object({});

            // Defining a Data_Object, using another Data_Object as the paraneter...
            //  Need to do some more work on this.


            // A Data_Object with another Data_Object as its constructor.
            //  Clone makes the most sense. Construct by value.

            var value = new Data_Object(spec.value);

            this.set('value', value);

            // Set Data_Object using another Data_Object?
            //  I think it should copy that Data_Object's various values.
            //  Clone it's ._ if possible.
            //   Except there could be more Data_Objects and Collections there.
            //    Possibly need to add .clone code to Data_Object and Collection.






            //console.log('spec.items', spec.items);
            //throw 'stop';

            //if (spec.value) {
            //    value.set(spec.value);
            //}

            // And we need to render the value.

            console.log('value', value);

            var value_keys = value.keys();
            console.log('value_keys', value_keys);

            // id and key seem important.
            //  Then could show the others.
            //  could prioritise name


            var map_keys = mapify(value_keys);
            console.log('map_keys', map_keys);

            // Make the main part out of the name, the key, and the id.
            //  could then show some other items too, possibly type_name
            // This needs to make some sensible judgements about how to display an item.
            // I want it to have sensible defaults for displaying records, such as customer records
            //  Also want it to be easy to customise too.

            // The item will have a title row

            // I think just making the title row, then a small table of the rest would be best.

            // It's hard to make intelligent 1 size fits all rules that are also somewhat predictable.




            // Then secondary items
            // Then tertiary items
            //  Perhaps tertiary items will be hidden by default?

            // It could automatically recognise some as being of secondary importance
            //  Perhaps it would say the mime_type property is in that category.
            //   Maybe age, DOB, address/address lines.

            // Really, though, how things display depends on context.
            //  If there was a customer_id field, that would be of primary importance in the customer table.
            //   But in other tables? Maybe it would be of primary importance too.




            // id, key = primary title
            //

            // id, name or key
            //  other pieces of data

            // displaying things in a table could be OK

            // could have a simple way of saying what's displayed

            // also could choose how it's displayed.
            //  will have different, but relatively simple layouts.

            // Item Title Bar / Primary IDs

            // Supplementary item data

            var has_id = map_keys['id'];
            var has_name = map_keys['name'];
            var has_key = map_keys['key'];

            var id, name, key;

            var ctrl_primary = new Control({
                'context': this._context
            })

            this.add(ctrl_primary);

            if (has_id && has_key && !has_name) {
                id = value.get('id');
                key = value.get('key');

                console.log('id', id);
                console.log('key', key);

                var ctrl_id = new Control({
                    'context': this._context
                });
                ctrl_id.set('dom.attributes.class', 'id');
                var ctrl_key = new Control({
                    'context': this._context
                });
                ctrl_key.set('dom.attributes.class', 'key');

                // Will possibly have more code to do with rendering Data_Values as HTML, as Control content.

                ctrl_id.add(id.value());
                ctrl_key.add(key.value());

                ctrl_primary.add(ctrl_id);
                ctrl_primary.add(ctrl_key);

            }

            var ctrl_secondary = new Control({
                'context': this._context
            })






            /*

            if (map_keys.name && map_keys.key) {

            } else {
                if (map_keys.key) {


                } else if (map_keys.name) {

                } else {

                }
            }
            */






            //throw 'stop';


            //if (!this._abstract && !spec.el) {
            //}
        },

        'activate': function() {
            this._super();
        }
    });
    //return Item;
module.exports = Item;

    //return jsgui;


//});
},{"../../jsgui-html":73}],56:[function(require,module,exports){
/*
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define(["../../jsgui-html", "./item"],
    function(jsgui, Item) {
*/

var jsgui = require('../../jsgui-html');
var Item = require('./item');

        var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof;
        var Control = jsgui.Control;
        var Collection = jsgui.Collection;

        // will have a context menu by default

        var List = Control.extend({

            // Items collection as a field?
            //  This would have control content items.
            //  It would / may also have a Collection of items.
            //  It would get given its items as JSON / a JS object / array, and then would create the content Controls.

            // Want it to be easy to create a list, give it the data or the data source.

            /*
            'fields': [
                //['text', String]
                ['toggle_button', Control],
                ['inner_control', Control],
                ['expander', Control]

            ],
            */

            'init': function(spec, add, make) {
                // Wont fields have been set?


                console.log('init list');

                this._super(spec);

                var that = this;

                // Can take an image
                // Can take some text.
                //  That's all I'll have in the tree node for now.
                this.__type_name = 'list';

                this.set('dom.attributes.class', 'list');

                // a Collection of items.

                // Collection not needing a Context?
                //  Having all Data_Objects and Collections require a context seems too much.
                //  Context seems important in the case of Controls.
                var coll_items = new Collection();
                this.set('items', coll_items);

                console.log('spec.items', spec.items);
                //throw 'stop';

                if (spec.items) {
                    coll_items.set(spec.items);
                }

                // The list spec could also take info about how to display the items.

                // And create a new item control for each item.
                //  I think an 'item' control could be quite useful. Shows some data.
                //   Won't be too big, but will be flexible in what it can do.

                // Will take some JSON, and render it using sensible defaults.
                //  Eg name first and in bold.
                //  Maybe key
                //

                // A general purpose item control will be quite useful.
                //  Item will be fairly general purpose, and much of the purpose of using it is to show intent rather than because of
                //  an 'item' doing particular things. It just is. It will be like a control, except it's generally used for rendering some particular data.
                // Want the Item and the List to be convenient UI components. They need to make it simple to represent some data.
                //  Items and Lists could potentially use templates to quickly render data.



                coll_items.each(function(i, item) {
                    console.log('item', item);

                    var ctrl_item = new Item({
                        'context': that._context,
                        'value': item
                    })

                    that.add(ctrl_item);


                })

                // Now that item has been made into a Data_Object.
                //  That means it has more MVC capabilities.
                //  Hopefully that automatic transformation will be useful.

                //throw 'stop';







                if (!this._abstract && !spec.el) {


                }
            },

            'activate': function() {
                this._super();

                // put the context menu in place.

                //throw 'stop';


                this.context_menu({
                    'Delete': function() {
                        console.log('context_menu Delete');

                        // need to actually delete it if possible?

                    },
                    'Edit': function() {
                        console.log('context_menu Edit');

                        // need to actually delete it if possible?


                    }
                })


            }
        });


module.exports = List;
        //return List;

        //return jsgui;


    //});
},{"../../jsgui-html":73,"./item":55}],57:[function(require,module,exports){

//if (typeof define !== 'function') { var define = require('amdefine')(module) }

//define(["../../jsgui-html"],
	//function(jsgui) {

        var jsgui = require('../../jsgui-html');

        //console.log('jsgui', jsgui);
        //throw 'stop';

		var stringify = jsgui.stringify, each = jsgui.eac, tof = jsgui.tof;
		var Control = jsgui.Control;


		// Extending, with field values being set?
		//  Setting field values in definitions may be a useful thing.

		// A container type that has got content added to a different place to the root node.
		//  Content gets added in a specific content part.
		//  Could be done by overriding the add function?
		//  Will have a specific field where the content gets added.


		var Menu_Node = Control.extend({
			// fields... text, value, type?
			//  type could specify some kind of validation, or also 'password'.

			// single field?

			// Actually having a different content?
			//  Or use inner_content.

			// Menu node having expanded and contracted states.

			// Menu Node has an image and some text, and a contrainer control for othe Menu nodes.
			//  Can be collapsed so that the internal items don't show




			//'fields': [
				//['text', String]


			//],

			//'fields': {
			//	'img_src': 'string',
			//	'text': 'string'
			//},

			//  and can have other fields possibly.


			'init': function(spec, add, make) {
				// Wont fields have been set?

				this._super(spec);

				// Can take an image
				// Can take some text.
				//  That's all I'll have in the Menu node for now.
				this.__type_name = 'menu_node';
				var that = this;


				if (!this._abstract) {

					if (!spec.el) {
						this.set('dom.attributes.class', 'menu-node');


						var spec_state = spec.state, state;

						var main_control = make(Control({ 'class': 'main' }));
						this.add(main_control);
						//console.log('**** spec.img_src', spec.img_src);
						if (spec.img_src) {
							//this.set('img_src', spec.img_src);

							var img_src = this.get('img_src');
							//console.log('img_src', img_src);
							//console.log('this._', this._);
							//throw '1) stop;'
						}
						if (spec.text) {
							this.set('text', spec.text);

							var span = make(jsgui.span({}));

							//var text = this.get('text');
							//console.log('text', text);
							//console.log('tof text', tof(text));

							span.add(spec.text);
							main_control.add(span);
						}
						var menu = spec.menu;
						if (menu) {
							this.set('menu', menu);
						}

						// then there mey be menu items inside these
						//  they will only appear when the menu is opened.
						//  will normally open the menu with a click
						//   or hover in submenu.



						var inner_control = make(Control({ 'class': 'inner hidden' }));
						this.add(inner_control);

						// Inner may not just be the title.

						this.set('inner_control', inner_control);

						//inner_control.hide();

						//var inner_control_content = inner_control.get('content');
						// reference to a menu control.
						// maybe take 'value' here
						if (spec.value) {
							// depending on the type of obj, work differently.
							//  array of strings, just make those menu items.

							var obj_menu = spec.value;
							var t_obj_menu = tof(obj_menu);
							console.log('t_obj_menu', t_obj_menu);

							if (t_obj_menu == 'array') {
								each(obj_menu, function(v) {
									// make a new menu node with that as the value?

									var tv = tof(v);
									if (tv == 'string') {
										// new node with text, no inner nodes.

										var nested_menu_node = make(Menu_Node({
											'text': v,
											'menu': menu
										}));
										inner_control.add(nested_menu_node);

									}

								})
							}

						}

						var ctrl_fields = {
							'inner_control': inner_control._id(),
							'main_control': main_control._id(),
							'menu': spec.menu._id()
						}



						// use different quotes...

						this.set('dom.attributes.data-jsgui-ctrl-fields', stringify(ctrl_fields).replace(/"/g, "'"));

						if (spec_state) {

							// open and closed
							if (spec_state == 'open' || spec_state == 'closed') {
								state = this.set('state', spec_state);
							} else {
								throw 'spec.state expects "open" or "closed".';
							}
						} else {
							state = this.set('state', 'open');
						}
					}
				}



			},
			'activate': function() {

        if (!this.__active) {
          this._super();

  				var inner_control = this.get('inner_control');
  				var main_control = this.get('main_control');
  				var menu = this.get('menu');

  				var that = this;

  				// raise a select event on the menu.
  				// and if there are other nodes inside,

  				// Upon activation, we may not have the body node though.
  				//  Perhaps delay this?
  				// May be good to have the context get the body control earlier, with the body control specifically made & activated earlier on.


  				// Can't have each node check for a mousedown anywhere.
  				//  Better to have the context menu itself do the checking.


  				setTimeout(function() {

  					/*
  					that.one_mousedown_anywhere(function(e_mousedown) {
  		        		console.log('omda', e_mousedown);

  		        		var within_this = e_mousedown.within_this;
  		        		console.log('within_this', within_this);

  		        		if (within_this) {
  		        			// Would be nice to have a target_control as part of the mouse event.


  		        		} else {
  		        			//that.close_all();
  		        			that.remove();
  		        		}


  		        	});
  					*/
  				}, 0);









  				/*

  				main_control.on('click', function(e_click) {
  					console.log('inner_control', inner_control);

  					var icc = inner_control.get('content');


  					var iccl = icc.length();

  					if (iccl > 0) {
  						// Maybe not, if it's nested.
  						//  Could close other branches.
  						menu.close_all();


  						inner_control.show();
  					} else {
  						console.log('inner leaf node clicked');

  						// means we close all open nodes, and register item as being selected.

  						// raise a selected or item-selected? event.

  						// or change event? prob not.

  						// raise select event.
  						menu.close_all();
  						menu.raise('select', that);

  					}

  				})
  				*/

  				// then when the main part is clicked, show the inner control.
        }





			},
			'close_all': function() {
				console.log('menu-node close_all');

				// need to do this recursively I think.
				//  could call this recursively on all nodes.

				//

				var inner_control = this.get('inner_control');

				inner_control.get('content').each(function(i, v) {
					console.log('i', i);
					console.log('v', v);



					var tn = v.__type_name;
					console.log('tn', tn);

					if (tn == 'menu_node') {
						v.close_all();
					}



					//v.close_all();
				});

				inner_control.hide();
				this.set('state', 'closed');


			},
			'close': function() {
				var inner_control = this.get('inner_control');
				inner_control.hide();
				this.set('state', 'closed');
			},
			'open': function() {
				var inner_control = this.get('inner_control');
				inner_control.show();
				this.set('state', 'open');
			}


		});
		//return Menu_Node;
        module.exports = Menu_Node;

//});

},{"../../jsgui-html":73}],58:[function(require,module,exports){
/**
 * Created by James on 03/08/2014.
 */
/*

if (typeof define !== 'function') { var define = require('amdefine')(module) }


// Also want to make an MDI window system (Multiple Document Interface)

define(["../../jsgui-html", "./panel"],
    function(jsgui, Panel) {
*/

var jsgui = require('../../jsgui-html');
var Panel = require('./panel');

var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;

// Extensions of inner frames within inner frames...
//  The relative frame container, which has an inner frame. Then if something extends that, it would be good for that
//  to have an inner_control of its own and seamlessly expose that one while using the one above that.

// Relate the inner_control more to that level of the control heirachy.
//	Then make it so that they are navigable in sequence.
//  Not for the moment though.
//  I'll just have the Window control contain a relative div.

//var Relative_Frame = Control.

var Multi_Layout_Mode = Control.extend({

    // could have a title field.
    //'fields': {
    //	'title': String
    //},

    'fields': {
        'layout_mode': String
    },


    // maybe add before make would be better. add will probably be used more.
    'init': function(spec) {
        this._super(spec);

        // Don't register controls on the server?


        // May be having probs with make
        var make = this._context.make;

        var context = this._context;

        this.__type_name = 'multi_layout_mode';

        this.set('dom.attributes.class', 'multi-layout-mode');
        //console.log('spec.el', spec.el);

        // Basically, needs the:
        //  Navigation
        //  Content
        //  Metadata and Commands

        // Will make it easy to switch between and to use various different layout views.
        //  There will be controls built using this, that would have various different navigation, content, and metadata+commands controls inside them
        //   Will be nice to have encapsulation of these different things.

        // Will be making a Website Images Admin Control first.
        //  Will view list / tree of images on the left
        //  Will view the image itself on the right
        //  The metadata and commands will appear in a fairly small ribbon at the bottom.

        if (!spec.abstract && !spec.el) {

            // Will have different ways of putting this together.
            //  Will be nice to have a title, but inside a header.
            var layout_mode = this.get('layout_mode').value();

            if (layout_mode) {
                this.add_class(layout_mode);
            }

            //console.log('layout_mode', layout_mode);
            //console.log('tof layout_mode', tof(layout_mode));
            //  And the main content in the fluid area...
            //   That could be a useful default of fluid-fixed.

            var panel_title = new Panel({
                'context': context,
                'name': 'title'
            })
            panel_title.add_class('title');

            var panel_navigation = new Panel({
                'context': context,
                'name': 'navigation'
            })
            panel_navigation.add_class('navigation');

            var panel_main = new Panel({
                'context': context,
                'name': 'main'
            })
            panel_main.add_class('main');

            var panel_misc = new Panel({
                'context': context,
                'name': 'misc'
            })
            panel_misc.add_class('misc');

            if (layout_mode == 'fluid-fixed') {
                // make the html like in
                //  http://www.dynamicdrive.com/style/layouts/item/css-liquid-layout-22-fluid-fixed/

                // top
                // left_wrapper
                //  left
                // right
                // bottom
                /*
                var panel_top = new Panel({
                    'context': context,
                    'name': 'top'
                })
                panel_top.add_class('top');
                */

                var panel_top = new Panel({
                    'context': context,
                    'name': 'top'
                })
                panel_top.add_class('top');

                var panel_left_wrapper = new Panel({
                    'context': context,
                    'name': 'left-wrapper'
                })
                panel_left_wrapper.add_class('left-wrapper');

                var panel_left = new Panel({
                    'context': context,
                    'name': 'left'
                })
                panel_left.add_class('left');

                var panel_right = new Panel({
                    'context': context,
                    'name': 'right'
                })
                panel_right.add_class('right');

                var panel_bottom = new Panel({
                    'context': context,
                    'name': 'bottom'
                })
                panel_bottom.add_class('bottom');
                // will expose, top, left, right, bottom


                this.add(panel_top);
                this.add(panel_left_wrapper);
                panel_left_wrapper.add(panel_left);
                this.add(panel_right);
                this.add(panel_bottom);

                panel_top.add(panel_title);
                panel_bottom.add(panel_navigation);
                panel_left.add(panel_main);
                panel_right.add(panel_misc);



            } else {


                this.add(panel_title);
                this.add(panel_navigation);
                this.add(panel_main);
                this.add(panel_misc);


            }

            this.set('title', panel_title);
            this.set('navigation', panel_navigation);
            this.set('main', panel_main);
            this.set('misc', panel_misc);


            // 2-col-left-main-right-misc
            //
            // 2-col-left-main
            //  misc on right
            //  (navigation)
            // fluid-fixed
            //  could have fixed-fluid as well
            // top, bottom, left, right
            //  and will position the various logic parts within those layout parts.

            // top     title
            // left    main
            // right   misc/tools
            // bottom  (nav) - don't think we will have nav in this view

            // So choose the layout view, then assign items in the logical view to the areas of the layout
            //  Automatic assignment of both the layout view and the logical view
            //  layout_mode fluid-fixed, {}
            /*
            // I think a string layout mode makes sense.
            not like: layout_mode: {
                'left': fluid
            }
            // The string layout mode will specify which construction code to use.
            //  May be nice with je suis xml.
            // After the string layout mode, the logical items get placed into the layout areas.

            // layout_mode: 'fluid-fixed'
            // layout_locations: {
                'left': 'main',
                'right':
            }
             */
            // layout_mode:
            //
            //   I think navigation may be built into the main part as well as the part on the right.
            // 2-col-right-main

            // Set this up so that there are different components / controls that can be positioned in different ways.
            // Changing the positioning layout will be done through the Multi_Layout_Control.

            // In general, there are 3 types of areas:
            //  navigation, content, misc
            //  can't call it content for the moment though.
            //   content is the collection.
            //   call it view? but then it's not edit
            //   main?
            //    main seems best.

            // Some will get hidden / shown / shrunk / expanded at different times.

            // Basically want this Control to have three subcontrols.
            //  They will either get put within frames, or will have extensive functionality in this control to rearrange them

            // These 3 controls could be a normal control or a Panel control.
            //  Panel could have more docking functionality
            //  Code to help with layout, splitting a panel and assigning some of it to another panel.

            // Panels could also have resize capabilities
            //  I think the Panel abstraction would be a useful one to make.
            // Control is only really supposed to have HTML stuff and the foundation for more functionality.
            // Panel would be implementing something more particular, so I think it's best to keep this functionality out of Control.

            // Panel could wind up being quite useful and versitile.
            //  Keeping Panel code in a Panel module would help to prevent the Control file becoming more complicated.

            // Want to be able to use panels to specify layouts using numbers, outside of CSS.
            //  Will do some maths.

            // Would like a way of disabling some of these?
            //  Or would navigation panel be useful in many cases, and just disable / hide the panel when it's not needed.


            // For the moment, just want 4 simple panels. (01/10/2014 adding a 'title' panel)


            // Having control fields here could be useful.
            /*
            var ctrl_fields = {
                'title': panel_title._id(),
                'navigation': panel_navigation._id(),
                'main': panel_main._id(),
                'misc': panel_misc._id()
            };
            */

            // Perhaps should make 3 different control classes.
            //  Panel controls would be a bit limited in what they do / are for, and what UI components they include.
            //  Navigation_Panel
            //   Shows list of items, search, filter
            //  Content_Panel
            //   The content, should be nothing else
            //  Misc_Panel
            //   Metadata about the

        }

    },
    'activate': function() {
        // May need to register Flexiboard in some way on the client.
        this._super();

        // Will need to be able to rearrange the layout.




    }


    //,
    // Takes on the menu of the maximized window (for the moment).
    //  Could have its own menu possibly
    //'menu': function(menu_spec) {


    //}
})
module.exports = Multi_Layout_Mode;


/*
        return Multi_Layout_Mode;
    }
);
    */

},{"../../jsgui-html":73,"./panel":59}],59:[function(require,module,exports){
/**
 * Created by James on 04/08/2014.
 */

/*

if (typeof define !== 'function') { var define = require('amdefine')(module) }


// Also want to make an MDI window system (Multiple Document Interface)

define(["../../jsgui-html", "./horizontal-menu"],
    function(jsgui, Horizontal_Menu) {
*/

var jsgui = require('../../jsgui-html');
//var Horizontal_Menu = require('./horizontal-menu');

var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;

// Titled_Panel would be useful.
//  Would extend the panel, and also show it's name or title.

// Want to keep panel simple. Could have Titled_Panel, maybe Resizable_Panel.
//  If we want a panel with a lot of functionality, it would be the Flexi_Panel.






var Panel = Control.extend({
    // panel name?

    // could have a title field.
    'fields': {
        'name': String
    },

    // maybe add before make would be better. add will probably be used more.
    'init': function(spec, add, make) {
        this._super(spec);

        this.__type_name = 'panel';

        this.set('dom.attributes.class', 'panel');
        //console.log('spec.el', spec.el);

        if (!spec.abstract && !spec.el) {


            /*
            var ctrl_fields = {
                'ctrl_relative': div_relative._id(),
                'title_bar': title_bar._id()
            }


            this.set('dom.attributes.data-jsgui-ctrl-fields', stringify(ctrl_fields).replace(/"/g, "'"));
            */


        }

    },
    //'resizable': function() {
    //},
    'activate': function() {
        // May need to register Flexiboard in some way on the client.
        this._super();

        //

    }
})

module.exports = Panel;
/*
        return Panel;
    }
);
    */
},{"../../jsgui-html":73}],60:[function(require,module,exports){
var jsgui = require('../../jsgui-html');
var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof;
var Control = jsgui.Control;

// Extending, with field values being set?
//  Setting field values in definitions may be a useful thing.
var Title_Bar = Control.extend({
    // fields... text, value, type?
    //  type could specify some kind of validation, or also 'password'.
    // single field?
    'fields': [
        ['text', String]
    ],
    //  and can have other fields possibly.
    'init': function(spec) {
        this._super(spec);
        this.set('dom.attributes.class', 'title bar');
        var span = new jsgui.span({
            'context': this._context
        })
        span.add(this.get('text').value());
        //ctrl_title_bar.set('dom.attributes.class', 'titlebar');
        this.add(span);
    }
});
module.exports = Title_Bar;
},{"../../jsgui-html":73}],61:[function(require,module,exports){
var jsgui = require('../../jsgui-html');
//var Horizontal_Menu = require('./horizontal-menu');

var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var Panel = require('./panel');

// Panel with a titlebar inside

var Title_Bar = require('./title-bar');

var Titled_Panel = Panel.extend({
    'fields': {
        'title': String
    },

    'init': function(spec) {
        this._super(spec);
        this.__type_name = 'titled_panel';

        // And in composition, we add the title bar.

        if (!spec.abstract && !spec.el) {
            var title_bar = new Title_Bar({
                'context': this._context,
                'text': this.get('title')
            });
            title_bar.active();
            this.add(title_bar);


            // Then an inner content control.
            var inner_control = new Control({
                'context': this._context
            });
            inner_control.active();
            this.add(inner_control);

            // Then want to set the jsgui control fields so that it knows what these are on the client-side too.
            //  Will change this so it's got better syntax.
            //  But for the moment want to use the pattern as it is, and better spot how to cover the cases.

            this.set('dom.attributes.data-jsgui-ctrl-fields', stringify({
                'title_bar': title_bar._id(),
                'inner_control': inner_control._id()
            }).replace(/"/g, "'"));







            // And want to be able to refer to the title_bar as an object.
            // Also, want it so the inside of this control is where things get added, so there may need to be another content div.
            //  Easier to do that than to keep the title always the first element.







        }

    },
    'activate': function() {
        this._super();

        var title_bar = this.get('title_bar');
        var inner_control = this.get('inner_control');

        console.log('title_bar', title_bar);
        console.log('inner_control', inner_control);

    }
})

module.exports = Titled_Panel;
},{"../../jsgui-html":73,"./panel":59,"./title-bar":60}],62:[function(require,module,exports){
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

define(["../../../jsgui-html-enh", "./factory"], 
	function(jsgui, factory) {
	*/
var jsgui = require('../../../jsgui-html-enh');
var factory = require('./factory');
		
		var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		var group = jsgui.group;

		var Array_Viewer = Control.extend({

			//  though in this case the selection behaviour is a bit more complicated.

			// need drag behaviour to be easy too.
			//  however, should implement it with most in jsgui html if possible.




			//'behaviour': ['selectable']

			// Maybe should put this into a form, so that it does a form post.
			//  That could possibly be disabled.

			'init': function(spec) {
			    var make = this.make;
				
				this._super(spec);

				this.set('dom.attributes.class', 'array-viewer');
				this.__type_name = 'array_viewer';
				if (!this.factory) this.factory = factory;

				var req = this._context.req;

				if (is_defined(spec.value)) {
					this.set('value', spec.value);
				}
				var that = this;
				if (!spec.el) {
					var ctrlOpen = new Control({
						'context': this._context
					})
					ctrlOpen.set('dom.attributes.class', 'array-open');
					ctrlOpen.get('content').add('[');

					var ctrlInner = new Control({
						'context': this._context
					})
					ctrlInner.set('dom.attributes.class', 'array-inner');

					var ctrlClose = new Control({
						'context': this._context
					})
					ctrlClose.set('dom.attributes.class', 'array-close');
					ctrlClose.get('content').add(']');

					this.add(ctrlOpen);
					this.add(ctrlInner);
					this.add(ctrlClose);

					this.set('inner', ctrlInner);

					this.refresh_internal();

				}

				this.add_event_listener('change', function(e) {

					var fieldName = e[0];
					var fieldValue = e[1];

					that.refresh_internal();


				})

				// when the object changes, we re-render.
				//  Not sure about re-rendering the whole thing though.

			},
			'refresh_internal': function() {
				var inner = this.get('inner');

				var value = this.get('value');

				var first = true;
				var context = this._context;
				var that = this;
				// Want to keep track of the comma controls.

				

				each(value, function(i, v) {
					// Create the new control for the object...
					var comma_space;
					if (!first) {

						comma_space = new jsgui.span({
							'context': that._context
						})

						comma_space.get('content').push(', ');


						inner.add(comma_space);
						//arr_comma_spaces.push(comma_space);
					}

					var ctrl = that.factory(v, context);
					inner.add(ctrl);

					//if (comma_space) {
					//	comma_space.set('next', ctrl);
					//}

					first = false;
				});

			},
			'activate': function() {
				this._super();
				//var el = this.get('dom.el');
				// then we use that 

				// Very concise code compared to how it would be without the control system.

				var content = this.get('content');
				//console.log('content.length ' + content.length());

				//throw 'stop';

				// then the content are controls which will get set like field controls.

				var ctrl_open = this.set('open', content.get(0));
				//this.set('inner', content.get(1));
				var ctrl_close = this.set('close', content.get(2));

				var hover_class = 'bg-light-yellow';

				var group_open_close = jsgui.group_hover_class([ctrl_open, ctrl_close], hover_class);
				var that = this;

				group_open_close.selectable(this);
				//group_open_close.click(function(e) {
				//	that.action_select_only();
				//});

				// needs to go through the inner, looking for the comma_spaces.

				var ctrl_inner = content.get(1);

				var prev_comma_space;
				ctrl_inner.get('content').each(function(i, v) {
					var is_comma_space = i % 2;
					//console.log('r ' + r);
					// want the comma space to select the next one.

					if (is_comma_space) {
						prev_comma_space = v;


					} else {
						if (prev_comma_space) {
							prev_comma_space.selectable(v);
							//prev_comma_space.click(function(e) {
								// can we find out which character was clicked?
							//	v.action_select_only();
							//})
						}
					}
				})
			}
		});
module.exports = Array_Viewer;

		//return Array_Viewer;
	//}
//);
},{"../../../jsgui-html-enh":71,"./factory":65}],63:[function(require,module,exports){
// object viewer
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

define(["../../../../jsgui-html-enh"],
	function(jsgui) {
*/

var jsgui = require('../../../../jsgui-html-enh');
var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;


var Number_Viewer = Control.extend({

    // Maybe should put this into a form, so that it does a form post.
    //  That could possibly be disabled.


    'init': function(spec) {
        var make = this.make;


        this._super(spec);

        this.set('dom.attributes.class', 'number-viewer');
        this.__type_name = 'number_viewer';

        var that = this;

        var span = new jsgui.span({
            'context': this._context
        })

        if (is_defined(spec.value)) {


            //span.add(spec.value);
            this.set('value', spec.value);
        }

        this.add(span);
        this.set('span', span);
        this.refresh_internal();

        // After the span_content, there may be space for an editing tool, such as up and down buttons.


        /*

        this.add_event_listener('change', function(e) {
            that.refresh_internal();
        })
        */

        // when the object changes, we re-render.
        //  Not sure about re-rendering the whole thing though.

    },
    'refresh_internal': function() {
        var value = this.get('value');

        // But now it's getting a function as the value?
        //  May be worth doing quite a comprehensive test of value getters + getters.





        //console.log('value ' + stringify(value));
        //console.log('value ' + tof(value));

        var span = this.get('span');
        var span_content = span.get('content');

        var tval = tof(value);

        //console.log('tval', tval);

        //console.log('------------------------------------------');
        //console.log('');

        var context = this._context;
        var content = this.get('content');
        //console.log('**** String viewer content ' + content);

        if (tval == 'data_value') {
            span_content.clear();
            span_content.push(value.value());
        }
        if (tval == 'number') {
            span_content.clear();
            span_content.push(value);
        }
    },
    'activate': function() {
        this._super();
        var that = this;
        //that.click(function(e) { that.action_select_only() })
        var hover_class = 'bg-light-yellow';

        // I think a selectable behaviour may be good.
        //  Could use .on / bind event
        //  and trigger / raise 'select' / 'deselect'

        // Can have event listeners that listen out for these various things.




        // this looks like a simple selectable behaviour.

        // Making it selectable... selectable using the lower level dom binding well...
        //  Changing how it binds the events to the DOM.

        // But in its own selection scope?
        //

        var span = this.get('span');
        var span_content = span.get('content');
        //console.log('span_content', span_content);
        //console.log('span_content.get(0)', span_content.get(0));

        var content_val = span_content.get(0).value();
        //console.log('content_val', content_val);
        //console.log('tof content_val', tof(content_val));

        var num = JSON.parse(content_val);
        //console.log('num', num);

        this.set('value', num);


        // it's a string, but parse it.
        //  want this control's value to be of the right format.
        //   with Data_Value?
        //   but with the presentation of it using a Data_Value string?









        that.selectable();


        /*

        that.click(function(e) {
            // is control held down?
            //console.log('e', e);
            var ctrl_key = e.ctrlKey;
            if (ctrl_key) {
                that.action_select_toggle();
            } else {
                that.action_select_only();
            }
        });

        */

        /*
        var content = this.get('content');
        var span = this.set('span', content.get(0));
        console.log('span ' + tof(span));
        */

        jsgui.hover_class(this, hover_class);

        // It looks like it needs to read back its own value from the HTML.
        //  Or its numeric value would need to be transferred as a data-jsgui-field.





        // beginning a drag on it...
        //  respond to mousedown with no mouseleave?
        //  then respond to mousemove on the document.

        // want some jsgui drag events to fire on some objects even if they are not d and d themselves
        //  dragging selected objects to a drop zone.

        //that.drag
        //  then a few functions for the event.
        //  move
        //  end

        // This drag behaviour could be generalised.

        // It may also be worth setting up a drop-zone as well.
        //  Then we will have the various events needed for a good UI.

        // Don't have any drag behaviour within the number viewer
        //  It's just for viewing the number
        //  Other things may make it draggable.


        /*

        that.drag(function(e_mousedown) {

        }, function(e_begin) {
            console.log('drag begin', e_begin);

            // could notify the selection scope that a drag has begun.

            // however, dragging one object may also drag the other objects that are selected within the scope.
            //  rename selection_scope to selection_context?
            //   more similar naming with other type of context.

            // Also, would be good to have info about what is being dragged.
            //  That would be part of the page_context.

            //  Want to perfect the beginning of dragging various objects.
            //   We'll know what they are in terms of the objects.
            //    Then the last stage is to update the UI with what has been done.

            // When beginning a drag, it can put things in a drag_group control.
            //  That means that only one control needs to be repositioned.
            //   The rest can appear within that.
            //    We can also make shallow / ghost copies of whatever is being dragged.

            // The page_context will act as a drag_manager, amongst other things.

            var is_selected = that.get('selected');
            if (is_selected && is_selected.value) is_selected = is_selected.value();
            //console.log('is_selected ' + is_selected);
            if (!is_selected) {
                that.action_select_only();
            }

            // and we do the drag for the whole of the selection.
            //  context.drag(this.get('selection_scope'));

            // so everything in the selection scope that is selected will be dragged.
            //  This will bring copies of them into the control that is being dragged.
            //   We move a control around the DOM, so it will be good to be dragging around copies,
            //   or drag_copies or drag_icons of what gets dragged.


            // telling the context of the drag events.


            // Bust dragging a ctrl is different.
            //  Maybe dragging a dockable ctrl will be different still.

            that._context.begin_drag_selection_scope(e_begin, that.find_selection_scope());

            // but just dragging a draggable window... that's a different drag to tell the page context about.




        }, function(e_move) {
            //console.log('drag move', e_move);

            that._context.move_drag_selection_scope(e_move);
        }, function(e_end) {
            //console.log('drag end', e_end);
            that._context.end_drag_selection_scope(e_end);
        });
        */
    }
});
module.exports = Number_Viewer;
		//return Number_Viewer;
	//}
//);

},{"../../../../jsgui-html-enh":71}],64:[function(require,module,exports){
// object viewer

// Will be better to use exports from require.


/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

define(["../../../../jsgui-html-enh"],
	function(jsgui) {
*/

var jsgui = require('../../../../jsgui-html-enh');


var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;
var extend = jsgui.extend;


var String_Viewer = Control.extend({

    // Maybe should put this into a form, so that it does a form post.
    //  That could possibly be disabled.


    'init': function(spec) {
        var make = this.make;

        this._super(spec);

        this.set('dom.attributes.class', 'string-viewer');
        this.__type_name = 'string_viewer';

        var that = this;

        var el = spec.el;
        console.log('string viewer init el', el);
        // Not so sure about setting the value just with text.
        //  Perhaps we can link it with a model.
        //  Then when the value is changed in the UI, it gets changed in the model.
        //   Then it can get sent to the server to be updated automatically.
        //   There will be easy to configure model persistance.


        if (is_defined(spec.value)) {
            //span.add(spec.value);
            this.set('value', spec.value);
        }

        var mode = spec.mode = spec.mode || 'json';

        if (!el) {

            // Want a faster way of making these things.
            //  Maybe define a composition.
            //  Or could define its contents?

            // This basically defines 3 spans.

            // Could use composition methods.
            //  Span in particular takes a string.

            // this.compose(['span', 'span_open', '"'], ['span', 'span'], ['span', 'span_close', '"']);

            if (mode == 'json') {
                var span_open = new jsgui.span({
                    'context': this._context
                })
                span_open.add('"');
                this.add(span_open);
            }

            var span = new jsgui.span({
                'context': this._context
            })
            span.set('dom.attributes.class', 'single-line');
            this.add(span);
            this.set('span', span);
            span.add(spec.text);



            //span.addClass('single-line');
            //span.set('dom.attributes.contenteditable', 'true');

            if (mode == 'json') {
                var span_close = new jsgui.span({
                    'context': this._context
                })
                span_close.add('"');
                this.add(span_close);
            }

            // And set a field so it knows the mode upon activation.

            // And if on the server...

            if (typeof document === 'undefined') {
              extend(this._fields = this._fields || {}, {
                'mode': mode
              })
            }


            //this.refresh_internal();
        }

        /*

        this.add_event_listener('change', function(e) {
            //console.log('String_Viewer change e ' + stringify(e));

            // Need to update the UI.

            // Rendering all controls again seems like a way to do it to start with.
            //  Seems easier than matching up the existing ones with what they have changed too.
            //   Maybe the matching will be more efficient though.
            var fieldName = e[0];
            var fieldValue = e[1];

            //console.log('fieldValue ' + stringify(fieldValue));
            console.log('fieldValue ' + tof(fieldValue));

            // then get it to refreshInternalControls.
            // rebuild? build? create?

            that.refresh_internal();
        })
        */

        // when the object changes, we re-render.
        //  Not sure about re-rendering the whole thing though.

    },
    'refresh_internal': function() {
        var value = this.get('value');
        //console.log('value ' + stringify(value));
        //console.log('value ' + tof(value));

        var span = this.get('span');
        var span_content = span.get('content');



        var tval = tof(value);

        var context = this._context;
        var content = this.get('content');
        //console.log('**** String viewer content ' + content);

        if (tval == 'data_value') {
            span_content.clear();
            //span_content.push('"' + value.value() + '"');
            span_content.push(value.value());
        }
    },
    'activate': function() {
        this._super();

        //var el = this.get('dom.el');
        // then we use that
        var that = this;

        var content = this.get('content');

        var mode = this.get('mode');
        console.log('mode', mode);
        console.log('mode ' + mode);


        // Using type coercion to get the Data_Value as a string
        if (mode == 'json') {
          var hover_class = 'bg-light-yellow';




          // then the content are controls which will get set like field controls.

          var ctrl_open = this.set('open', content.get(0));
          console.log('ctrl_open', ctrl_open);

          //var span = this.get('span');

          //var span_content = span.get('content');

          var span = this.set('span', content.get(1));
          console.log('span', span);
          // get the value from inside the span.



          var value = span.get('dom.el').innerHTML;







          //var group_content = jsgui.group_hover_class([span], hover_class);
          jsgui.hover_class(span, hover_class);

          var ctrl_close = this.set('close', content.get(2));




          var group_open_close = jsgui.group_hover_class([ctrl_open, ctrl_close], hover_class);




          // click to select, like with the object viewer.

          // A selectable abstraction would be really useful.
          // event-action links.

          // selectable abstraction means it has a click handler that interprets ctrl / shift key...

          // modifiable actions?
          // action responses?
          //  need a simple abstraction.

          // Also, sub-selections.

          //  When selecting something, check if it's ancestor within the same scope is selected.
          //   if so, ignore making the selection.
          //    That prevents there being unnecessary selected objects.


          // Want the select action to work differently in different places...

          // this.selectable(group_open_close);
          // span.selectable();



          group_open_close.click(function(e) {
              // is control held down?
              //console.log('e', e);
              var ctrl_key = e.ctrlKey;
              if (ctrl_key) {
                  that.action_select_toggle();
              } else {
                  that.action_select_only();
              }
          });


          //var ctrl_span_content = this.get('span');

          span.selectable();
        }

        if (mode == 'tabular') {
          //var span = this.set('span', content.get(0));
          var span = this.get('span');

          //console.log('span', span);
          // get the value from inside the span.



          var value = span.get('dom.el').innerHTML;
        }


        // Can get rendered differently in different modes, so need to activate differently.





        //console.log('content', stringify(content));
        //console.log('content.length ' + content.length());

        //throw 'stop';

        // And hover for the value...


        this.set('value', value);

        /*
        span.click(function(e) {
            var ctrl_key = e.ctrlKey;
            if (ctrl_key) {
                span.action_select_toggle();
            } else {
                span.action_select_only();
            }

            //ctrl_span_content.action_select_only();
        })
        */

    }
});

		// Can use an exports object?

module.exports = String_Viewer;

		//return String_Viewer;
	//}
//);

},{"../../../../jsgui-html-enh":71}],65:[function(require,module,exports){
// object viewer

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}; */

//define(["require", "../../../jsgui-html-enh"/*, "./object", "./array", "./basic/string", "./basic/number" */],
	//function(require, jsgui /*, Object_Viewer, Array_Viewer, String_Viewer, Number_Viewer */) {

var jsgui = require('../../../jsgui-html-enh');
var Object_Viewer = require('./object');
var Array_Viewer = require('./array');
var String_Viewer = require('./basic/string');
var Number_Viewer = require('./basic/number');

		var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		var group = jsgui.group;

		// Need to side-load these various components.
		//  Would be nice to have easy sideload syntax.

		var map_modules = {};

		var that = this;

		/*

		console.log("module's path is: " + module.uri);
    	console.log("module's dir is: " + path.dirname(module.uri));
		*/
    	// Making a sideloaded constructor may be more work.

    	// Can't do circular reference like that.
    	/*
    	var Object_Viewer = require('./object');
		var Array_Viewer = require('./array');
		var String_Viewer = require('./basic/string');
		var Number_Viewer = require('./basic/number');
		*/

		// Want it so we get the object when needed...
		//  Not so sure it can apply the constructor?

		// Want to be sure to have the reference to the object when needed...




    	/*

		var sideload = function(module_path) {
			// Only do it the first time it is called?
			//  That may be the way to avoid unnecessary recursion.

			// the sideload could handle module path trickery.
			//  paths need to be relative to this module's path.
			//var relative_module_path = path.dirname(module.uri) + '/' + module_path;
			//console.log('relative_module_path', relative_module_path);

			var res = function() {
				var module = map_modules[module_path];
				// see if we have it already
				if (!module) {
					console.log('sideloading module_path: ', module_path);
					module = map_modules[module_path] = require(module_path);
				}
				return module.apply(this, arguments);
				//return module;
				//return 

			}
			return res;

		};
		*/
		

		// Need more trickery with the module path...

		/*
		var Object_Viewer = sideload('./object');
		var Array_Viewer = sideload('./array');
		var String_Viewer = sideload('./basic/string');
		var Number_Viewer = sideload('./basic/number');
		*/



		var create = function(obj, context) {
			var tobj = tof(obj);
			//console.log('factory tobj ' + tobj);
			//console.log('factory obj ', obj);
			if (tobj == 'object') {
				var Object_Viewer = require('./object');
				var res = new Object_Viewer({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'array') {
				var Array_Viewer = require('./array');
				var res = new Array_Viewer({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'string') {
				var String_Viewer = require('./basic/string');
				var res = new String_Viewer({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'number') {
				var Number_Viewer = require('./basic/number');
				var res = new Number_Viewer({
					'context': context,
					'value': obj
				})
				return res;
			}
			if (tobj == 'data_value') {
				var val = obj.value();
				var tval = tof(val);

				// then create it for the inner value.

				return create(val, context);

				/*

				if (tval == 'string') {
					var String_Viewer = require('./basic/string');
					var res = new String_Viewer({
						'context': context,
						'value': obj
					})
				}

				if (tval == 'array') {
					var Array_Viewer = require('./basic/number');
					var res = new Array_Viewer({
						'context': context,
						'value': obj
					})
				}
				*/
				
				return res;
			}
		};
module.exports = create;
		
		

		//return create;
	//}
//);
},{"../../../jsgui-html-enh":71,"./array":62,"./basic/number":63,"./basic/string":64,"./object":67}],66:[function(require,module,exports){
// object viewer
/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

define(["../../../jsgui-html-enh", "./factory", "./basic/string"],
	function(jsgui, factory, String_Viewer) {
		*/
var jsgui = require('../../../jsgui-html-enh');
var factory = require('./factory');
var String_Viewer = require('./basic/string');
var Number_Viewer = require('./basic/number');


var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;
var extend = jsgui.extend;

// Could this be made to swap a different factory in place?
//  Object_KVP_Editor would then use the 'Editor' factory

// In init, this.factory = factory.
//  Then we can substitute the factory.



var Object_KVP_Viewer = Control.extend({
    'init': function(spec) {

        // Will have different modes.
        //  Default mode is JSON
        //  Can also show (tabular)?
        //  Would make sense to use an HTML table for this?
        //  Maybe when there are more rows.
        //   Could have it render as a tr perhaps.
        //  Tabular mode would be like a table, but using DIVs.
        //   Easier for a single row.
        //  Table means actually a table.



        this._super(spec);
        if (!this.factory) this.factory = factory;
        if (!this.String) this.String = String_Viewer;
        if (!this.Number) this.Number = Number_Viewer;

        this.set('dom.attributes.class', 'object-kvp-viewer');
        this.__type_name = 'object_kvp_viewer';
        var that = this;

        // only create the new controls if the spec does not have an el.
        //  Though may change that check... could check to see if it's an empty el or if there are already elements as content.
        //   to be activated or overwritten.

        if (is_defined(spec.key)) {
            this.set('key', spec.key);
        };

        var val;

        if (is_defined(spec.value)) {
            val = spec.value;
            this.set('value', spec.value);
        };

        //if (is_defined(spec.value)) {
        //    val = spec.value;
        //    this.set('value', spec.value);
        //};


        // No, maybe the mode has already been set as a field.

        // client-side
        // possibly should not set the mode at this stage, before it gets activated.
        //  It may be better for it to see the fields and apply them to the spec.
        //  Or if it has the element, it could read values from that element
        //   Earlier activation
        //   Pre-activation activation?
        //   Value loading.
        //   Making what is currently activate_jsgui_fields, activate_jsgui_control_fields, may be better as a part of initialization.
        //    It would prevent set values being overwritten with default ones.

        // Could have it activate the values before anything else.



        var mode = this.get('mode');

        if (!spec.mode) {
            spec.mode = 'json';
        }

        if (!mode) {
          mode = spec.mode;
          this.set('mode', mode);
        }
        //mode = mode || spec.mode;

        // could ensure the mode with saying it's JSON.





        this.add_class(mode);

        //this.String =

        if (!spec.el) {

            /*
            var ctrlKey = new Control({
                'context': this._context
            })
            ctrlKey.set('dom.attributes.class', 'object-kvp-key-viewer');
            */

            // May be better to use a string Viewer, Editor here, rather than having 3 different controls
            //  for the different parts of it. I think that will make for better encapsulation.

            // A single string control does seem better here.
            //  (editor or viewer)

            // The inner text?


            // Different rendering for different modes.
            //  Don't just want it to render as JSON.
            //  Want it to be able to render in a tabular way, using DIVs.

            // probably give the mode to the rendering components.

            if (mode == 'json') {

            }


            // We need to be able to get the key's span_content



            var ctrl_string_key = new that.String({
                'context': this._context,
                'text': spec.key,
                'mode': mode
            });

            /*


            var span_key_open_quote = new jsgui.span({
                'context': this._context
            });
            span_key_open_quote.add('"');
            ctrlKey.add(span_key_open_quote);

            var span_key_inner = new jsgui.span({
                'context': this._context
            });
            //span_key_close_quote.add('"');
            ctrlKey.add(span_key_inner);

            var span_key_close_quote = new jsgui.span({
                'context': this._context
            });
            span_key_close_quote.add('"');
            ctrlKey.add(span_key_close_quote);
            */

            // Why isnt this rendering?


            // only add the ': ' in JSON mode.

            //ctrlKey.add(span_key_colon_space);

            //  But setting up the ctrlKey so it has got other controls inside it, which will activate...

            var ctrl_value_container = new Control({
                'context': this._context
            })
            ctrl_value_container.set('dom.attributes.class', 'object-kvp-value-viewer');

            // Should be able to set the value container with a value control.
            //  Depends on the type of the value I think.

            var ctrl_value;

            if (is_defined(val)) {
                var t_val = tof(val);

                console.log('t_val', t_val);

                if (t_val == 'string') {
                    ctrl_value = new that.String({
                        'context': this._context,
                        'value': val
                    })
                }
                if (t_val == 'number') {
                    ctrl_value = new that.Number({
                        'context': this._context,
                        'value': val
                    })
                }

                if (ctrl_value) {
                    ctrl_value_container.add(ctrl_value);
                }
            }





            var ctrlClose = new Control({
                'context': this._context
            })
            ctrlClose.set('dom.attributes.class', 'object-close');
            ctrlClose.get('content').add('}');

            //this.add(ctrlOpen);

            // Should set it as a field that persists to the client.
            this.set('ctrl_key', ctrl_string_key);
            // ctrl_value
            this.set('ctrl_value', ctrl_value);



            this.add(ctrl_string_key);


            // The colon space...

            if (mode == 'json') {


                var span_key_colon_space = new jsgui.span({
                    'context': this._context
                });
                span_key_colon_space.get('content').add(': ');
                this.add(span_key_colon_space);
            }





            this.add(ctrl_value_container);

            if (typeof document === 'undefined') {
              extend(this._fields = this._fields || {}, {
                'mode': mode
              })
            }



            // Less confusing if we don't call refresh as part of the render.
            //this.refresh_internal();
        }

        // Generally, event listeners need some more work.
        //  Maybe a specific way to define them so that they bubble up through a heirachy.
        //  May be best for performance reasons to swith that off by default.





        /*

        this.add_event_listener('change', function(e) {
            // It looks like the e value is not working ok for stringifying it.
            //  Could maybe make a Class that stringifies well for events.

            //console.log('Object_Viewer change e ' + stringify(e));

            // Need to update the UI.

            // Rendering all controls again seems like a way to do it to start with.
            //  Seems easier than matching up the existing ones with what they have changed too.
            //   Maybe the matching will be more efficient though.
            var fieldName = e[0];
            var fieldValue = e[1];

            if (fieldName == 'key') {

            }
            if (fieldName == 'value') {

            }

            that.refresh_internal();


        })
        */
    },


    // Maybe don't use this?
    //  Maybe don't need it.
    'refresh_internal': function() {
        // When values are set in the constructor, using fields, do they get set using data values, like they would otherwise?

        var key = this.get('key');

        var value = this.get('value');

        // May be better to have a String control for the key.
        //  That way it will be easier to make it editable (using the control overrides).


        var content = this.get('content');
        //console.log('content ' + stringify(content));

        //var

        // May not be in the same place.
        //  Controls need to be remembered.



        //var ctrl_key = content.get(0);
        //var ctrl_value = content.get(2);

        var key_content = ctrl_key.get('span');

        //this.set('ctrl_string_key', ctrl_string_key);

        //var key_content = ctrl_key.get('content').get(1);

        if (key) {

            console.log('key ' + key);

            //var key_value = key.value();
            //console.log('key_value ' + key_value);

            key_content.add(key);

            var vcon = ctrl_value.get('content');
            //vcon.set(1, 'hello');
            vcon.clear();

            var ctrl_viewer = this.factory(value, this._context);
            //console.log('ctrl_viewer', ctrl_viewer);
            //console.log('tof ctrl_viewer', tof(ctrl_viewer));

            vcon.push(ctrl_viewer);
        }

    },
    'activate': function(el) {

        console.log('activate Object_KVP_Viewer');

        var mode = this.get('mode');
        console.log('mode', mode);
        console.log('mode ' + mode);


        // It may be in a different mode, could have different internal layouts.




        // could maybe not that the control is active at some stage to prevent reactivation.

        var hover_class = 'bg-light-yellow';

        // not sure why this should get activated again.

        this._super(el);

        //console.log('activate Object_KVP_Viewer ' + this._id());

        var el = el || this.get('dom.el');
        //console.log('el.innerHTML ' + el.innerHTML);

        var cns = el.childNodes;
        //console.log('cns.length ' + cns.length);

        var content = this.get('content');
        //console.log('content.length() ' + content.length());

        var clength = content.length();

        // No, don't get the control based on the content length.
        //  The structure may change.
        //  Need to keep the correct references.



        var ctrl_key, ctrl_value, ctrl_comma;
        var ctrl_key, ctrl_value, ctrl_comma;

        // Now using a string control for the key.
        //  Need less event handling here I think.

        // The ctrl_value should be saved and loaded automatically.

        // The placement of the content will depend on the mode.
        //  Maybe want better labelling / name transferrence of the internal controls.




        if (mode == 'json') {
          if (clength == 3 || clength == 4) {
              var content_key = content.get(0);
              //console.log('content_key ' + stringify(content_key));
              //console.log('content_key ' + tof(content_key));
              ctrl_key = this.set('ctrl_key', content_key);
              //console.log('ctrl_key ' + tof(ctrl_key));
              ctrl_value = this.set('ctrl_value', content.get(2));
          }
          if (clength == 4) {
              ctrl_comma = this.set('ctrl_comma', content.get(4));
          }
        } else {

          ctrl_key = this.get('ctrl_key');
          ctrl_value = this.get('ctrl_value');

        }




        // 4...



        if (clength > 4) {
            //console.log('content', content);
            throw 'stop';
        }


        // I think with the grid_9 the content still is not being dealt with properly.


        // then the open for the key.

        console.log('ctrl_key', ctrl_key);
        var key_content = ctrl_key.get('content');



        // And we want the value itself.
        // The value will really be a reference to the value of the value viewer.

        // Need to have the internal value linked with the value of the viewer control.

        var value_value = ctrl_value.get('value');
        console.log('value_value', value_value);


        //console.log('ctrl_key._id() ' + ctrl_key._id())
        //console.log('key_content.length() ' + key_content.length());

        // open, content, close, colon_space

        var ctrl_key_open_quote, ctrl_key_content, ctrl_key_close_quote, ctrl_key_colon_space;


        if (key_content.length() == 4) {
            ctrl_key_open_quote = key_content.get(0);
            ctrl_key_content = key_content.get(1);
            ctrl_key_close_quote = key_content.get(2);
            ctrl_key_colon_space = key_content.get(3);

            var group_key_quotes = jsgui.group_hover_class([ctrl_key_open_quote, ctrl_key_close_quote], hover_class);
            var that = this;
            //group_key_quotes.click(function(e) {
            //	that.action_select_only();
            //});

            group_key_quotes.click_to_select(this);
            // I think click_to_select works nicely as an API.
            jsgui.hover_class(ctrl_key_content, hover_class);


            // an easy way to specify the select action would be good.
            //  there is the normal select which will allow for the ctrl and shift modifiers.

            /*

            ctrl_key_content.click(function(e) {
                // is control held down?
                //console.log('e', e);
                var ctrl_key = e.ctrlKey;
                if (ctrl_key) {
                    ctrl_key_content.action_select_toggle();
                } else {
                    ctrl_key_content.action_select_only();
                }
            });
            */

            ctrl_key_content.click_to_select();



            //ctrl_key_content.click(function(e) { ctrl_key_content.action_select_only() });


            // ctrl_key_colon_space
            ctrl_key_colon_space.click_to_select(this);
            /*
            ctrl_key_colon_space.click(function(e) {
                // is control held down?
                //console.log('e', e);
                var ctrl_key = e.ctrlKey;
                if (ctrl_key) {
                    that.action_select_toggle();
                } else {
                    that.action_select_only();
                }
            });
            */

            //ctrl_key_colon_space.click(function(e) { that.action_select_only() });

        }
    }
});
module.exports = Object_KVP_Viewer;

		//return Object_KVP_Viewer;
//	}
//);

},{"../../../jsgui-html-enh":71,"./basic/number":63,"./basic/string":64,"./factory":65}],67:[function(require,module,exports){
// object viewer

/*

if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

define(["../../../jsgui-html-enh", "./object-kvp", "./factory"], 
	function(jsgui, Object_KVP_Viewer, factory) {
*/

var jsgui = require('../../../jsgui-html-enh');
var Object_KVP_Viewer = require('./object-kvp');
var factory = require('./factory');

		var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
		var Control = jsgui.Control;

		var group = jsgui.group;

		// The Object KVP will need to use the factory.
		//  Maybe the factory will need to be side-loaded?
		//   Or the factory can handle side-loading itself?
		//    That may be easier in order to keep the sideloading in one module.
		//     Then could better encapsulate / modularise the sideloading.
		//     And remove it for deployement.


		// This will need to side-load other references.
		//  Not sure exactly when is best to do that.
		//  Hopefully it can be done inside the module, loaded as the module loads?
		//  Or does it need to be the first time such an object is used?

		/*
		var _Object_KVP;

		var get_Object_KVP = function() {
			if (_Object_KVP) {
				return _Object_KVP;
			} else {
				_Object_KVP = require("./object-kvp");
				return _Object_KVP;
			}
		}
		*/



		// Maybe make this an Array_Viewer too?
		var Object_Viewer = Control.extend({

			// Maybe should put this into a form, so that it does a form post.
			//  That could possibly be disabled.

			'init': function(spec) {
			    var make = this.make;
			    
				
				this._super(spec);

				if (!this.factory) this.factory = factory;
				if (!this.Object_KVP) this.Object_KVP = Object_KVP_Viewer;


				this.set('dom.attributes.class', 'object-viewer');
				this.__type_name = 'object_viewer';
				var req = this._context.req;

				if (is_defined(spec.value)) {

					// Does that value become a data object?
					//  Want to listen to change events on it.

					this.set('value', spec.value);
				}

				// It may not have been initialised with a value?
				//  Perhaps it should have been.
				//  Could send a data-jsgui-value property.
				//   Or could reconstruct it from the DOM.

				// Anyway, there needs to be a value in the Control that can notice when it gets changed.





				if (!spec.el) {
					var ctrlOpen = new Control({
						'context': this._context
					})
					ctrlOpen.set('dom.attributes.class', 'object-open');
					// Want to make it send the controls ids in the html.
					// Sending over the IDs of controls that gets activated seems important.
					//  Not in all cases, but in cases where controls need to interact with each other.
					//  Possibly for internal interaction.

					//ctrlOpen.set('dom.attributes.

					ctrlOpen.get('content').add('{');
					var ctrlOpenID = ctrlOpen._id();

					var ctrlInner = new Control({
						'context': this._context
					})
					ctrlInner.set('dom.attributes.class', 'object-inner');
					

					var ctrlClose = new Control({
						'context': this._context
					})
					ctrlClose.set('dom.attributes.class', 'object-close');
					ctrlClose.get('content').add('}');

					var ctrlCloseID = ctrlClose._id();

					this.add(ctrlOpen);
					this.add(ctrlInner);
					this.add(ctrlClose);

					this.set('inner', ctrlInner);

					// Calling this a 'change' event now.
					var ctrl_fields = {
						'open': ctrlOpenID,
						'close': ctrlCloseID,
						'inner': ctrlInner._id()
					}

					// use different quotes...

					this.set('dom.attributes.data-jsgui-ctrl-fields', stringify(ctrl_fields).replace(/"/g, "'"));

					this.refresh_internal();
				}
				
				var that = this;

				// on this changing?
				

				/*

				this.add_event_listener('change', function(e) {
					
					console.log('Object_Viewer change');
					console.log('Object_Viewer change e ' + stringify(e));
					// Need to update the UI.

					// Rendering all controls again seems like a way to do it to start with.
					//  Seems easier than matching up the existing ones with what they have changed too.
					//   Maybe the matching will be more efficient though.
					var fieldName = e[0];
					var fieldValue = e[1];

					console.log('fieldValue ' + stringify(fieldValue));
					//console.log('fieldValue ' + tof(fieldValue));

					// then get it to refreshInternalControls.
					// rebuild? build? create?

					that.refresh_internal();
				})

				*/

				// when the object changes, we re-render.
				//  Not sure about re-rendering the whole thing though.

			},
			'refresh_internal': function() {
				//console.log('object refresh_internal');
				//console.log('this._context', this._context);

				var value = this.get('value');

				var inner = this.get('inner');
				//console.log('object viewer refresh_internal ');
				//console.log('value ' + stringify(value));

				inner.clear();
				//console.log('value ' + tof(value));

				// may need to clear the internal controls... seems likely on the client.
				//  could possibly go through the internal controls making small changes....
				// maybe will do this by making granular changes.
				var context = this._context;
				var that = this;

				var first = true;
				var prev_kvp;

				// In activation will need to go through the comma controls again.



				each(value, function(i, v) {

					// need to show the keys...

					if (!first) {
						var comma = new jsgui.span({
							'context': context
						})
						comma.get('content').push(',');

						prev_kvp.get('content').push(comma);
						//inner.add(comma);
					}

					// and want it so that we can either get the kvp viewer or editor.
					//  This needs to be overridable in a subclass.

					// .Object_KVP
					//  viewer or editor.


					//var kvp_viewer = new Object_KVP_Viewer({
					var kvp_viewer = new that.Object_KVP({
						'context': context,
						'key': i,
						'value': v
					})
					var cInternal = that.factory(v, context);
					inner.add(kvp_viewer);
					first = false;
					prev_kvp = kvp_viewer;
				});
			},


			// Could put this in control or enhanced control?
			

			'activate': function() {

				console.log('activate Object_Viewer');
				this._super();

				var ctrl_open = this.get('open');
				var ctrl_close = this.get('close');

				var ctrl_inner = this.get('inner');

				// Very nice to have this so concise now.
				var hover_class = 'bg-light-yellow';
				var group_open_close = jsgui.group_hover_class([ctrl_open, ctrl_close], hover_class);

				var that = this;
				// then for clicking on either the open or the close tag, should do the select actions for a selectable.


				group_open_close.selectable(this);
				/*
				group_open_close.click(function(e) {
					that.action_select_only();
				});
				*/

				// Can maybe be done more neatly with selection handles.

				var prev_comma;
				ctrl_inner.get('content').each(function(i, ctrl_kvp) {
					// Not the inner content...
					//  The inner content 

					var ckvp = ctrl_kvp.get('content');
					//console.log('ckvp.length ' + ckvp.length());
					
					if (prev_comma) {
						prev_comma.click(function(e) {
							// can we find out which character was clicked?
							ctrl_kvp.action_select_only();
						})
					}

					if (ckvp.length() == 3) {
						var comma = ckvp.get(2);
						prev_comma = comma;

					}
				});


				// This needs to listen to its value changing.

				/*
				this.get('value').on('change', function(e_change) {
					console.log('object viewer value change');
				});

				
				*/

				this.on('change', function(e_change) {
					console.log('object viewer change');

					// rerender the html!!!
					that.refresh_internal();

				});

				// should set up bound event handlers.

				console.log('this._bound_events', this._bound_events);

				//throw 'stop';

			}
		});
module.exports = Object_Viewer;

		//return Object_Viewer;
	//}
//);
},{"../../../jsgui-html-enh":71,"./factory":65,"./object-kvp":66}],68:[function(require,module,exports){


// Also want to make an MDI window system (Multiple Document Interface)

var jsgui = require('../../jsgui-html');
var Horizontal_Menu = require('./horizontal-menu');


var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var group = jsgui.group;

// Extensions of inner frames within inner frames...
//  The relative frame container, which has an inner frame. Then if something extends that, it would be good for that
//  to have an inner_control of its own and seamlessly expose that one while using the one above that.

// Relate the inner_control more to that level of the control heirachy.
//	Then make it so that they are navigable in sequence.
//  Not for the moment though.
//  I'll just have the Window control contain a relative div.


//var Relative_Frame = Control.

var Window = Control.extend({



	// could have a title field.
	'fields': {
		'title': String
	},


	// maybe add before make would be better. add will probably be used more.
	'init': function(spec, add, make) {
		this._super(spec);

		this.__type_name = 'window';

		this.set('dom.attributes.class', 'window');
		//console.log('spec.el', spec.el);

		// Window should have a relative frame inside it.
		//  However, a relative frame control could be useful.
		//  It's a control with a relative inner control inside.
		//  Would help with positioning absolutely positioned items within another absolutely positioned div / control.








		if (!spec.abstract && !spec.el) {
			// the bar at the top.

			// It's going to act as a drag handle for this.
			//  The drag system will integrate with various bands / window positions.

			// Maybe a property to say that it's dockable.


			//var top_bar = new Control({
			//	'context': this._context
			//})
			//top_bar.set('dom.attributes.class', 'title bar');


			//this.add(top_bar);

			var div_relative = add(Control({'class': 'relative'}))

			var title_bar = div_relative.add(make(Control({'class': 'title bar'})));


			var dv_title = this.get('title');

			var title_h2 = make(jsgui.h2());

			title_bar.add(title_h2);

			if (dv_title) {
				var title = dv_title.value();
				title_h2.add(title);
			}


			//console.log('title', title);



			// Define this as having inner_content.

			// I think that would also be a control field that gets activated as such.
			// .add needs to work with inner_content.
			// .add also needs to work with abstract controls. It should make them into an instance in the right context and add them, then
			//  return them.


			var inner_control = div_relative.add(make(Control({'class': 'inner'})));
			//console.log('this._id() ' + this._id());
			//console.log('inner_control._id() ' + inner_control._id());
			this.set('inner_control', inner_control);




			// May want some code to set this up as a dockable dialog window.
			//  Dockable window?

			// Quite a lot of functionality for this should be applicable to general controls.

			// Not get the bhaviours set up as an abstraction yet.
			//  However, a few functions that set things up seems useful.

			// Perhaps put things in the enhanced html section?
			// in activate...
			//  but need to get the top bar reference back.


			// would be nice if it could be set here and would automatically carry forward to the client.

			// and make the top bar act as a drag / window handle to this, the Flexiboard.

			// Will also work within the Page_Context.
			//  The Page_Context will have some handling for dragging windows.


			// Will need to be done on activation.
			//top_bar.drag_handle_to(this);

			// Maybe good to get linked controls through the JSGUI system.
			//  Although it makes clutter in the DOM at the moment, that could be done through a much more optimized system.

			// Should also have a map of its contents.

			// Need to give it a 'resizable' property / behaviour. Maybe use field.

			// Would be best activating resize (including with the handle) purely on the client.

			//var resizable = this.get('resizable')

			// It needs to carry accross info about which is its internal relative container.

			//var ctrl_fields = {
			//	'ctrl_relative': div_relative._id(),
			//	'title_bar': title_bar._id()
			//}


			this.set('title_bar', title_bar);
			this.set('ctrl_relative', div_relative);

			// use different quotes...

			//this.set('dom.attributes.data-jsgui-ctrl-fields', stringify(ctrl_fields).replace(/"/g, "'"));


		}

	},
	'resizable': function() {
		this.set('resizable', 'right-bottom');

		// This needs to be a property that gets sent to the client.
		//  Call them active_fields?

		this.set('dom.attributes.data-jsgui-fields', "{'resizable': 'right-bottom'}");





		// Want the resizable field to go to the client as well.
		// Want a convenient way of specifying that something gets sent to the client as a field / property.


	},
	'activate': function() {

		if (!this.__active) {
			// May need to register Flexiboard in some way on the client.
			this._super();
			var context = this._context;

			var ctrl_relative = this.get('ctrl_relative');

			console.log('activate Window');

			//var content = this.get('content');

			//console.log('content.length ' + content.length());
			var top_bar = this.get('title_bar');

			top_bar.drag_handle_to(this);


			// Need better get system, can either get as data_value or normal js value.
			var resizable = this.get('resizable');
			if (resizable && resizable.value) resizable = resizable.value();

			console.log('resizable', resizable);

			if (resizable == 'right-bottom') {
				// Use absolute position rather than css right and css bottom, more compatability with older browsers.
				//  However, older browesers are having problems using require.js
				//  Browserify may work a lot better.

				// Absolutely positioned element within the window.
				//  Act as resize handles to the window.

				// resize_handle_to will be in ctrl enh (I think)

				// create the resize handle (basic control), then use resize_handle_to.

				var resize_handle = new Control({
					'class': 'right-bottom resize-handle',
					'context': context
				});


				//resize_handle.resize_handle_to(this, 'right-bottom');

				// ANd inline style for where it is...
				//  need to know the size of the window.

				var size = this.size();
				console.log('size', size);

				// for the moment resize handle height is 16px...
				//  We maybe measure this from CSS.


				var resize_handle_width = 16;
				var resize_handle_height = 16;

				var x = size[0] - resize_handle_width;
				var y = size[1] - resize_handle_height;

				resize_handle.style({
					'left': x + 'px',
					'top': y + 'px'
				});

				// size is the computed size + borders?
				//  outer size?

				// this.size('inner')


				//throw 'stop';


				//ctrl_relative.add(resize_handle);
				//resize_handle.resize_handle_to(this, 'right-bottom');

			}
		}



		//

	},
	'menu': function(menu_spec) {

		// Should probably take a JS object that holds the menu structure.
		//  Possibly event handlers as well?


		console.log('window menu menu_spec', menu_spec);

		// Need to build up the menu out of menu nodes.
		//  Probably create a new Horizontal_Menu control?
		//   Fixed_Menu control may be better... css could make it either horizontal or vertical.

		// Make a Horizontal_Menu for the moment.

		// Create a horizontal menu with that menu spec.

		// insert_before and insert_after.


		var h_menu_spec = {
			'value': menu_spec,
			'context': this._context
		}

		//menu_spec.context = this._context;

		// the menu spec includes a menu value...
		//  it renders that into the necessary nested controls.


		var h_menu = new Horizontal_Menu(h_menu_spec);

		// thien it needs to get inserted before the inner content.

		// Need content collection insert before.

		var ic = this.get('inner_control');

		var ic_parent = ic.parent();
		//console.log('ic_parent', ic_parent);
		//throw 'stop';
		//console.log('ic', ic);

		h_menu.insert_before(ic);
		// So needs to be able to access parent controls.

		h_menu.active();

		//throw 'stop;'






	}
})


module.exports = Window;

},{"../../jsgui-html":73,"./horizontal-menu":54}],69:[function(require,module,exports){
// jsgui-client

// require a whole bunch of things


// need to have the extra information to initialize the various objects.
//  part of the server-side rendering would be identifying objects and relevant properties to send to the client.
//  for example, that something is a particular control.

//  identify ids by control.
// then there is separate client-side code...
//  or controls (perhaps advanced ones) have got various events on them that respond to client-side io, but can get used on the server as well,
//   perhaps with these client-side events called for testing.
// Application code would likely build views both on the server and the client, and have the interacton done on the client, while also using the
//  for its API, dealing with larger amounts of data than in the initial view.

// Will use particular client files...
//  Maybe have all the logic in one component.
//  Will have different means of loading and activation as well.
//   May be easier when the whole jsgui is in one file, or at least a large core.

// Likely to include a client-side component.
//  Like load a particular file which will include some particular jsgui client code.

// Needs a Client_Page_Context

// Perhaps we need a Resource_Client as well.

// Want the html client to be able to access resources.
// Want the client to have the right resource pool on the client.

// Want to be able to code client apps relatively simply, using the client-side resource system to access resources on the server / on servers.

// Should maybe send over resource info from the server.
// Resource manifest or description.

// Resources could also share a description.

// However, don't want this to get too complicated.
//  With the page, can serve a set of resources for it to use.
//  That would be an inline script, but then maybe we need to serve the app's JS alongside it.

// Will need to have the resource client access the resource for its own URL.
//  (or tell it which URL to look for the resource(s) at)

// Sending a resource-client would enable the resource to be accessed.

// For the simple case of the clock resource, we want it to display the resource's data.

// Important to avoid boilerplate while coding, making it easy to serve some data.

// Though the client side resource system will be there as code, it would be good to have things automatically instantiated.

// Need a resource client control.

// jsgui-html-resource-client
//  That would also have resources, and would start up the resource pool and client page context.
//  Not sure how useful the client code would be without the resource pool, but it's better to keep things more modular.



// The normal chiend should have a page_context at least...

// jsgui-html-resource-client
//  That would be a page that connects back to the .json for the page it was served from.
//  Also would connect to the websocket connection.

// May have jsgui-html-pooled-resources-client as well at some point.
//  Want it so that the resources which are on the server can be subscribed to using a single websocket connection.

// The resource client would connect back with a websocket connection.
//  Need to make sure that resources are published that way.

// Will be possible to have a single connection per resource.
//  That's how it will start.

// When connecting to multiple resources over websockets, will do so through the server's resource pool.
//  The server will notify the client of resource events that it has subscribed to.

// Need to get the real-time transfer of info working soon on a basic level, sharing clock data.

// Will then have it sharing more complex and varied data at some point soon after.








/*

if (typeof define !== 'function') {
    var define = require('amdefine')(module);
};

*/

// Rather than just jsgui-html-enh, it would be good to load a jsgui module that has got a lot of controls
//  and possibly resources built in.

// jsgui.Window
// jsgui.Calendar
// jsgui.Date_Range_Editor

// I think making a general purpose set of tools would be quite a good idea



//  so that's available



// jsgui-html-toolkit
// jsgui-html-with-controls

// Want a fairly large set of controls to come in the bundle.




/*

define(["./jsgui-html-enh", "./client-page-context", "../resource/core/client-pool"],
//define(["./jsgui-html"],
function (jsgui, Client_Page_Context, Client_Resource_Pool) {

    */
var jsgui = require('./jsgui-html-enh');
var Client_Page_Context = require('./client-page-context');
var Client_Resource_Pool = require('../resource/core/client-pool');

var fp = jsgui.fp;
//jQuery, canvas and the app/sub module are all
//loaded and can be used here now.

//console.log('running client function.');

// At this point could do various things to activate the document.

// However, we could have a part of the file that gets replaced with local variables.
//  They could be written here as JSON before the file gets served - with the file being given a special URL?

// I think including the local variables in the page itself may be mest. No need for dealing with another JavaSvipt file.
//  Could possibly compress them in a neat way, like base64.

// Controls will do a fair bit with their client-side code...
//  But it will be important to get properties over to the client.
//  Data attributes would be a possibility too.

// Client side resources too? Don't think so, client side resource needs this.

//  Also capability for doing HTTP request easily.
//  jsgui.http('post', url, callback);

var makeHttpObject = function() {
    try {return new XMLHttpRequest();}
    catch (error) {}
    try {return new ActiveXObject("Msxml2.XMLHTTP");}
    catch (error) {}
    try {return new ActiveXObject("Microsoft.XMLHTTP");}
    catch (error) {}

    throw new Error("Could not create HTTP request object.");
}



jsgui.http = fp(function(a, sig) {

    // we may want to do an HTTP post instead, perhaps posting a document.

    var method = 'GET';
    var url, callback, body = null;
    if (sig == '[s,f]') {
        url = a[0];
        callback = a[1];
    }
    if (sig == '[s,s,f]') {
        url = a[0];
        method = a[1].toUpperCase();
        callback = a[2];
    }
    if (sig == '[s,s,s,f]') {
        url = a[0];
        method = a[1].toUpperCase();
        body = a[2];
        callback = a[3];
    }
    if (sig == '[s,s,a,f]') {
        url = a[0];
        method = a[1].toUpperCase();
        body = JSON.stringify(a[2]);
        callback = a[3];
    }
    if (sig == '[s,s,o,f]') {
        url = a[0];
        method = a[1].toUpperCase();
        body = JSON.stringify(a[2]);
        callback = a[3];
    }
    var request = makeHttpObject();

    request.open(method, url, true);

    if (method.toUpperCase() == 'POST' && body) {
        //console.log('body', body);
        request.send(body);
    } else {
        request.send(null);
    }

    request.onreadystatechange = function() {
        if (request.readyState == 4) {
            // Perhaps parse that...
            //console.log('request', request);

            var content_type = request.getResponseHeader('Content-Type');
            //console.log('content_type', content_type);

            if (content_type == 'application/json') {
                callback(null, JSON.parse(request.responseText));
            } else {
                callback(null, request.responseText);
            }

        }

    };
});

// The page needs to get activated.

console.log('Running jsgui-html-client');

jsgui.Client_Page_Context = Client_Page_Context;

var client_page_context = new Client_Page_Context();

var resource_pool = client_page_context.resource_pool = new Client_Resource_Pool();

resource_pool.start(function() {
    console.log('client-side resource pool started');
});

// No automatic activation here, the client app.js may want to load im references.
//jsgui.activate(client_page_context);
console.log('jsgui-html-client post activate');





// Also want this to access resources.

// Think we will have a client side resource pool (by default?)



// Possibly this should automatically activate on the client.



//jsgui.Client_Page_Context = Client_Page_Context;

//return jsgui;

module.exports = jsgui;




//});

},{"../resource/core/client-pool":40,"./client-page-context":44,"./jsgui-html-enh":71}],70:[function(require,module,exports){

var jsgui = require('../core/jsgui-lang-enh');
//This function is called when scripts/helper/util.js is loaded.

// HTML will benefit from a big tidy-up.
//  HTML core.
//   Then various enhancements.
//   Page_Context being a major feature.
//    It ties everything together.
//     So as well as an annoyance with controls requiring it, it seems useful.
//      Maybe make it so that controls default to that Page_Context.






var stringify = jsgui.stringify,
    fp = jsgui.fp,
    tof = jsgui.tof,
    extend = jsgui.extend,
    is_defined = jsgui.is_defined,
    str_arr_mapify = jsgui.str_arr_mapify;
var clone = jsgui.clone,
    each = jsgui.eac,
    data_type_instance = jsgui.data_type_instance;

var str_hex_to_int = jsgui.str_hex_to_int,
    hex_rgb_6_match = jsgui.hex_rgb_6_match,
    arr_rgb_to_css_hex_6 = jsgui.arr_rgb_to_css_hex_6;

var Data_Value = jsgui.Data_Value,
    Data_Object = jsgui.Data_Object,
    Collection = jsgui.Collection;

var Class = jsgui.Class;

var ensure_data_type_data_object_constructor = jsgui.ensure_data_type_data_object_constructor;

var Enhanced_Data_Object = jsgui.Enhanced_Data_Object;

extend(jsgui.data_types_info, {
    'border_style': ['any', ['solid', 'dotted', 'dashed']],
    'distance': ['n_units', 'px'],
    'single_border': ['indexed_array', [
        ['width', 'distance'],
        ['style', 'border_style'],
        ['color', 'color']
    ]],
    'border': ['oltrb', 'single_border'],
    'margin': ['oltrb', 'distance'],
    'size': ['indexed_array', ['distance', ['width', 'height']]],
    'control_collection': ['DataCollection', 'control'],

    // Defining the types that things will get automatically created as.
    'dom_attributes': 'ordered_string_list',

    //'dom_attributes': {
        //'class': 'Ordered_String_List'
    //    'class': 'ordered_string_list'

    //},
    // these are its fields.
    //  should be able to build a control_dom constructor function.
    'control_dom': {
        'node': 'object',
        'attributes': 'dom_attributes',
        'tagName': 'string'
    },
    'control': {

        // Another type of style inside here?
        'style': 'style',
        // that may be automatically done from its relationship to its parent.
        //'index': 'int',
        // It maybe has an ID anyway as a jsgui Data_Object.
        //  But I think this signifies it? Not sure.
        'id': 'context_id',
        //'controls': 'control_collection',
        // content collection.
        'dom': 'control_dom',
        'class_name': 'string'
        // css_class in the dom attributes. style is inline style-like thing.
        //  style will also be used for building and modifying actual css files or setups.

    },
    'style': {
        // an object declaration, not array. can have various things inside
        //'border': ['oltrb', 'single_border'],
        // top, left etc

        // Want CSS to work by default, but will have some overrides / parsing / reinterpretation.



        'border': 'border',
        'margin': 'margin',
        // when dealing with 'any': there may need to be a map that says if a value is contained.
        //  could even store these maps in a tree. would use something like 'ensure'
        'cursor': ['any', ['auto', 'crosshair', 'default', 'e-resize', 'help', 'move', 'n-resize', 'ne-resize', 'nw-resize', 'pointer', 'progress', 's-resize', 'se-resize', 'sw-resize', 'text', 'w-resize', 'wait', 'inherit']]
    }
});

// Want an underlying system that represents CSS well.
//  Making it a lot easier to work with CSS, as it is in the browser.
//  On top of that we have another style layer. Maybe jsgui-style? A different way of interacting with the style system.
//  It may be that some .style instructions will be interpreted to go through the jsgui style layer.
//   When setting border-radius in a Page_Context that does not support it.

Enhanced_Data_Object.register_data_type('control_dom', jsgui.data_types_info['control_dom']);
Enhanced_Data_Object.register_data_type('dom_attributes', jsgui.data_types_info['dom_attributes']);
//jsgui.populate_all_dt_maps();
//  data type maps
//   likely to have maps created as needed and cached.

// May have a Data_Type_System that encloses these Data_Types.
ensure_data_type_data_object_constructor('control_dom');


// also a processor for distance?
//  a curried function for n_units basically?

jsgui.input_processors['distance'] = function (input) {
    // use the n_units processor, but with 'px'
    return jsgui.input_processors['n_units']('px', input);
};
// not sure about using oltrb right now. Could compress by having a single arr_ltrb variable.
jsgui.input_processors['margin'] = function (input) {
    return jsgui.input_processors['optional_array'](['left', 'top', 'right', 'bottom'], 'distance', input);
};

jsgui.input_processors['size'] = function (input) {
    // use the n_units processor, but with 'px'
    return jsgui.input_processors['indexed_array'](['width', 'height'], 'distance', input);
};


//console.log("jsgui.input_processors['color'] " + jsgui.input_processors['color']);

// just a string in the constructor - looks fine for the type.
//  likely to be using some namespaced type system eventually, but this is my namespace for the moment.

// and output the color to HTML.

// and may have the various output processors for margin (oltrbs?) and other things, outputting to HTML.
//  Some of them may output to other shim controls, or similar.
/// Will eventually output to HTML.

// Need the lower level style system working.
//  On top of that, the jsgui style system will be built.



jsgui.output_processors['string'] = function (value) {
    // need to escapr it
    return value;
}

// Will require other code as well.

var get_inline_css_dict_from_style = function (style, page_context) {
    //console.log('get_inline_css_dict_from_style ' + stringify(style));

    var style_info = jsgui.data_types_info['style'];


    // should have the style data type info
    //  then for each property we get the data type info for that, and then use its output mechanism.

    var css_style_dict = {};
    each(style, function (i, v) {
        //console.log('style i ' + i);

        // TODO - May not just be a name but could directly be the info. Could use a loader function perhaps.
        var dt_info_style_item_name = style_info[i];
        //console.log('dt_info_style_item_name ' + stringify(dt_info_style_item_name));

        var dti_style_item = data_type_instance(dt_info_style_item_name);

        //console.log('*v ' + stringify(v));

        var style_rule = dti_style_item.output(v);

        //console.log('style_rule ' + stringify(style_rule));
        //console.log('tof(style_rule) ' + tof(style_rule));
        if (tof(style_rule) == 'string') {
            css_style_dict[i] = style_rule;
        } else {

            // could probably use extend here.

            each(style_rule, function (subrule_name, subrule_value) {
                css_style_dict[subrule_name] = subrule_value;
            });

        }

        //apply_jsgui_style_rule_to_css_style(css_style_dict, i, v);
    });
    return css_style_dict;
};

var apply_jsgui_style_rule_to_css_style = function (style, style_rule_name, style_rule_value) {
    //console.log('apply_jsgui_style_rule_to_css_style style_rule_name ' + style_rule_name);

    // it's probably going to use dti and output.

    // Will be changing the way that styles get calculated.
    // Going to create some new functions that get used in the rendering.
    //  Will get help from data_types_info.

    //console.log('fns_jsgui_style_item_to_inline_css_item[style_rule_name] ' + fns_jsgui_style_item_to_inline_css_item[style_rule_name]);

    // this way of doing things will change.
    //  going to do some kind of get_style.

    // More of it will be computed through lang and the data_types system.

    if (fns_jsgui_style_item_to_inline_css_item[style_rule_name]) {
        var inline_style_dict = fns_jsgui_style_item_to_inline_css_item[style_rule_name](style_rule_value);
        //  but could we get more than one style item in the dict?

        each(inline_style_dict, function (i2, v2) {

            style[i2] = v2;
        });
    }
};

var styles_dict_to_string = function (styles_dict) {

    // OK... some improvements will need to be made.
    //  will need to upgrade the styles / size / pos setting code.
    //console.log('styles_dict ' + jsgui.stringify(styles_dict));

    var res = '',
        first = true;
    each(styles_dict, function (i, v) {

        if (typeof v == 'number') {
            v = v + '';
        }

        if (typeof (v) != 'string') {
            //var stack = new Error().stack;
            //console.log('stack ' + stack);
            //console.log('i ' + i);
            //console.log('v ' + v);
            //console.log('typeof v ' + typeof v);
            throw 'jsgui: styles_dict_to_string: Only string css styles supported. Jsgui styles must be translated to css before use here.';
        } else {
            res = res + i + ': ' + v + ';';
        }
    });
    return res;
};

// JSGUI event binding functions.

var _bind_dom_event = function (dom_node, event_name, fn) {

    // return unbind function. ???

    var unbind = _unbind_dom_event(dom_node, event_name, fn);
    return unbind;
}

var _unbind_dom_event = function (dom_node, event_name, fn) {

}







// And Core, of course
//  Likely to rename this 'Control' or 'control' - probably 'Control'.

// Now it is in this file it will be easier to modify by itself.
// More rendering to be handled through the Data_Object capabilities.
//  Could be the output type of various different things.

// Maybe we need more testing of controls, there seems to be a problem which I need to fix to do
//  with fields not being found in the file system control.

// Perhaps I could investigate that control outside of a server.

// This needs more work on its style system.
//  Need to quickly and easily change conformant style rules.
//   There will be a CSS overrides system, but generally the CSS and styling of the Control should follow normal CSS.
//    In some cases the output CSS will not match the input styling rules,
//     there may be shortcuts for convenience, and it will accept more expressive language than CSS (hopefully)
//  But do want full css support.

// control.style('background-image', 'url(...)');
//  but will have input filters in case a url is not given in that format?


// I think this will take quite a lot more work to fully make the CSS / style API.
//  However, we most want to be able to set the style property of an object to give it styles.

// It needs to work with a variety of styles.
//  Needs to access the local CSS inline dict...
//   though could possibly work with a Collection?

// dom.attributes.style
//  I think it makes sense to have that available as a string to set...
//   however, I think dom.attributes._style makes sense.

// want to access the inline style dict.

//  will also apply input transformations in some cases.
//  may apply output transformations when rendering.

// Possibly the style system could do with some separate work and testing.
//  We want it so that in old IE rounded edges can be emulated with VML.


// dom.attributes.style is literally the style attribute as a string?
//  no special case there?
//   however, there will be a system of dynamically creating this in as its needed in some cases.

var edo_init = Enhanced_Data_Object.prototype.init;
var do_init = Data_Object.prototype.init;
//var do_init_call = Data_Object.prototype.init.call;

// Will also use reusable local variables.
//  May be a bit experimental! Should do less assignment & garbage collection.

var that, dom, flags, css_flags, spec_content, tsc, arr, res, dom_attrs;

// Link tag needs to have no closing tag.

// This should have more for the client side.
//

// For drag and drop:
//  Best to use the existing API. Have a layer on top of that.
// Then for mobile (iOS, Blackberry? Android) have an implementation that is a bit like the HTML implementation.
// Then have a nice, convenient layer on top of both.

// Drag, rearranging seems really useful.
// May need to interact with server objects when doing the rearrangement, need a clear division between rearrangement
//  UI and the actions it carries out.

// Basically say something is draggable
// Don't assume it drags itself, there may be a handle
// Allow the drag item to be something representing some data in terms of model
// Allow the drag item to be a ghost view of the item being dragged
// Work so that example with the separate items grouping together works.




// Perhaps have some kind of html enhancements module?




// Control could benefit from composition methods and definitions.
//  They define the composition of controls.
//   May contain inner controls. These get created when necessary.


// Also need a good system for drag and drop events.
//  Need to recognise drag starts at first.

// Dragging something that is already selected.

// Selecting something on the beginning of the drag.



// Also want to be able to make shallow copies / clones of controls.
//  Probably won't have connection to data.
//   For short term use in dragging.

// will copy all the dom attributes and tags, nodes.
//  could be a control?
//   including subcontrols... could make a bunch of new controls as the copy.
//    That may be best to have the same effects / to enable effects.


var parse_style_attribute_to_map = function(str_style) {
    str_style = str_style.replace(/; /g, ';');
    str_style = str_style.replace(/: /g, ':');
    var rules = str_style.split(';');
    var rule_nvps = [];
    var map_rules = {};
    each(rules, function(i, rule) {
        if (rule) {
            var sRule = rule.split(':');

            rule_nvps.push(sRule)
            map_rules[sRule[0]] = sRule[1]
        }

    })

    //console.log('rule_nvps ' + stringify(rule_nvps));

    //console.log('map_rules ' + stringify(map_rules));

    return map_rules;
}

var style_attribute_map_to_string = function(map_style) {
    var arr_res = [];
    var first = true;
    each(map_style, function(i, v) {
        if (!first) {
            arr_res.push(';');
        }

        arr_res.push(i);
        arr_res.push(':');
        arr_res.push(v);


        first = false;
    })
    return arr_res.join('');
}

// Deferred rendering is going to be a fairly major feature.


var getStyle = function (el, property_name) {

    if (el.currentStyle)
        var y = el.currentStyle[property_name];
    else if (window.getComputedStyle);
        var y = document.defaultView.getComputedStyle(el, null).getPropertyValue(property_name);
    return y;
}


// Making it so a Control needs to be initialised with a context every time?



var Control = jsgui.Enhanced_Data_Object.extend({

    'fields': [
    // This may be a good way of expressing collections, works in JSON.
    //['content', ['collection', 'control']]

    // need to make sure that the fields makes these with the right contexts.

    // Say it's a collection of controls?
        // Could possibly have an inner content?
        //  Inner control?
        //  And that inner control's content is the inner content.
        //  Not all will have an inner control.
        //   Could check a control to see if it has it.
        //   Add will add to the inner control.

        // May have active fields as well.
        //  There will be references to other controls - that's handled with data-jsgui-ctrl-fields.
        //  The non-control fields are transferred with data-jsgui-fields
        //   However, we don't want to confuse them with the fields that are a standard part of the control in a different part of the lifecycle.

        // May be worth explicitly breaking out the Composition part of the Control lifecycle again.
        //  When a Control is initialized on the client, being given a DOM element, it does not need to be composed.
        //   (I think)

        ['content', 'collection'],
        ['dom', 'control_dom']//,

        // What are the CSS flags?
        //  Should this use the flag system?
        //  We will have flags that determine CSS styling.
        //   But do we have flags that directly are CSS properties / configurations, either on or off?

        //['css_flags', Collection(String)]
        // context as a field?
        //  or is context handled by Data_Object?

    ],

    // Set up a field with type Control.
    //  Then it will be sent to the client as a control field, and the reference re-obtained.


    // Connect all fields? Just some of them?
    //  Want to make it easy for the necessary fields / control references to be sent to the client.
    'connect_fields': true,

    // Don't want to use this much. Should probably override functions instead. ??? Or find a way not to use it.
    'mod_link': function () {
        return jsgui;
    },

    // Style does Data_Object.set('style')
    //  so need to be careful about this style object.
    //   Will need to refer to it when rendering.

    // There will be the jsgui-style, but I think having normal style as the default is best, and that will get
    //  overridden in some circumstances.


    // We are likely to need a better style function in HTML.

    // may be good in some ways having it work as a field.

    // Keep dom.style.attributes as it is, but modify that when changing inline styles.

    'init': function (spec) {

        // but process / normalize the spec here?

        spec = spec || {};
        //spec.nodeType = spec.nodeType || 1;
        //console.log('pre super init');
        //this._super(spec);

        //do_init_call(this, spec);
        this.mapListeners = {};
        do_init.call(this, spec);


        //console.log('post super init');

        this.__type_name = 'control';
        this.__type = 'control';

        if (!this._abstract) {


            /*
            this.add_event_listener('set', fp(function (a, sig) {
                //console.log('control event set sig ' + sig);
                //throw 'stop';
                // a flag could have been set.
            }));
            */

            // need to listen for changes in the flags and maybe some other properties.
            //  css classes will be added and removed using these flags.

            // will also have this responding to the addition and removal of css flags.
            //  css flags will correspond to a normal flag, so setting a css flag creates the normal flag too
            //  removing the normal flag removes the css flag if there is one.
            //  removing the css flag removes the normal flag if there is one.

            //  could have a list of css_enabled_flags so that whenever the normal flag version is switched on, it switches on
            //   the css flag as well.

            // may have a fairly convenient interface for receiving these flags (for instances ans for classes)
            //  and have some complexity inside, but making it as simple for the end developer as possible, while also
            //  enabling event responses to work as well.

            //flags = this.get('flags');
            //css_flags = this.get('css_flags');

            //var flags = this.get('flags');
            //var css_flags = this.get('css_flags');


            //var that = this;
            //that = this;

            //console.log('pre get dom');

            // abstract controls don't have the field instances.
            //  but they could have settings or a spec.
            // Maybe abstract Data_objects could retain their spec,
            //  then not do the normal constructor.

            //console.log('this.fields() ' + stringify(this.fields()));
            // the chained fields?
            //  have the fields not been initialised properly?
            //var chained_fields = jsgui.get_chained_fields(this.constructor);
            //console.log('chained_fields ' + stringify(chained_fields));
            //console.log('pre get dom');
            //var dom = this.get('dom');

            //dom = this.get('dom');
            //dom.set('tagName', 'div'); // Though may depend on spec...

            var tagName = spec.tagName || spec.tag_name || 'div';

            this.set('dom.tagName', tagName);

            // this.set_s_s;
            //  different versions of set, one of which will just set using 2 string params.



            //  using two strings.
            //  a version of the function

            // could have inline creation of the dom Data_Object.

            //var dom = this._.dom = this._.dom || new Data_Object({'context': this.context});
            //var tag_name = dom._.tagName = new Data_Value({'value': tagName});
            //tag_name.parent(dom);

            this._icss = {};
            //this._.dom = {'tagName': 'div'};

            // Abstract controls won't have

            //console.log('dom ' + stringify(dom));

            // The DOM is a field that it should be getting from the control.
            spec_content = spec.content;
            if (spec_content) {
                tsc = tof(spec_content);
                if (tsc == 'array') {
                    throw 'Content array not yet supported here.'
                } else if (tsc == 'string' || tsc == 'control') {
                    this.content().add(spec_content);
                }

            }

            if (spec.el) {
                this.set('dom.el', spec.el);
            }

            var that = this;

            if (spec.size) {
                var size = spec.size;
                var t_size = tof(size);
                if (t_size == 'array') {
                    var width = size[0];
                    var height = size[1];

                    // far from ideal
                    //  Really should set inline styles separately.
                    //  I had lost some of the JSGUI style system before because I redid control based on Data_Object, it may have got too complicated before though.
                    //

                    // Want to be able to access css styles.
                    //  Want to be able to access styles on a different level though - things which may not be supported by CSS directly.
                    //  Will do things more based on the CSS standard where possible, and shifting to use other methods when not possible.

                    this.set('dom.attributes.style', 'width: ' + width + 'px; height: ' + height + 'px;');

                    // Needs to set inline styles.
                }
            }

            if (spec['class']) {
                //this.set('dom.attributes.class', spec['class']);
                this.add_class(spec['class']);
            }

            var context = this._context;
            if (context) {
                if (context.register_control) context.register_control(this);
            } else {
                //console.trace('');
                //throw 'Control requires context'

                // I think the very first Control object's prototype or something that inherits from it does not have
                //  a context at some stage.
            }




            // When content gets added, need to update the relationships.

            // Perhaps change is the better event to use.

            //  And then within the change event there are more details.
            //  Fewer event listeners to add.

            //

            var content = this.get('content');
            content._parent = this;

            // Want to have the list of fields
            //var cc = 0;

            // Want to listen to changes in fields.
            //  Change gets triggered so frequently!

            // Why is the event getting bound too many times?
            //  Have a strange problem, where this event is firing more than expected and more appear bound on the control.

            // Are change events being bubbled?

            // Why is on change setting up so many event handlers?


            // A change event here seems to be creating lots of event handlers on one control.




            // Need to work out why event binding here causes problems, with it seeming to bind lots of events to one control.

            // It will probably be best to do smaller test cases to do with event binding and bubbling,
            //  possibly also browser based cases that will be easier to follow.


            // Onchange here makes it go drastically wrong.
            //  Between page views, event handlers are building up on a control.
            //  Seems like some Data_Objects or Controls may not have contexts applied.



            // The control's onchange event is not working.
            //  It seems like onchange for the content is working though.

            //  On change any of the control fields...
            //   Could create onchange events for each of the control fields automatically.




            /*
            this.on('change', function(e_change) {

                // Change takes place in the collection?
                //  So when an item gets added, it's added to the collection, and the collection changes.
                //  Does the collection have the right context? The collection is initialised as a field.



                //console.log('e_change', e_change);

                // There are very many changes...
                //  It seems like too many change events get reported.
                //   Need to tell the difference between a change of something, and a change to something.
                //   Like an inner control gets replaced with something different, or an inner control has a change happen to it.


                // It looks like changes are bubbling, need to find a way of tracking the initiator of a change event.



                if (e_change.name) {
                    //console.log('e_change.name', e_change.name);


                    if (e_change.name == 'inner_control') {
                        console.log('e_change.bubbled ' + e_change.bubbled);

                        //console.log('that', that);
                        //var my_ctrl_id = that._id();
                        // Controls may not have contexts yet?

                        //console.log('my_ctrl_id', my_ctrl_id);

                        //console.log('e_change', e_change);
                        //console.trace("Here I am!")
                        //cc++;
                    }
                }

                //console.log('change sig ' , jsgui.get_item_sig(e_change));
            })
            */



        }

    },


    'post_init': function (spec) {
        //throw 'stop';
        if (spec && spec.id === true) {
            // get the id from the context.
            //if (t)
            this.set('dom.attributes.id', this._id());

        }
    },

    // Not so sure that css flags will be used.
    //  We have css classes which get manipulated.
    //  Other types of properties won't depend on CSS quite yet.
    //  Will have control fields improved to be more flexible and to carry from the server to the client parameters and behavioural rules.

    /*
    'add_css_flag': function (flag_name) {
        var css_flags = this.get('css_flags');
        //console.log('css_flags ' + stringify(css_flags));

        // Flags that appear in CSS.
        //  Also have some other effect, most likely.

        if (!css_flags.has(flag_name)) {
            css_flags.add(flag_name);
        }


    },
    'remove_css_flag': function (flag_name) {
        var css_flags = this.get('css_flags');
        if (css_flags.has(flag_name)) {
            css_flags.remove(flag_name);
        }

    },
    'has_css_flag': function (flag_name) {
        var css_flags = this.get('css_flags');
        return css_flags.has(flag_name);
    },

    */

    // Maybe consider these part of rendering, move them.
    '_get_amalgamated_style': function (arr_contexts) {
        //console.log('this._.style ' + stringify(this._.style));

        // Do we have style as a field that uses data objects?

        //res = clone(this._.style);
        //that = this;




        // needs to be substantially redone.
        //  I want to keep it simple, and close to the HTML API by default.
        //  There will need to be overrides in various places.

        // Sometimes new elements would need to be put in (maybe into the background)

        //console.log('res ' + stringify(res));
        // OK, needs the style object.

        // Likely to have the style() function.

        /*
    	 * not using contexts at the moment anyway
    	 *
    	$.eac(arr_contexts, function(i, v) {
    		//var cs = that._.cs[v];
    		if (global.page_context && global.page_context.context_style[v]) {
    			//console.log('a) get_amalgamated_style res ' + jsgui.stringify(res));
    			apply_style_to_style(res, global.page_context.context_style[v]);
    			//console.log('b) get_amalgamated_style res ' + jsgui.stringify(res));
    		}
    	});
    	*/
        //return res;

        // Not going to use this._.style.
        //  will have this._icss for inline css




        return clone(this._.style);
    },

    '_get_rendered_inline_css_dict': function () {

        // and does setting the style work right?

        // will refer to an object, will return this._.inline_css_dict.
        //  will render that dict when necessary ---?
        //  amalgamting the styles

        // when changing the style of something - may be overwritten by amalgamated styles?
        //  have an amalgamated style override?

        //var contexts = this.getContexts(),

        var ast = this.get_amalgamated_style()


        //console.log('ast ' + stringify(ast));
        var inline_css_dict = get_inline_css_dict_from_style(ast);

        //console.log('inline_css_dict ' + jsgui.stringify(inline_css_dict));

        return inline_css_dict;
    },


    // Will use less inline style rendering, will make more stylesheet components.
    //  Will also work on tools for making stylesheets and styles.

    // may be how style gets output - could use an output system that makes reference to the page_context.
    //  it is just dom.attributes.style
    /*
    '_get_rendered_inline_css': function () {
        var css_dict = this.get_rendered_inline_css_dict(),
            str_css = '';

        // renders the jsgui styles that have been set to the inline style
        // then renders/copies the CSS inline styles to the inline style

        // will already have a style dict.


    	//if (typeof this.dom.attributes != 'undefined' && typeof this.dom.attributes.style != 'undefined') {
    	//	var da_style_dict = str_get_styles_dict(this.dom.attributes.style);
      //	var nsd = {};
      //	$.extend(true, nsd, da_style_dict,  css_dict);
      //	str_css = styles_dict_to_string(nsd);
    	//};


        // will be a data type that supports ordering / reordering soon.
        var h = this.has('this.dom.attributes._.dict_style');
        // maybe does not have that attribute?
        // they are inline styles (that have been set)

        //console.log('h ' + h);

        if (h) {
            var da_style_dict = h;
            var nsd = {};
            extend(true, nsd, da_style_dict, css_dict);

            //console.log('nsd ' + jsgui.stringify(nsd));

            str_css = styles_dict_to_string(nsd);
        } else {
            //console.log('css_dict ' + jsgui.stringify(css_dict));
            str_css = styles_dict_to_string(css_dict);
        }

        return str_css;
    },
    */

    // likely to be done with an alias
    //  And will be done using the data type system.

    'property_css_transition_duration': function (style_property_name) {
        // this._.s

        // will refer to style properties differently

        if (this.has('_.s.transition')) {
            // look up the css transition in the jsgui style
            //if(this._.s.transition) {
            var tr = this._.s.transition;
            if (tr[style_property_name]) {
                // anything about duration etc?
                var dur = tr[style_property_name][0];
                return dur;
            }
            //}
        }
    },

    // 'ret' function - gets something if possible.
    'has': function (item_name) {
        var arr = item_name.split('.');
        //console.log('arr ' + arr);
        var c = 0,
            l = arr.length;
        var i = this;
        var s;
        while (c < l) {
            s = arr[c];
            //console.log('s ' + s);
            if (typeof i[s] == 'undefined') {
                return false;
            }
            i = i[s];
            c++;
        };
        return i;
    },

    // The Dom attributes could count as fields, and wind up rendering themselves using Get.
    //  Dom attributes likely to be a collection as well, perhaps automatically sorted by name.
    // Could use collection rendering.
    'renderDomAttributes': function () {
        //console.log('renderDomAttributes');

        // Pre-render dom attributes?
        //  To set the dom attributes programmatically according to properties.

        if (this.beforeRenderDomAttributes) {
            this.beforeRenderDomAttributes();
        }

        // Need to set up the data-jsgui-ctrl-fields attribute.
        //  Probably should not be setting it directly.
        //  It's just a string property.
        // The code that I'm currently using is messy and would be better if it were encapsulated.
        //  Just setting a property of a control with another control, on the server, should be enough to get this mechanism operating.
        //  It will be available as a field on the client-side.

        var dom_attrs = this.get('dom.attributes');

        if (!dom_attrs) {
          throw 'expecting dom_attrs';
        } else {
          if (this._ctrl_fields) {
            // go through the control fields, putting together the data attribute that will be persited to the client.

            // need to compose the string.

            var obj_ctrl_fields = {};

            var keys = Object.keys(this._ctrl_fields);
            var key;
            for (var c = 0, l = keys.length; c < l; c++) {
              key = keys[c];
              obj_ctrl_fields[key] = this._ctrl_fields[key]._id();
            }

            //each(this._ctrl_fields, function(ctrl_field, name) {
            //  obj_ctrl_fields[name] = ctrl_field._id();
            //});


            //this.set('dom.attributes.data-jsgui-ctrl-fields', stringify(obj_ctrl_fields).replace(/"/g, "'"));
            // lower level set here?
            dom_attrs.set('data-jsgui-ctrl-fields', stringify(obj_ctrl_fields).replace(/"/g, "'"))


          }

          if (this._fields) {
            // go through the control fields, putting together the data attribute that will be persited to the client.

            // need to compose the string.

            //var obj_fields = {};
            //each(this._ctrl_fields, function(ctrl_field, name) {
            //  obj_ctrl_fields[name] = ctrl_field._id();
            //});

            //this.set('dom.attributes.data-jsgui-fields', stringify({
            //    'num_days': num_days
            //}).replace(/"/g, "[DBL_QT]").replace(/'/g, "[SNG_QT]"));


            //this.set('dom.attributes.data-jsgui-fields', stringify(this._fields).replace(/"/g, "[DBL_QT]").replace(/'/g, "[SNG_QT]"));
            dom_attrs.set('data-jsgui-fields', stringify(this._fields).replace(/"/g, "[DBL_QT]").replace(/'/g, "[SNG_QT]"))

          }
          var arr = [];
          //var arr_dom = dom_attrs._arr;

          //for (var c = 0, l = arr_dom.length; c < l; c++) {
          //  arr.push(' ', c, '="', arr_dom[c], '"');
          //}
          var _ = dom_attrs._;
          var dom_attrs_keys = Object.keys(_);
          //console.log('dom_attrs_keys', dom_attrs_keys);
          //throw 'stop';

          var key, item;
          for (var c = 0, l = dom_attrs_keys.length; c < l; c++) {
            key = dom_attrs_keys[c];
            item = _[key];
            arr.push(' ', key, '="', item, '"');
          }



          //dom_attrs.each(function (i, v) {
          //    arr.push(' ', i, '="', v, '"');
          //});
          return arr.join('');
        }


        // Maintaining a dict, or some data structure of the inline styles will help.






        //res = arr.join('');
        //return res;

    },
    'renderBeginTagToHtml': function () {

        // will be in _.dom.tagName
        //  I think that's why we need the further level properties.

        // dom.style.transform3d.translate3d
        //  these property levels could go quite deep. Want a convenient way of using them without having to manually code lots of
        //  iterations, nested existance checks. Could have shortcuts so it knows what dom.translate3d means.
        // do we have 'get'?
        //var dom = this.get('dom');
        //var tagName = this.get('dom.tagName'),
        var tagName = this._.dom._.tagName;
        //console.log('this._.dom', this._.dom._.attributes);

        //console.log('tagName', tagName);
            res;

        if (tagName === false) {
            res = '';
        } else {

            //var dom_attributes = this.renderDomAttributes();
            res = ['<', tagName, this.renderDomAttributes(), '>'].join('');
        }
        //var res = ['<', this._.tagName, this.renderDomAttributes(), '>'].join('');

        //console.log('renderBeginTagToHtml res ' + res);
        return res;
    },
    'renderEndTagToHtml': function () {
        // will have different way of referring to the tagName, but that could be a shortcut.
        // dom.tagName();
        //  through the fields system.
        var dom = this.get('dom');
        var tagName = dom.get('tagName'),
            res;

        var noClosingTag = dom.get('noClosingTag');

        //console.log(tof(noClosingTag));
        //throw 'stop';

        if (tagName === false || noClosingTag) {
            res = '';
        } else {
            res = ['</', tagName, '>'].join('');
        }

        //console.log('renderBeginTagToHtml res ' + res);
        return res;
    },
    'renderHtmlAppendment': function () {
        return this.htmlAppendment || '';
    },

    // not rendering a jQuery object....
    // content including the tags? Not for the moment. Tags being false means there are no tags, and this tagless control acts as a container for other
    //  controls or content.
    // That will be useful for having different insertion points in controls without having to have them enclosed by an HTML element.

    'renderEmptyNodeJqo': function () {
        return [this.renderBeginTagToHtml(), this.renderEndTagToHtml(), this.renderHtmlAppendment()].join('');
    },

    // Need to implement deferred rendering.
    //  Some controls will ge ttheir data from a Resource / from Resources.
    //  This means the data is available to them asyncronously.
    //  The control will not be ready to render immediately.

    // For example, a control shows the records in a DB table. This is done through accessing a Resource.
    //  The control will not be ready to render until it has loaded the data from the Resource.

    // I think some kind of 'status' in the Control would make sense.
    //  Assumed to be ready, but could have .__status = 'waiting'
    // Could hold more info about waiting and timing?

    // For the moment, just need to be able to delay rendering a control until all subcontrols are ready.

    // Will go through the control tree like with rendering, noting down any that are not ready, and subscribing to their ready events.
    //  We count down the number yet to be ready, when that is 0 we do the rendering like normal, except returning the result asyncronously.


    'iterate_this_and_subcontrols': function(ctrl_callback) {
        ctrl_callback(this);

        var content = this.get('content');
        var that = this;

        content.each(function(i, v) {
            //console.log('v', v);

            tv = tof(v);
            if (tv == 'string') {
                // escape the string.

                //var output = jsgui.output_processors['string'](n);
                //res.push(output);
                //res.push(jsgui.output_processors['string'](n));

            }
            /*
            if (tof(n) == 'string') {
                // escape the string.

                var output = jsgui.output_processors['string'](n);
                res.push(output);

            }
            */
            if (tv == 'data_value') {
                //var output = jsgui.output_processors['string'](n.get());
                //res.push(jsgui.output_processors['string'](n.get()));
            } else {
                //htm = n.all_html_render();
                //res.push(n.all_html_render());

                // it should not be null, but can ignore it for the moment / forever

                if (v && v.iterate_this_and_subcontrols) {
                    v.iterate_this_and_subcontrols.call(v, ctrl_callback);
                }


            }



        });


    },

    // Should now include deferred rendering.

    'all_html_render': function(callback) {

        //console.log('all render callback', tof(callback));
        if (callback) {

            //console.log('deferred rendering');
            //throw 'stop';

            // Get the map of any controls that have __status == 'waiting'.
            var that = this;
            // want to recursively iterate through controls and subconstrols.
            var arr_waiting_controls = [];

            // Worth setting up the listener on this loop?



            this.iterate_this_and_subcontrols(function(control) {
                if (control.__status == 'waiting') arr_waiting_controls.push(control);
            });

            // then if we are waiting on any of them we listen for them to complete.

            //console.log('arr_waiting_controls.length', arr_waiting_controls.length);

            if (arr_waiting_controls.length == 0) {
                var html = this.all_html_render();
                callback(null, html);
            } else {
                var c = arr_waiting_controls.length;

                var complete = function() {
                    //console.log('complete');
                    that.pre_all_html_render();

                    var dom = that.get('dom');
                    //console.log('dom', dom);

                    if (dom) {
                        // does it have innerHTML?
                        //  I think that will just be a content item that gets rendered anyway.
                        //console.log('has dom');

                        /*

                        var beginning = this.renderBeginTagToHtml();
                        var middle = this.all_html_render_internal_controls();
                        var end = this.renderEndTagToHtml();
                        var appendment = this.renderHtmlAppendment();

                        res = [beginning, middle, end, appendment].join('');
                        */
                        //return [that.renderBeginTagToHtml(), that.all_html_render_internal_controls(), that.renderEndTagToHtml(), that.renderHtmlAppendment()].join('');
                        var html = [that.renderBeginTagToHtml(), that.all_html_render_internal_controls(), that.renderEndTagToHtml(), that.renderHtmlAppendment()].join('');
                        //console.log('html', html);
                        callback(null, html);
                        //throw ('stop');
                    }
                }

                each(arr_waiting_controls, function(control, i) {


                    control.on('ready', function(e_ready) {
                        //console.log('control ready');
                        c--;
                        //console.log('c');
                        if (c == 0) {
                            complete();
                        }

                    });
                });


            }
        } else {
            this.pre_all_html_render();

            var dom = this.get('dom');

            if (dom) {
                // does it have innerHTML?
                //  I think that will just be a content item that gets rendered anyway.
                //console.log('has dom');

                /*

                var beginning = this.renderBeginTagToHtml();
                var middle = this.all_html_render_internal_controls();
                var end = this.renderEndTagToHtml();
                var appendment = this.renderHtmlAppendment();

                res = [beginning, middle, end, appendment].join('');
                */
                return [this.renderBeginTagToHtml(), this.all_html_render_internal_controls(), this.renderEndTagToHtml(), this.renderHtmlAppendment()].join('');
                //throw ('stop');
            }
        }

        //console.log('all_html_render ');
        //if (this.pre_all_html_render) {
        //
        //}


        //return res;
    },



    'render_content': function () {

        //console.log('render_content');

        // it's controls() now, gets the collection of controls.
        //each(this._.controls, function(i, n) {

        //var fields = this.fields();
        //console.log('fields ' + stringify(fields));

        // Some kind of full content?
        //  Content shortcuts?

        // Or have an internal_content property?
        //  Possibility of different places for internal content?
        //   Or not right now?

        // I think an internal_content reference would be best.
        //  or just .internal


        // should be able to get the content... it's a field.
        //  but complications because it's a collection.

        // When adding a string to the collection...

        var content = this.get('content');

        // Does not have content?
        //  That's very strange.

        if (!content.length) {
            console.log('!!!no content length!!!');
            console.log('');
            console.log(this);
            console.log('');
            console.trace();
            console.log('content', content);
            console.log('tof(content) ' + tof(content));
            throw 'stop';
        }

        //console.log('content', content);
        //console.log('tof(content) ' + tof(content));

        // The content should not be a control.
        //  Can't call a part of a control its 'content', as that already exists.
        //  Should be considered a protected word.

        var contentLength = content.length();

        // var res = [];

        var res = new Array(contentLength);

        //console.log('-------------------------');
        //console.log('content ' + stringify(content));
        //console.log('tof(content) ' + tof(content));
        //throw('8) stop');

        /*
    	each(controls._arr, function(i, n) {
            htm = n.all_html_render();
            res.push(htm);
        });
    	*/
        var tn, output;
        //console.log('content', content);

        // content._arr

        var arr = content._arr;
        var c, l = arr.length, n;

        for (c = 0; c < l; c++) {
          n = arr[c];
          // Could use faster duck typing here.
          tn = tof(n);
          if (tn == 'string') {
              // escape the string.
              //var output = jsgui.output_processors['string'](n);
              //res.push(output);
              res.push(jsgui.output_processors['string'](n));
          }
          /*
          if (tof(n) == 'string') {
              // escape the string.

              var output = jsgui.output_processors['string'](n);
              res.push(output);

          }
          */
          if (tn == 'data_value') {
              //var output = jsgui.output_processors['string'](n.get());
              res.push(jsgui.output_processors['string'](n._));
          } else {
              if (tn == 'data_object') {
                  //console.log('n', n);
                  //
                  throw 'stop';
              } else {
                  res.push(n.all_html_render());
              }
              //htm = n.all_html_render();
          }
        }

        /*
        content.each(function (i, n) {
            //console.log('-------------------------');
            //console.log('tof(n) ' + tof(n));
            //console.log('(n) ' + stringify(n));
            //throw 'stop';
            tn = tof(n);
            if (tn == 'string') {
                // escape the string.
                //var output = jsgui.output_processors['string'](n);
                //res.push(output);
                res.push(jsgui.output_processors['string'](n));
            }
            if (tn == 'data_value') {
                //var output = jsgui.output_processors['string'](n.get());
                res.push(jsgui.output_processors['string'](n.get()));
            } else {
                if (tn == 'data_object') {
                    console.log('n', n);
                    //
                    throw 'stop';
                } else {
                    res.push(n.all_html_render());
                }
                //htm = n.all_html_render();
            }
        });
        */

        //console.log('res', res);
        return res.join('');
    },

    'all_html_render_internal_controls': function () {
        //var controls = this.controls, res = [];
        return this.render_content();
    },
    'pre_all_html_render': function () {

    },

    // May happen through Data_Object events as well.

    // bind dom event to normal events?
    //  Be quite explicit in which ones get bound for the moment.

    // Want it so that the dom attributes style gets changed with the css_flags.
    /*

    'bind_dom_event': function (evt_name, evt_handler) {

        // but make this raise a jsgui event too
        var n = this.domNode();

        // this._el?
        if (n) {
            n.addEventListener(evt_name, evt_handler, false);
        }
    },

    'unbind_dom_event': function (evt_name, evt_handler) {

        //jsgui._dom_removeEventListener(dom_node, evt_name, evt_handler, false);
        // jsgui._dom_unbind_event(dom_node, evt_name, evt_handler) - phase assumed, no boolean here, different API.
        // a (jsgui) api outside of the controls.

        var n = this.domNode();
        if (n) {
            n.removeEventListener(evt_name, evt_handler, false);
        }
    },

    // event handling - likely to be moved to DataObject. Controls will still handle events!

    'bind_ctrl_event': function (evt_name, evt_handler) {

        // could use a ll_ensure function...
        //  clearer naming that it's simple.
        //  will compress better.

        //var ceen = this.ensure('_.bound_ctrl_events.' + evt_name, []);
        var ceen = ll_ensure(this, '_.bound_ctrl_events.' + evt_name, []);

        ceen.push(evt_handler);
    },

    'trigger_ctrl_event': function (evt_name) {
        //console.log('trigger_ctrl_event ' + evt_name);

        var a = arr_like_to_arr(arguments),
            p = [];
        if (a.length > 1) {
            p = a.slice(1);
        };
        var ce = this._.bound_ctrl_events,
            that = this;
        //console.log('ce ' + ce);
        if (ce) {
            //console.log('ce[evt_name] ' + ce[evt_name]);
            if (ce[evt_name]) {
                each(ce[evt_name], function (i, v) {
                    v.apply(that, p);
                });
            };
        };
    },
    */

    'compose': function () {

        // I think having this avoids a recursion problem with _super calling itself.
    },

    'wait': function (callback) {
        //console.log('wait');
        setTimeout(function () {
            callback();
        }, 0);
    },
    // could use aliases for style properties.

    'visible': function (callback) {

        //console.log('vis');

        //return this.style('display', 'block', callback);
        this.style('display', 'block', callback);
    },

    // These kind of functions, that set a property to a value, could be made in a more efficient way.

    // have this in a function chain?
    'transparent': function (callback) {
        // make block or inline display, maybe depending on what it was before being made hidden
        //console.log('transp');
        // if display is none then display it.
        //  may have the previous display value stored.
        //return this.style({'opacity': 0}, callback);
        this.style('opacity', 0, callback);
        /*

	this.style({
		'display': 'block',
		'opacity': 0
	});

	if (callback) {
		setTimeout(function() {
			callback();
		}, 0);
	} else {
		return this;
	}
	*/
    },
    'opaque': function (callback) {
        return this.style({
            'opacity': 1
        }, callback);

    },

    // possibly change name
    'chain': function (arr_chain, callback) {
        // each item in the array is a function call (reference) that needs to be executed.
        // assuming the last param in each function is the callback.

        var pos_in_chain = 0;

        //setTimeout()
        var that = this;
        var process_chain = function () {
            //console.log('process_chain arr_chain.length ' + arr_chain.length + ', pos_in_chain ' + pos_in_chain);
            //console.log('arr_chain.length ' + arr_chain.length);
            if (pos_in_chain < arr_chain.length) {
                var item = arr_chain[pos_in_chain];

                // what types can item be
                // an array... that means more than one thing gets applied at this point in the chain.

                var t_item = tof(item);

                //console.log('t_item ' + t_item);
                if (t_item == 'array') {
                    // do more than one item at once.

                    // will wait for them all to be complete too.
                    var count = item.length;
                    var cb = function () {
                        count--;
                        if (count == 0) {
                            //if (callback) {
                            //	callback();
                            //}
                            pos_in_chain++;
                            process_chain();
                        }
                    };
                    each(item, function (i, v) {
                        that.fn_call(v, function () {
                            cb();
                        });
                    });
                    //console.log('arr item ' + stringify(item));
                } else {
                    // for a string I think.
                    // could be a map, and need to call the item(s) in the map.
                    that.fn_call(item, function () {
                        //console.log('cb1');
                        pos_in_chain++;
                        process_chain();
                    });
                }
            } else {
                if (callback) {
                    callback.call(that);
                }
            }
        }
        process_chain();
    },
    'fn_call': function (call, callback) {
        // and callbacks within the right way?
        //console.log('fn_call ' + call);
        var t = tof(call);
        //console.log('t ' + t);
        // but call may be an object...
        var fn, params, that = this;
        if (t == 'string') {
            fn = this[call];
            params = [];
            //console.log('callback ' + callback);
            if (callback) {
                return fn.call(this, callback);
            } else {
                return fn.call(this);
            }
        };
        if (t == 'array') {
            // the 0th item in the arr should be the function name, the rest the params
            // but does the function have a 'callback' param that we know about here? not now.
            fn = this[call[0]];
            params = call.slice(1);
            if (callback) params.push(callback);
            return fn.apply(this, params);
        }
        if (t == 'object') {
            // how many?
            var count = 0;
            each(call, function (i, v) {
                count++;
            });

            each(call, function (i, v) {
                var cb = function () {
                    count--;
                    if (count == 0) {
                        callback.call(that);
                    }
                };
                that.fn_call([i, v], cb);
            });
        }
    },

    // I think .animate syntax would be very helpful.
    //  syntax similar to jQuery but likely to allow more possible options???
    //   more ways of expressing the options.






    // This could probably be defined as an alias.

    // transition -> style.transition
    //  Integrating callbacks with these property changes?
    //  Maybe should not do so much more on compressing & generalizing yet.

    // Horizontal_Carousel_Selector
    //  Or just show these various selectable items in the horizontal carousel.

    // Will maybe make the carousel continuous, so could go from December to January, and it would raise an event
    //  signifying the continuation and direction, so this could make the year change.
    // Would have a horizontal carousel selector for selecting the year, with it continuing.
    //  Could make it a combo selector so the value can be typed in as well. 'J' would bring up 'January', 'June' and 'July' as autoselect items.
    // Putting these GUI features in place will not take so long, and will help this to be a powerful toolkit.

    // May be worth doing more on databases and authentication though.



    'transition': function (value, callback) {
        //var i = {};
        //i[]

        // may include multiple transitions in an array.
        return this.style({
            'transition': value
        }, callback);
    },

    'transit': fp(function (a, sig) {

        // arr_duration_and_timing_function, map_values, callback
        // transit, callback
        //console.log('transit sig ' + sig);
        // [[n,s],o]  a duration with timing function, then a transit map. no callback
        //  what about extracting from the most inner array, so also responding to [[[n,s],o]].
        // seeing that the required thing is inside an array shell.

        // extract_sig_from_array_shell
        var that = this;
        //  [[[n,s],o,],f] including callback function

        // [[[n,s],o]]
        var unshelled_sig = remove_sig_from_arr_shell(sig);
        //if (remove_sig_from_arr_shell(sig))
        //console.log('unshelled_sig ' + unshelled_sig);
        if (unshelled_sig == '[[n,s],o]') {
            return this.transit(a[0][0], a[0][1]);
        }

        if (sig == '[[[n,s],o],f]') {

            var transit = a[0];
            var callback = a[1];

            var duration_and_tf = transit[0];
            var map_values = transit[1];

            this.transit(duration_and_tf, map_values, callback);

        } else if (sig == '[[n,s],o,f]') {
            var duration_and_tf = a[0];
            var map_values = a[1];
            var callback = a[2];
            var transition = {};
            each(map_values, function (i, v) {
                // set the transition style
                transition[i] = duration_and_tf;
            });
            that.transition(transition);

            each(map_values, function (i, v) {
                // set the transition style
                //transition[i] = arr_duration_and_timing_function;

                // use the style function to set the value
                // and use a callback system here for when they are all done.

                that.style(i, v);
            });

            //this.transit(duration_and_tf, map_values, callback);
        } else if (a.length == 2) {
            var duration_and_tf = a[0];
            //console.log('a ' + stringify(a));

            // transit includes the map values

            var duration_and_tf = a[0];
            var map_values = a[1];
            //var transit_map = a[1];
            var transition = {};

            each(map_values, function (i, v) {
                // set the transition style
                transition[i] = duration_and_tf;


            });
            that.transition(transition);

            each(map_values, function (i, v) {
                // set the transition style
                //transition[i] = arr_duration_and_timing_function;

                // use the style function to set the value
                // and use a callback system here for when they are all done.

                that.style(i, v);

            });
            //console.log('transit_map ' + stringify(transit_map));
            //this.transit(duration_and_tf, transit_map);
            //that.transition()
        } // else if (a.length == 3) {
        //	var arr_duration_and_timing_function = a[0], map_values = a[1], callback = a[2];
        //	console.log('a ' + stringify(a));


        //}

    }),

    // and also want to be able to output the property.

    'out': function (property_name) {
        var dti_control = data_type_instance('control');

        //var prop_ref = get_property_reference(this, property_name, false);
        var prop_ref = dti_control.nested_get_property_reference([this, '_'], property_name, true);

        var item_type = prop_ref[2];
        var dti_item = data_type_instance(item_type);

        var out_val = dti_item.output(prop_ref[0][prop_ref[1]]);

        //console.log('out prop_ref ' + stringify(prop_ref));
        //console.log('out out_val ' + stringify(out_val));

        return out_val;
    },

    'page_context': function (val) {
        if (typeof val == 'undefined') {
            // _.page_context should not be a function.

            // how frequently does it need to be called?
            //  is it being called too much?
            //console.log('� this._.page_context ' + this._.page_context);
            if (is_defined(this._.page_context)) {
                return this._.page_context;
            } else {
                if (jsgui.page_context) {
                    return jsgui.page_context;
                }
            }
        } else {
            this._.page_context = val;
        }
    },

    // may change the controls access functions, but seems simple and OK for the moment to wrap them like this.

    // will just be adding to the content.

    'add_control': function (new_content) {
        //var content = this.get('content');


        // The controls array being an ID'd and indexed collection.
        //  Everything in there has an ID.
        //  So needs a page_context.
        //  Seems a little inconvenient.
        //  But will solve the problem for the moment.



        //return content.add(new_content);
        return this.get('content').add(new_content);
    },
    'add': function(new_content) {

        // Will also turn XML strings describing jsgui controls/content into controls/content.

        var tnc = tof(new_content);
        //console.log('control add content tnc', tnc);

        if (tnc == 'array') {
            var res = [], that = this;
            each(new_content, function(i, v) {
                res.push(that.add(v));
            });
            return res;
        } else {
            if (!new_content._context) {
                if (this._context) {
                    new_content._context = this._context;
                }
            }

            /*
            console.log('add context: ' + this._context);
            if (this._context) {
                if (tof(new_content) == 'string') {

                } else {
                    new_content._context = this._context;
                }
            }
            */

            //console.log('pre content add');
            //return content.add(new_content);

            // also, want to set the index of the new_content.
            //  The content could be a string...
            //   no need to set the index then.

            //  If the content is a control, we want to set a property for that control.
            //   Control should know what its parent control is.



            // OK, but does puttint it into that collection automatically set its parent in some way?

            // Maybe listen out for content being added.
            //  So we can do content.add rather than just .add, and it updates the parent and index values.

            // Could check for an inner control.

            // Also could instantiate the content if it is abstract.
            // Also could express content as JSON in some cases.
            //  Possibly could add XML.




            var inner_control = this.get('inner_control');
            //console.log('inner_control', inner_control);

            // Does it add a Data_Object successfully?

            // Could adding this cause content inside the content that's being added to duplicate?

            if (inner_control) {
                return inner_control.get('content').add(new_content);
            } else {
                return this.get('content').add(new_content);
            }



            // then it should know it's been added, and update the DOM.
            //  should render the control to the DOM too.


        }

        //var content = this.get('content');

        // but the context of the new control should be set.

        // Carousel Button
        //  Carousel button Selector
        //  In horizontal mode.

        //throw 'stop';

        // won't need to apply the context automatically... but maybe if the object does not already have one.


        //console.log('post content add');
    },

    'insert_before': function(target) {
        //console.log('target', target);

        //console.log('pre find parent');
        //throw 'stop';

        // The parent of a content Collection being a Control?
        //  Probably makes sense.


        var target_parent = target.parent().parent();

        //console.log('target_parent', target_parent);

        var target_index = target._index;

        //console.log('target_index', target_index);

        // insert into the content collection.

        var content = target_parent.get('content');

        content.insert(this, target_index);

        // An enhanced / activated control needs to listen for content change in particular.





        //console.log('');
        //console.log('target', target);

        // Controls need to better keep track of their index within the parent, and what their parent control is.
        //  Adds a bit of effort to keep track of what the indexes are.
        //  It's worth having the controls stay aware of what their index is where possible.

        // This 'parent' and relationship info could be integral to Data_Objects and Collections, not just Controls.

        //throw 'stop';
    },

    'stringify': function () {
        var res = [];
        res.push('Control(' + stringify(this._) + ')');
        return res.join('');
    },
    'style': fp(function(a, sig) {
        // For the moment, this should be a convenient way of updating the dom attributes style.

        //  This could do the document update or not....

        var style_name, style_value, modify_dom = true;

        if (sig == '[s]') {

            // Best not to refer to the computed styles probably?
            //  Really want to interact with inline styles here.

            // maybe have some syntax for computed styles, such as .style('computed', style_name);
            //  Or just don't have it, get it from the element if needed.




            // Want to get a style value.
            //  This could get fairly complicated when getComputedStyle is not around, in older browsers.

            // May have a system to read through a stylesheet and work out what would get applied to an element

            // For the moment, will look at style of control property (need to develop that more).

            var styleName = a[0];
            console.log('get style ' + styleName);

            var el = this.get('dom.el');

            // Should probably return a copy of the style, not read from the DOM.

            var res = getComputedStyle(el)[styleName];
            return res;


        }


        //console.log('style sig ' + sig);

        if (sig == '[s,s,b]') {
            var styleName = a[0];
            var styleValue = a[1];

            // Modify dom by default if there is a DOM.


            var modifyDom = a[2];

        };

        if (sig == '[s,s]' || sig == '[s,n]') {
            var styleName = a[0];
            var styleValue = a[1];

            // rebuild the css style???
            //  May just be in the dom attributes as well.

            //var das = this._.dom_attributes._.style;
            //console.log('das', das);

            //var da = this._.dom._.attributes;
            //console.log('da', da);




            // Modify dom by default if there is a DOM.
            //var modifyDom = a[2];

        };




        /*
        if (sig == '[s,s,b]') {
            var styleName = a[0];
            var styleValue = a[1];

            // Modify dom by default if there is a DOM.


            var modifyDom = a[2];

            var style = this.get('dom.attributes.style');


           // console.log('style ' + style);

            if (!style) {
                this.set('dom.attributes.style', styleName + ':' + styleValue + ';');
            } else {
                // parse the style attribute

                // can't do such a simple split, need to split in a way that avoids semicolons such as in a url?

                // try semicolon split.

                if (tof(style) == 'data_value') style = style.value();

                var map_style = parse_style_attribute_to_map(style);
                //console.log('map_style ' + stringify(map_style));


                map_style[styleName] = styleValue;

                var str_style = style_attribute_map_to_string(map_style);

                this.set('dom.attributes.style', str_style);


                //throw 'stop';
            }

            // Should modigy the DOM by default I think.
            if (modifyDom) {
                var style = this.get('dom.attributes.style');
                var el = this.get('dom.el');

                if (el) {
                    el.style.cssText = style;
                }
            }

        }
        */

        if (styleName && typeof styleValue !== 'undefined') {
            //var styleName = a[0];
            //var styleValue = a[1];

            // dom.attributes.style - as a normal data_object?
            //  Or a particular type of attribute that is dealt with differently?


            // Need to set the inline css dict

            // will update the dom attributes string from the style?
            //  will set an item in the inline_css_dict

            this._icss[styleName] = styleValue;

            // then rebuild the dom attributes style from that one.

            // produce the inline css from that dict...

            //console.log('styleName', styleName);

            var str_css = '';
            //var first = true;
            each(this._icss, function(item_style_value, item_style_name) {
                //if (!first) {
                //    str_css = str_css + '';
                //}
                str_css = str_css + item_style_name + ':' + item_style_value + ';';
            })
            //console.log('str_css', str_css);


            if (modify_dom) {
                this.set('dom.attributes.style', str_css);
            }

        }
        var that = this;


        if (sig == '[o]') {

            // could recompute the whole style string in a more optimized way.
            //  there could also be a style map, that would help in storing and checking particular styles.



            each(a[0], function(v, i) {
                that.style(i, v, false);
            });

            var style = this.get('dom.attributes.style');

            var el = this.get('dom.el');

            if (el) {
                el.style.cssText = style;
            }


        }


    }),
    'active': function() {
        // only on the server.
        //  Not necessarily!
        //  Perhaps client-side rendering should render the jsgui id. That is really necessary.
        //  However, perhaps should not use active to do this.


        //console.log('');
        //console.log('active');
        var id = this._id();

        //var domAttributes = this.get('dom.attributes');

        //domAttributes.set('data-jsgui-id', id);
        //domAttributes.set('data-jsgui-type', this.__type_name);


        // Longer code version...
        var dom = this._.dom;


        //console.log('this', this);

        var dom_attributes = this._.dom._.attributes;
        if (!dom_attributes) {
          dom_attributes = dom.get('attributes');
          //dom_attributes.set('data-jsgui-id', id);
          //dom_attributes.set('data-jsgui-type', this.__type_name);
          //console.log('dom_attributes', dom_attributes);
          //dom_attributes._['data-jsgui-id'] = new Data_Value({'value': id});
          //dom_attributes._['data-jsgui-type'] = new Data_Value({'value': this.__type_name});
        } else {

        }
        //console.log('dom_attributes', dom_attributes);
        //throw 'stop';
        dom_attributes._['data-jsgui-id'] = new Data_Value({'value': id});
        dom_attributes._['data-jsgui-type'] = new Data_Value({'value': this.__type_name});
        //var el = this._.el || dom._.el;
        var el = dom._.el;
        if (el) {
          //console.log('el', el);
          el.setAttribute('data-jsgui-id', id);
          el.setAttribute('data-jsgui-type', this.__type_name);
        }






        // Then update the DOM?




        // Calls active on the inner controls.

        //

        this.get('content').each(function(i, ctrl) {
            //console.log('active i', i);

            var tCtrl = tof(ctrl);
            //console.log('tCtrl', tCtrl);
            if (tCtrl === 'control') {
                ctrl.active();
            }
        });

        // need to listen to content change.


    },

    // So I think the resource-pool will have a selection scope.
    'find_selection_scope': function() {
        //console.log('find_selection_scope');

        var res = this.get('selection_scope');
        if (res) return res;

        // look at the ancestor...

        var parent = this.get('parent');
        //console.log('parent ' + tof(parent));


        if (parent) return parent.find_selection_scope();

    },


    // This should not just add the listener to the DOM event.
    //  This should listen to the relevant DOM event, and then apply the superclass's function
    //   (meaning it gets raised as a control event).

    // It gets raised as a control event anyway.
    //  If it matches a dom event then it gets raised as a control event when that dom event happens.

    /*

    'add_event_listener': function(event_name, handler) {
        var el = this.get('dom.el');
        if (el) {

            // Check if the element has that event listener...
            //  Maybe maintain a map within the control of which DOM functions have been bound to the element.



            el.addEventListener(event_name, handler, false);
        }
    },
    */



    /*
    '_add_event_listener': fp(function(a, sig) {

        // depending on what the event is, we also bind it to the DOM.
        //  can use addEventListener.

        if (sig == '[s,f]') {
            var event_name = a[0];

            var listener = this.mapListeners[event_name];
            var that = this;

            var el = this.get('dom.el');


            //if (el) {

                // Check if the element has that event listener...
                //  Maybe maintain a map within the control of which DOM functions have been bound to the element.

            //    if (!listener) {
                    // a single listener called when a bound dom event fires.
                    //  this will then split up the event calls to everything that is listening to this.
                    // for the DOM event on the object, we raise the event on the control.

            //        listener = this.mapListeners[event_name] = function(e) {
            //            that.raise(event_name, e);
            //        };
            //        el.addEventListener(event_name, listener, false);

            //    }


                //el.addEventListener(event_name, handler, false);
            //}


            // This causes an infinite loop for some reason.
            //  Maybe when the event takes place....

            Enhanced_Data_Object.prototype.add_event_listener.apply(this, a);


            //this._super.apply(this, a);


            //console.log('html core add_event_listener event_name', event_name);

            // And the base event listener as well?
            //  Does it make an infinite recursive loop when I try?

            //

        }

    }),
    */

    'click': function(handler) {
        // Adding the click event listener... does that add it to the DOM?

        this.add_event_listener('click', handler);
    },
    'hover': function(fn_in, fn_out) {
        this.add_event_listener('mouseover', function(e) {
            //console.log('hover mouseover');
            fn_in();
        })

        this.add_event_listener('mouseout', function(e) {
            //console.log('hover mouseout');
            fn_out();
        })
    },



    'add_class': function(class_name) {
        // Should have already set these up on activation.
        //console.log('Control add_class ' + class_name);
        var cls = this.get('dom.attributes.class');
        //console.log('cls ' + cls);
        var el = this.get('dom.el');

        //console.log('add_class el ' + el);
        if (!cls) {

            this.set('dom.attributes.class', class_name);


            // as well as that, need to have the class in the doc respond to this chaging.
            //  event listener listening for dom changes will update this.

            //if (el) el.className = class_name;

        } else {
            var tCls = tof(cls);
            //console.log('tCls ' + tCls);
            if (tCls == 'object') {
                //cls
                cls[class_name] = true;
                // then get the classes from the obj

                var arr_class = [];
                each(cls, function(i, v) {
                    if (v) arr_class.push(i);
                })
                var str_class = arr_class.join(' ');
                el.className = str_class;
            } else if (tCls == 'data_value') {
                var val = cls.value();

                var arr_classes = val.split(' ');
                var already_has_class = false, l = arr_classes.length, c = 0;
                while (c < l &! already_has_class) {
                    if (arr_classes[c] == class_name) {
                        already_has_class = true;
                    }
                    c++;
                }
                if (!already_has_class) {
                    arr_classes.push(class_name);
                }
                var str_cls = arr_classes.join(' ');
                //console.log('str_cls', str_cls);
                this.set('dom.attributes.class', str_cls);

               //this.add_class(val);
                // And the DOM should update itself when one of these 'model' objects gets changed - depending on if its activated or not.


            } else if (tCls == 'string') {
                var arr_classes = cls.split(' ');
                var already_has_class = false, l = arr_classes.length, c = 0;
                while (c < l &! already_has_class) {
                    if (arr_classes[c] == class_name) {
                        already_has_class = true;
                    }
                    c++;
                }
                if (!already_has_class) {
                    arr_classes.push(class_name);
                }
                var str_cls = arr_classes.join(' ');
                //console.log('str_cls', str_cls);
                this.set('dom.attributes.class', str_cls);
                // And the DOM should update itself when one of these 'model' objects gets changed - depending on if its activated or not.


            }
        }
        //throw 'stop';

    },

    'remove_class': function(class_name) {
        //console.log('remove_class ' + class_name);


        var cls = this.get('dom.attributes.class');
        //console.log('cls ' + stringify(cls));
        var el = this.get('dom.el');
        //console.log('el', el);
        if (cls) {
            var tCls = tof(cls);
            //console.log('tCls', tCls);
            //throw 'stop';
            if (tCls == 'object') {
                //el.

                // go through it again, building the class string...
                var arr_class = [];
                each(cls, function(i, v) {
                    //if (v) arr_class.push(i);
                    if (i == class_name) cls[i] = false;
                    if (cls[i]) arr_class.push(i);
                })
                var str_class = arr_class.join(' ');
                this.set('dom.attributes.class', str_cls);
                //el.className = str_class;

                //console.log('str_class ' + str_class);
            }
            if (tCls == 'string') {
                //console.log('cls', cls);
                var arr_classes = cls.split(' ');
                var arr_res = [];
                var l = arr_classes.length, c = 0;
                //console.log('arr_classes', arr_classes);
                while (c < l) {
                    if (arr_classes[c] != class_name) {
                        //already_has_class = true;
                        arr_res.push(arr_classes[c]);
                    }
                    c++;
                }
                //console.log('arr_res', arr_res);
                var str_cls = arr_res.join(' ');
                //console.log('str_cls ', str_cls);
                this.set('dom.attributes.class', str_cls);

                //console.log('str_cls ' + str_cls);
                //throw 'stop';
            }

            // and if it's a data value, do similar...

            if (tCls == 'data_value') {
                var cls2 = cls.value();

                var arr_classes = cls2.split(' ');
                var arr_res = [];
                var l = arr_classes.length, c = 0;
                //console.log('arr_classes', arr_classes);
                while (c < l) {
                    if (arr_classes[c] != class_name) {
                        //already_has_class = true;
                        arr_res.push(arr_classes[c]);
                    }
                    c++;
                }
                //console.log('arr_res', arr_res);
                var str_cls = arr_res.join(' ');
                //console.log('str_cls ', str_cls);
                this.set('dom.attributes.class', str_cls);

                //console.log('str_cls ' + str_cls);
            }

        }
    },

    'hover_class': function(class_name) {
        // Though this is a behaviour...
        //  could make this work through the behaviour system?
        //  could make the behaviour system work with this.
        //   This one seems fairly simple, lower level than behaviour system.

        // but in the group... when hover_class gets called for the group, it needs to be active on the group....

        // When targeting a group as well...
        //  May need to give groups a bit more thought.

        // But hover_class seems useful at least.


        var that = this;
        that.hover(function(e_in) {
            that.add_class(class_name);
            //ctrl_key_close_quote.add_class(hover_class);
        }, function(e_out) {
            that.remove_class(class_name);
            //ctrl_key_close_quote.remove_class(hover_class);
        })


    },

    'find': function(selector) {

    },
    'children': fp(function(a, sig) {
        var selector;

        if (sig == '[s]') {
            selector = a[0];
        }




    }),

    'matches_selector': function(selector) {

    },

    // Want to see if an element (or control) is a descendant of this.
    //  If this is an ancestor of element or control. is_ancestor_of
    // will go through DOM parent nodes or control parents.

    'is_ancestor_of': function(target) {
        var t_target = tof(target);
        console.log('t_target', t_target);

        var el = this.get('dom.el');

        var inner = function(target2) {

            if (target2 == el) {
                return true;
            }
            var parent = target2.parentNode;
            if (!parent) {
                return false;
            }  else {
                return inner(parent);
            }

        }

        if (t_target == 'object') {
            if (el != target) {
                var parent = target.parentNode;
                if (parent) {
                    return inner(parent);
                }
            }

        }
    },

    'find_selected_ancestor_in_scope': function() {
        // same selection scope
        // is this one already selected?
        // best not to check....

        var s = this.get('selection_scope');


        var parent = this.get('parent');
        //console.log('parent ' + parent);

        var ps = parent.get('selection_scope');

        if (s == ps) {
            // Probably would be much more convenient to get a data value just as its value,
            //  or have a more convenient data value idiom.
            var psel = parent.get('selected');
            if (psel && psel.value && psel.value() == true) {
                //throw 'stop';

                return parent;
            } else {
                return parent.find_selected_ancestor_in_scope();
            }
        }


        //throw 'stop';


    },

    'remove': function() {
        var el = this.get('dom.el');
        if (el) {
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
        }
    },

    'shallow_copy': function() {
        console.log('Control shallow_copy');

        var res = new Control({
            'context': this._context
        });


        // need to get setting of one data object to another correct.
        //  That looks like a lower level piece of functionality that needs attention.

        // For the moment, want to get some kind of shallow copy working.

        //res.set('dom.attributes', this.get('dom.attributes'));

        var da = this.get('dom.attributes');
        var cl = da.get('class');

        console.log('cl ' + stringify(cl));
        console.log('cl ' + tof(cl));

        var map_class_exclude = {
            'bg-light-yellow': true,
            'selected': true
        }

        each(cl, function(i, v) {
            if (i && !map_class_exclude[i]) res.add_class(i);
        })

        var res_content = res.get('content');

        this.get('content').each(function(i, v) {
            console.log('v ' + v);
            //console.log('v ' + stringify(v));
            console.log('tof v ' + tof(v));

            if (tof(v) == 'data_value') {
                res_content.add(v.value());
            } else {
                res_content.add(v.shallow_copy());
            }


        })

        return res;
    },

    // May be good having _size
    //  or _measuredSize
    //  want to measure the control at a suitable time.

    // Should probably be in html-enh instead.

    'size': fp(function(a, sig) {
        //console.log('sig', sig);
        if (sig == '[]') {
            var el = this.get('dom.el');

            var w = parseInt(getStyle(el, 'width'), 10);
            var h = parseInt(getStyle(el, 'height'), 10);
            var res = [w, h];
            return res;
        }
        if (sig == '[a]') {
            // set the size.
            //  will be done through CSS height and width.
            //console.log('a[0]', a[0]);
            this.style({
                'width': a[0][0] + 'px',
                'height': a[0][1] + 'px'
            })

        }

    }),

    'offset': fp(function(a, sig) {
        if (sig == '[]') {
            var el = this.get('dom.el');
            var res = [el.offsetLeft, el.offsetTop];
            return res;
        }
        if (sig == '[a]') {
            this.style({
                'left': a[0] + 'px',
                'top': a[1] + 'px'
            })
        }
    }),

    'clear': function() {
        // clear all the contents.
        // ui should react to the change.

        return this.get('content').clear();

    },

    'activate': function() {
        // Do nothing for basic control I think.
        //  Possibly will be doing some things depending on discovered properties.

        // Need to work more on heirachy in activation.
        //  Want html documents (and pretty much everythin else) to use the enhanced activation.
        //  Should be OK having that in the dependency chain on the server, much of the code won't be called though.

        // Or, enhance the activations of the prototypes?
        //  I'd prefer to have the enhancements become higher up the chain.





    }

    // shallow_copy
    //  would make a copy of the controls and its contents.





    // add event listener...
    //  will be for the dom events.
    // dom.listeners?




    //





});


var p = Control.prototype;
//p._ = p._ || {};
//p._.type_name = 'control';

p._data_generators = {
    'context_id': function () {
        // this is the control
        //  the control should have access to a page_context?

        // Controls on the server are likely to need this for rendering right (different contexts).

        // On the client could refer to jsgui.page_context

        // could refer to jsgui.page_context, if it is there.
        //  Otherwise it would have to be a property of the control.
        //console.log('this.set ' + this.set);
        var page_context = this.page_context();
        var id = page_context.ensure_ctrl_id(this);
        return id;
    },
    'control_collection': function () {
        var res = new jsgui.DataCollection();
        return res;
    }
};

var initializing = false, fnTest = /xyz/.test(function() {
    xyz;
}) ? /\b_super\b/ : /.*/;

Control.prototype._module_jsgui = jsgui;

Control.extend = function(prop, post_init) {
    var _super = this.prototype;
    initializing = true;
    var prototype = new this();
    var for_class = {};
    initializing = false;
    if (typeof prop === 'string') {
        var data_type_name = prop;
        var dtis = jsgui.data_types_info;
        var data_type_info = dtis[data_type_name];
        for_class[data_type_name] = data_type_name;
        for_class[data_type_info] = data_type_info;
        prototype['__type_name'] = data_type_name;
        prototype['__data_type_info'] = data_type_info;
        prop = {};
    }
    var prop_item, t_prop_item, tmp, name, res;
    for (name in prop) {
        prop_item = prop[name];
        if (name.charAt(0) === '#') {
            prototype[name.substring(1)] = prototype[prop_item];
        } else {
            t_prop_item = typeof prop_item;
            if (t_prop_item === 'function') {
                prototype[name] = typeof _super[name] === 'function' && fnTest.test(prop_item) ?
                (function(name, fn) {
                    return function() {
                        tmp = this._super;
                        this._super = _super[name];
                        res = fn.apply(this, arguments);
                        this._super = tmp;
                        return res;
                    };
                })(name, prop[name]) : prop[name];
            } else if (t_prop_item === 'object' || t_prop_item === 'boolean') {
                if (name == 'class_name') {
                    for_class['_class_name'] = prop_item;
                } else if (name == 'fields') {
                    for_class['_fields'] = prop_item;
                } else if (name == 'connect_fields') {
                    for_class['_connect_fields'] = prop_item;
                } else {
                    prototype[name] = prop[name];
                }
            }  else {
                prototype[name] = prop[name];
            }
        };
    };
    var Class = function() {
        if (!initializing) {
            if (this.init) {
                var that = this;
                var the_make_function = function(abstract_control) {
                    // needs to create a real control out of an abstract one.
                   // var instance = new abstract_control

                   //console.log('the make function');
                   //console.log('abstract_control', abstract_control);
                   //console.log('abstract_control.constructor', abstract_control.constructor);

                   var spec = abstract_control._spec;
                   spec.abstract = null;
                   spec._abstract = null;
                   spec.context = that._context;
                   //console.log('that._context', that._context);
                   var instance = new abstract_control.constructor(spec);
                   //throw 'stop';

                   return instance;


                };

                var the_add_function = function(abstract_control) {
                    var instance = the_make_function(abstract_control);
                    return that.add(instance);
                }

                var l = arguments.length;
                var a2 = new Array(l + 2);
                for (var c = 0; c < l; c++) {
                    a2[c] = arguments[c];
                }
                a2[l] = the_add_function;
                a2[l + 1] = the_make_function;

                this.init.apply(this, a2);
                if (this.post_init) {
                    //this.post_init();
                    this.post_init.apply(this, arguments);
                }
                if (post_init) {
                    post_init.call(this);
                }
            } else {
                var spec = arguments[0] || {};
                spec.abstract = true;
                return new Class(spec);
            }
        }
    };
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.extend = arguments.callee;
    for (i in for_class) {
        Class[i] = for_class[i];
    }
    if (Class['class_name']) {
        jsgui.map_classes[Class['class_name']] = Class;
    }
    Class._superclass = this;
    return Class;
};



// function to set up access functions on a prototype?
//  aliases?
//  access functions in particular here.

// Need to do more about rebuilding the framework with the new property system.
//  Will have encapsulated a lot into lang from html, making things easier here.

// lang/prototype_access

// Likely to be changed through use of the Data_Object

// Do we have a style variable?

var prototype_access = function (p, variable_name, fn_name) {

    p[fn_name] = fp(function (a) {

        //console.log('this. ' + stringify(this._));

        if (a.l == 1) {
            //var val = a[0];
            return this.set(variable_name, a[0]);
        } else {
            return this.get(variable_name);
        }
    });
}

var p = Control.prototype;

// This system works quite nicely now.
//  Allows simple functional access to these properties.

// prototype_access(p, 'index', 'index');
//prototype_access(p, 'id', 'id');
prototype_access(p, 'dom.tagName', 'tagName');
prototype_access(p, 'dom.attributes', 'domAttributes');
//prototype_access(p, 'controls', 'controls');


//prototype_access(p, 'style', 'style');

// access to the dom node as well.

// domAttributes

//p._tag_name = 'div';

var map_Controls = {};



//jsgui = {};
//jsgui.Core = Core;






// Own tof function for this section that checks instanceOf Control.

/*
var old_tof = jsgui.tof;

jsgui.tof = function (obj) {
    var res = old_tof(obj);
    if (obj instanceof Control) res = 'control';
    return res;

};
*/

// Also need to get this loading (automatically) as a client-side component.



// make it so that there is head.title(),
// also title() method for a basic HTML document.

// these should support text inside them.
// the 'text' property could do something different for different things.

// text_property('div span h1 h2')
// a property that represents a textNode inside.

// text property - will work as a property called text.
//  however, when the text has been set/changed, it changes text in a textNode.
// This text property should be a convenient interface to that text node.

// I think that means we need a textNode.

// Will have a dom.nodeType property.
//  Most things will be 1 (element)
//  Attribute node 2
//  Text node 3

// The properties indeed have greatly shortened this code.
//  Likely to put the new property system into the full library when more fully defined.
//  Or likely to put the full lib's capabilities into this, a new version of it?

// The new property system looks set to save on a lot of code. So much of the code is currently dealing with the mechanics of property values.

// Again, will change through use of the Data_Object
// and the control init function?
//  it's call

var ctrl_init = Control.prototype.init;
var ctrl_init_call = Control.prototype.init.call;

var escape_html_replacements = [
        [/&/g, '&amp;'],
        [/</g, '&lt;'],
        [/>/g, '&gt;'],
        [/"/g, '&quot;'], //"
        [/'/g, '&#x27;'], //'
        [/\//g, '&#x2F;']
    ];
//var single_replacement;

var escape_html = function (str) {

    //console.log('tof(str) ' + tof(str));

    //console.log('escape_html str ' + str);
    //console.log('tof str ' + tof(str));


    if (tof(str) === 'data_value') str = str.get();
    if (tof(str) === 'number') str = str + '';

    //console.log('tof(str)', tof(str));

    if (typeof str === 'undefined') {
      str = '';
    } else {
      var single_replacement;
      for (var c = 0, l = escape_html_replacements.length; c < l; c++) {
          single_replacement = escape_html_replacements[c]
          str = str.replace(single_replacement[0], single_replacement[1]);
      }
    }

    //

    // str.replace(/microsoft/gi, "W3Schools")
    /*
    var res = str.replace(/&/g, '&amp;');
    res = res.replace(/</g, '&lt;');
    res = res.replace(/>/g, '&gt;');
    res = res.replace(/"/g, '&quot;');
    res = res.replace(/'/g, '&#x27;');
    res = res.replace(/\//g, '&#x2F;');
    */

    //var replacements =

    //each(escape_html_replacements, function (i, v) {
    //    str = str.replace(v[0], v[1]);
    //});

    return str;
};


jsgui.textNode = Control.extend({
    'init': function (spec) {


        spec = spec || {};
        this._super(spec);

        if (typeof spec == 'string') {
            //this._.text = spec;
            //this.innerHtml = spec;
            spec = {
                'text': spec
            };
        }

        spec.nodeType = 3;
        //this.ensure('_');

        /*
  	if (spec.text) {
		this._.text = spec.text;
		//this.innerHtml = spec.text;
		spec = {};
	}
  	*/
        //this.no_escape = spec.no_escape || false;
        // another property from the spec? I think this property could fit in with an MVC (or MMVC) pattern where changes lead to updates in the HTML without
        // needing much programming for each change. 2/3 of this class could be removed if using different OO.

        /*
  	if (spec.no_escape) {
  		this.ensure('_');
  		this._.no_escape = spec.no_escape;
  	}
  	*/
        //ctrl_init_call(this, spec);

        //this._super(spec);

        if (typeof spec.text != 'undefined') {
            this._.text = spec.text;
        }

        //this.typeName = pr.typeName;
        //this.tagName = 'p';

    },
    // will use a no-escape property.
    /*
  'no_escape': fp(function(a, sig) {
  	if (a.l == 0) {
  		return this.ret('_.no_escape');
  	}
  	if (a.l == 1) {
  		this.ensure('_');
  		this._.no_escape = a[0];
  	}
  }),
  */
    'all_html_render': function () {
        // need to escape the HTML it outputs.



        //var text = this._.text || '';
        var text = this.get('text');
        // These get and set operations should not rely on the page_context.

        //console.log('text ' + text);

        var nx = this.get('no_escape');


        //console.log('nx ' + nx);

        if (nx) {
            res = text || '';
        } else {
            //console.log('text', text);
            res = escape_html(text || '') || '';
        }

        return res;
    }
    /*,

    // will have a text property.

    'text': function(text) {
    	// need to update the text in the dom.
    	this._.text = text;
    	// use jQuery for this?
    	// or DOM?
    	// not sure jQuery handles text nodes directly so well.

    	// is there this.$?

    	// do these text nodes get recreated?
    	//  they can't have the jsgui expando like elements.

    	// can not so easily get this text node activated on the client.

    	//  what about the ability to get / identify text nodes from their parent?
    	//  so that a parent could be told what active text node it contains.

    	// can tell a span control to change the text it contains.

    	//.text_nodes(0).text...
    	//  having a ctrl keep track of any text nodes inside them
    	//   modelling them, having controls.
    	//   however, don't want lots of complications.



    	// just innerHTML?

    }
    */
});



// And there is some client code that loads the necessary jsgui tools and then activates all the controls in the DOM.
//  Will do a DOM traverse, except start with the deepest nested elements.
//   Then it will be able to find controls inside controls.
//   A lot of elements will have JSGUI IDs.
//    But some things could be inferred to be controls because they follow a pattern.


// Page_Context needs a new_id method.


// I think some of this should be in Client_Page_Context
//  Perhaps Page_Context in its own module.

// Should this only be in enhanced?
//  So it creates enhanced controls?
//   Will that be OK for the server page context?


// Maybe should not need to get browser info yet? Keep it general???
// Perhaps there will be html-client.
//  Will have the ctrls_by_id? The page_context.
// Activating existing DOM nodes is easy enough without this activation system - just needs code to do it.
//  But having the nodes created on the server, then sent to the client - requires the JSGUI IDs or other reconstruction code.
// This does seem almost done for many uses - want to polish it though.
// Want to make a blog site fairly soon.

// Also a system for displaying content and programming snippets.
// Much of it would be server side, not needing client side activation.
//  Login could use it for enhancement.

// Can set the data_object constructor for boolean...
//  and it is a Data_Value.

// Seems like it should be within a client side page context.

// Do this within the Page_Context.
/*
var map_controls_by_type = {};


var update_ctrl_lookup = fp(function(a, sig) {
    console.log('update_ctrl_lookup sig ' + sig);
    var Module;
    if (a.l == 1) {
        Module = a[0];
        each(Module, function(ctrl_name, Ctrl) {
            console.log('ctrl_name ' + ctrl_name);
            var lName = ctrl_name.toLowerCase();
            map_controls_by_type[lName] = Ctrl;
            console.log('** map_controls_by_type ' + JSON.stringify(map_controls_by_type));
        })
    }

    if (sig == '[s,f]') {
        var name = a[0];
        var Ctrl = a[1];
        map_controls_by_type[name] = Ctrl;
    }
    console.log('* map_controls_by_type ' + JSON.stringify(map_controls_by_type));

});
*/


// Maybe the jsgui page context will be the key to getting this running on the client.
//  Could package some things as jquery plugins. Maybe have a standalone build of jsgui.



// Perhaps it will be context.activate?


// context.activate?
//  that may work better.

// Need more generalised recursive dom activation.
//  When activating a control recursively, need to go through all of the sub-elements
//   activate them from the inside.



var shallow_copy = fp(function(a, sig) {
    if (sig == '[a]') {
        var arr_ctrls = a[0];

        var res = [];
        each(arr_ctrls, function(i, v) {
            res.push(v.shallow_copy());
        });
        return res;
    }
});

var constructor_from_type = function(type) {
    console.log('constructor_from_type type ' + type);
    console.log('map_controls_by_type ' + stringify(map_controls_by_type));
}
//

jsgui = jsgui.extend(jsgui, {
    'get_inline_css_dict_from_style': get_inline_css_dict_from_style,
    'apply_jsgui_style_rule_to_css_style': apply_jsgui_style_rule_to_css_style,
    'styles_dict_to_string': styles_dict_to_string,
    'Control': Control,
    //'Page_Context': Page_Context,
    //'Blank_HTML_Document': Blank_HTML_Document,
    //'Client_HTML_Document': Client_HTML_Document,
    //'recursive_dom_iterate': recursive_dom_iterate,
    'map_Controls': map_Controls,
    //'update_ctrl_lookup': update_ctrl_lookup,
    //'activate': activate,
    'shallow_copy': shallow_copy
    //'constructor_from_type': constructor_from_type,
    //'map_controls_by_type': map_controls_by_type
});
//alert('2 ' + jsgui);
//return jsgui;
module.exports = jsgui;

},{"../core/jsgui-lang-enh":37}],71:[function(require,module,exports){
//if (typeof define !== 'function') {
//    var define = require('amdefine')(module);
//};

// Needs a general Page_Context

// so enh includes the page_context?

// Really not sure about where in the heirachy the Page_Context is. Many controls need it.

// May be easier if these enhancements did away with the page context. May need to work on the server too.

// However, this I think was intended only for the client anyway.

// Handle circular dependencies...


var jsgui = require('./jsgui-html-core');

// don't think this can have context menu so easily here.
//var Context_Menu = require('./controls/advanced/context-menu');

var stringify = jsgui.stringify, each = jsgui.eac, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;
var Selection_Scope = require('./selection-scope');
var fp = jsgui.fp;
var group = jsgui.group;
var str_arr_mapify = jsgui.str_arr_mapify;
var map_Controls = jsgui.map_Controls;
var extend = jsgui.extend;
var is_ctrl = jsgui.is_ctrl;

//var Context_Menu;

// Don't include context-menu in enh...
//  Or find a different way to include it
//  Have different enh-levels, eg most of it is enh-1
//  then context-menu is in enh-2.
//  html-enh contains both 1 and 2, and future levels if they are made.


// Don't like what follows - it's tricky. May make it hard to recompile / build the code.
//  And would be unnecessary when the context menu has been localised.


var hover_class = fp(function(a, sig) {
    //console.log('hover_class sig ' + sig);
    if (sig == '[c,s]') {
        var ctrl = a[0];
        var hover_class = a[1];
        ctrl.hover(function(e_in) {
            ctrl.add_class(hover_class);
        }, function(e_out) {
            ctrl.remove_class(hover_class);
        });
    }
});

// this is the enhanced HTML module.

var group_hover_class = fp(function(a, sig) {
    // Could possibly recategorise into having an array if the sig as a bunch of objects of one type and then
    //  a string.

    //poly2(a, sig);

    if (sig == '[a,s]') {
        // An array of items to put into the group.

        var res = group(a[0]);
        //console.log('res ' + tof(res));

        var hover_class = a[1];
        res.hover(function(e_in) {
            res.add_class(hover_class);
        }, function(e_out) {
            res.remove_class(hover_class);
        })

        return res;
    }

});


var get_window_size = function() {
    var winW, winH;
    if (document.body && document.body.offsetWidth) {
        winW = document.body.offsetWidth;
        winH = document.body.offsetHeight;
    }
    if (document.compatMode=='CSS1Compat' && document.documentElement && document.documentElement.offsetWidth ) {
        winW = document.documentElement.offsetWidth;
        winH = document.documentElement.offsetHeight;
    }
    if (window.innerWidth && window.innerHeight) {
        winW = window.innerWidth;
        winH = window.innerHeight;
    }
    return [winW, winH];
}


var findPos = function(obj) {
    var curleft = curtop = 0;
    if (obj.offsetParent) {
        do {
            curleft += obj.offsetLeft;
            curtop += obj.offsetTop;
        } while (obj = obj.offsetParent);
        return [curleft,curtop];
    }
}




// Selection_Scope should possibly be in its own module.
//  It will be used by client-page-context as well.




// Some of these will need to get a bit more complex with options, but they will also generally be transferrable among jsgui controls.

// The outermost object will have selection scope
//  That means that within it when there is a deselect_all command it deselects within that scope.

// We could have an enhanced control too.

// Perhaps replace the basic control in this case, so an upgraded control is always used.
//  Would have more functionality to do with windows, setting up a control so that it's a window, with docking capability.

// Perhaps more client-side capabilities should be here, like activate.

var mapDomEventNames = {
    'change': true,

    'click': true,
    'mousedown': true,
    'mouseup': true,
    'mousemove': true,
    'mouseover': true,
    'mouseout': true,
    'blur': true,
    'focus': true,
    'keydown': true,
    'keyup': true,
    'keypress': true,
    'contextmenu': true,

    'touchstart': true,
    'touchmove': true,
    'touchend': true,

    'abort': true,
    'canplay': true,
    'canplaythrough': true,
    'durationchange': true,
    'emptied': true,
    'ended': true,
    'error': true,
    'loadeddata': true,
    'loadedmetadata': true,
    'loadstart': true,
    'pause': true,
    'play': true,
    'playing': true,
    'progress': true,
    'ratechange': true,
    'seeked': true,
    'seeking': true,
    'stalled': true,
    'suspend': true,
    'timeupdate': true,
    'volumechange': true,
    'waiting': true

};


//var t_content;
var desc = function(ctrl, callback) {
  if (ctrl.get) {


    var content = ctrl.get('content');
    //console.log('content', content);
    var t_content = typeof content;
    //console.log('t_content', t_content);

    if (t_content === 'string' || t_content === 'number') {

    } else {
      // it's a Collection

      var arr = content._arr;
      var c, l = arr.length;

      //console.log('l', l);
      var item, t_item;

      for (c = 0; c < l; c++) {
        item = arr[c];
        t_item = typeof item;
        if (t_item === 'string' || t_item === 'numbers') {

        } else {
          callback(arr[c]);
          desc(arr[c], callback);
        }



      }




    }


      /*
      var content = ctrl.get('content');
      console.log('content', content);
      each(content, function(v, i) {
          if (typeof i !== 'string') {
              callback(v);
              desc(v, callback);
          }
      });
      */

  }
}

var dom_desc = function(el, callback) {
  // Possibly need to look at the element's node type.

  //
  callback(el);

  var cns = el.childNodes;

  var l = cns.length;

  for (var c = 0; c < l; c++) {
    dom_desc(cns[c], callback);

  }


}


Control = jsgui.Control = jsgui.Control.extend({
    'fields': {
        'selection_scope': Object,
        'is_selectable': Boolean
    },

    'init': function(spec) {
        // The enhanced control can look at the element for data-jsgui-fields
        //  Those fields will be fed back into the initialization.


        if (spec.el) {
          var jgf = spec.el.getAttribute('data-jsgui-fields');

          if (jgf) {

            //console.log('str_ctrl_fields ' + str_ctrl_fields);
            //console.log('str_properties', str_properties);
            //var s_pre_parse = str_properties.replace(/'/g, '"').replace(/♥/g, '\'').replace(/☺/g, '"');
            var s_pre_parse = jgf.replace(/\[DBL_QT\]/g, '"').replace(/\[SNG_QT\]/g, '\'');
            s_pre_parse = s_pre_parse.replace(/\'/g, '"');

            // DBL_QT
            //console.log('s_pre_parse', s_pre_parse);

            //console.log('s_pre_parse', tof(s_pre_parse));

            var props = JSON.parse(s_pre_parse);

            extend(spec, props);
          }

        }


        this._super(spec);

        // Then there may be a selection scope specified.
        //  The selection scope may have been specified as a number

        //console.log('spec.selection_scope', spec.selection_scope);


        if (typeof spec.selection_scope !== 'undefined') {
          //console.log('spec.selection_scope', spec.selection_scope);

          var selection_scope = this._context.get_selection_scope_by_id(spec.selection_scope);
          //  Do we need to set the control of the selection scope?


          this.set('selection_scope', selection_scope);

          // then if we have the selection scope, we should set it up for the control.







        }

        if (spec.is_selectable) {
          this.selectable();
        }



    },

    'bcr': fp(function(a, sig) {
        //console.log('sig', sig);
        if (sig == '[]') {
            var el = this.get('dom.el');


            var bcr = el.getBoundingClientRect();
            var res = [[bcr.left, bcr.top], [bcr.right, bcr.bottom], [bcr.width, bcr.height]];

            return res;
        }

        // However, need to take account of the padding and the class.

        // instead of getting the bcr, we could ge the style('width')?
        //  which would actually get the width style value?

        // Or we could get the bcr, and then subtract the padding as well.

        // ctrl.padding
        //  seems like a useful enhancement syntax to have
        //  would be useful in keeping things in proportion and accounting for the padding.

        // Probably want to be getting the computed style from the browser.
        //  Some info is within CSS and effects things through that.
        //  Sometimes in the JS we need to read from the screen because values have been calculated by the css system.
        //  Want this to be somewhat responsive to the CSS that is written.

        if (sig == '[a]') {
            console.log('bcr sig arr');

            var bcr_def = a[0];
            var pos = bcr_def[0];
            var br_pos = bcr_def[1];
            var size = bcr_def[2];

            // then we actually want to set the css.

            this.style({
                'position': 'absolute',
                'left': pos[0] + 'px',
                'top': pos[1] + 'px',
                'width': size[0] + 'px',
                'height': size[1] + 'px'
            });
            //throw 'stop';
        }
    }),

    'computed_style': fp(function(a, sig) {
        if (sig == '[s]') {
            // Should only work on the client.
            var property_name = a[0];
            var x = this.get('dom.el');
            if (x.currentStyle)
                var y = x.currentStyle[styleProp];
            else if (window.getComputedStyle)
                var y = document.defaultView.getComputedStyle(x,null).getPropertyValue(property_name);
            return y;
        }
    }),

    'padding': fp(function(a, sig) {
        if (sig == '[]') {
            // read the padding.
            //  the computed style is probably what we are after.
            // Perhaps a computed_style function would help too, making the code clearer that this padding function uses that.
            // Perhaps just calling 'style' should get the computed style while it's in the browser.
            //  There would be both the computed properties and the set properties.
            // Perhaps we should always refer to computed style or cstyle
            //  Avoid confusion with the padding property that can be set
            //
            var left, top, right, bottom;

            var c_padding = this.computed_style('padding');
            console.log('c_padding', c_padding);

            var s_c_padding = c_padding.split(' ');
            console.log('s_c_padding.length', s_c_padding.length);

            if (s_c_padding.length == 3) {
                // top, right, bottom
                top = parseInt(s_c_padding[0], 10);
                right = parseInt(s_c_padding[1], 10);
                bottom = parseInt(s_c_padding[2], 10);
                return [0, top, right, bottom];
            }
        }
    }),

    'border': fp(function(a, sig) {
        if (sig == '[]') {
            // read the padding.
            //  the computed style is probably what we are after.

            // Perhaps a computed_style function would help too, making the code clearer that this padding function uses that.

            // Perhaps just calling 'style' should get the computed style while it's in the browser.
            //  There would be both the computed properties and the set properties.

            // Perhaps we should always refer to computed style or cstyle
            //  Avoid confusion with the padding property that can be set
            //

            var left, top, right, bottom;

            var c_border = this.computed_style('border');
            console.log('c_border', c_border);

            throw 'stop';

            /*

            var s_c_padding = c_padding.split(' ');
            console.log('s_c_padding.length', s_c_padding.length);

            if (s_c_padding.length == 3) {
                // top, right, bottom
                top = parseInt(s_c_padding[0], 10);
                right = parseInt(s_c_padding[1], 10);
                bottom = parseInt(s_c_padding[2], 10);

                // returns as l, t, r, b

                //return [0, top, right, bottom];

                return [0, top, right, bottom];

            }
            */





        }
    }),
    'border_thickness': fp(function(a, sig) {
        if (sig == '[]') {
            // read the padding.
            //  the computed style is probably what we are after.

            // Perhaps a computed_style function would help too, making the code clearer that this padding function uses that.

            // Perhaps just calling 'style' should get the computed style while it's in the browser.
            //  There would be both the computed properties and the set properties.

            // Perhaps we should always refer to computed style or cstyle
            //  Avoid confusion with the padding property that can be set
            //

            var left, top, right, bottom;

            var c_border = this.computed_style('border');
            console.log('c_border', c_border);

            //var s_c_border = c_border.split(' ');
            //console.log('s_c_border', s_c_border);

            // Can't really split it by space.
            //  some of the terms in the bracket include a space.
            //  could first do a regex to change ', ' to ','

            var b2 = c_border.split(', ').join('');
            var s_c_border = b2.split(' ');
            console.log('s_c_border', s_c_border);

            // then can get the thickness from the first one.

            var thickness = parseInt(s_c_border[0], 10);

            // the 4 different thicknesses?

            return thickness;


            //throw 'stop';

            /*

             var s_c_padding = c_padding.split(' ');
             console.log('s_c_padding.length', s_c_padding.length);

             if (s_c_padding.length == 3) {
             // top, right, bottom
             top = parseInt(s_c_padding[0], 10);
             right = parseInt(s_c_padding[1], 10);
             bottom = parseInt(s_c_padding[2], 10);

             // returns as l, t, r, b

             //return [0, top, right, bottom];

             return [0, top, right, bottom];

             }
             */





        }
    }),

    'cover': fp(function(a, sig) {
        // Makes a cover to this control.
        //  Relatively positioned div as first child (if it is not there already)
        //  Absolutely positioned within that relative div.

        // insert a new relative div?
        //  relative for layout?





    }),

    'ghost': fp(function(a, sig) {

    }),

    // absolute_ghost_clone
    'absolute_ghost_clone': function() {
        // find out what type the control is...

        // And would either have lower opacity - or be 'ghosted' out with a cover.
        //  Could have an internal cover that takes up the space.
        //  Absolute positioning, measured to take up the internal space.
        //  Would require a relative div inside?
        //  Could create a relative div as the first child.
        //   relative size 0, in the top left, then used for absolute positioning of the cover layer.


        // this.cover
        //  and would get access to the cover control as well.
        //  should be absolutely positioned, and above the other items in the control.

        // this.cover(false);

        // this.ghost()
        //  makes a ghost cover.











        var type_name = this.__type_name;
        var id = this._id();
        var context = this._context;

        // spin up a new control, using they type of controls.

        console.log('context', context);

        var ctrl_document = context.ctrl_document;

        console.log('ctrl_document', ctrl_document);
        console.log('type_name', type_name);

        var Cstr = context.map_Controls[type_name];
        console.log('Cstr', Cstr);

        // We can create a new one, with a new ID.

        var new_id = id + '_clone';
        var map_controls = context.map_controls;

        // Want the body control as well.



        if (!map_controls[new_id]) {
            // create it.

            var new_ctrl = new Cstr({
                'context': context,
                'id': new_id
            })

            console.log('new_ctrl', new_ctrl);

            //var body = ctrl_document.body();

            var body = ctrl_document.content().get(1);

            var css_class = this.get('dom.attributes.class');
            new_ctrl.set('dom.attributes.class', css_class);

            // Should copy the controls inside the one being cloned.
            var my_contents = this.get('content');

            // should be able to clone a Data_Value too.



            each(my_contents, function(v, i) {
                console.log('i', i);
                console.log('v', v);

                // Adding a Data_Value not working?

                var v_clone = v.clone();
                console.log('v_clone', v_clone);

                // could get the value if it's a Data_Value for the moment...
                //  Adding a Data_Value to a

                //if (v_clone.value) {
                if (v_clone instanceof jsgui.Data_Value) {
                    new_ctrl.add(v_clone.value());
                } else {
                    new_ctrl.add(v_clone);
                }



            })

            console.log('this', this);

            // could get the computed width?

            // computed padding too?



            var my_bcr = this.bcr();


            console.log('my_bcr', my_bcr);

            // and get the border thickness too.
            //  may be a bit more complex getting them all
            //  and making sure it works in all browsers.







            var my_padding = this.padding();
            console.log('my_padding', my_padding);

            my_bcr[2][0] = my_bcr[2][0] - my_padding[0];
            my_bcr[2][1] = my_bcr[2][1] - my_padding[1];
            my_bcr[2][0] = my_bcr[2][0] - my_padding[2];
            my_bcr[2][1] = my_bcr[2][1] - my_padding[3];



            //var my_border = this.border();
            //console.log('my_border', my_border);

            var my_border_thickness = this.border_thickness();

            console.log('my_border_thickness', my_border_thickness);


            var t_my_border_thickness = tof(my_border_thickness);

            if (t_my_border_thickness == 'number') {
                my_bcr[2][0] = my_bcr[2][0] - 2 * my_border_thickness;
                my_bcr[2][1] = my_bcr[2][1] - 2 * my_border_thickness;

            }

            // Not sure how the border would be reported in a bunch of different browsers or border values

            // could be '1px solid rgb(221, 221, 221)'
            // could have regexes testing for various borders and getting the values back from them.

            //  so we know the thickness of the individual left, top, right, bottom because we get them all at once.







            // and subtract the padding.



            // and use the bcr values to set the position and size of the new control.

            // .bounds?
            //   sets the position (screen location) and the size?
            //   gets the bounding client rect?



            new_ctrl.bcr(my_bcr);




            console.log('new_ctrl', new_ctrl);





            //throw 'stop';

            // need to make the new control absolute







            //ctrl_document.body().add(new_ctrl);
            body.add(new_ctrl);

            var new_el = new_ctrl.get('dom.el');
            console.log('new_el', new_el);


            //throw 'stop';

        }









        //throw 'stop';





    },

    /*

    'create_ghost_copy': function() {
        // Needs to clone the control, and put it into the body.

        // May need to do some in-depth work on cloning a control.
        //  Don't want to complicate the code too much though.
        //  Could just add the HTML from inside the other one.

        var ghost_copy = new Control({
            'context': this._context
        });

        var el = this.get('dom.el');

        // Can't reuse IDs
        //  I think we need a means of cloning controls (properly).
        //  Need to run a clone procedure on the Control and its subcontrols.
        //  Would make a clone within the same context but it would get a new ID.






        if (el) {
            //ghost_copy.add(el.innerHTML)

            var my_clone = this.clone();

            // then put the clone in the body.

            var body = this._context.body();
            body.add(my_clone);
        }


    },
    */

    // can have different monomorphic versions.

    'set': function(name, value) {
      // Used for setting controls, on the server, that get persisted to the client.

      // when the value is a control, we also want to set the ._jsgui_ctrl_fields



      if (typeof value !== 'undefined') {
          //var t_val = tof(value);
          //console.log('t_val', t_val);

          if (is_ctrl(value)) {
              var cf = this._ctrl_fields = this._ctrl_fields || {};

              //extend(cf, {
              //  'btn_single_bound': tb_single_bound,
              //  'btn_dual_bound': tb_dual_bound,
              //  'btn_ga': tb_genetic,
              //  'panel_single_bound': panel_single_bound,
              //  'panel_dual_bound': panel_dual_bound,
              //  'panel_ga': panel_ga
              //});

              cf[name] = value;
          }

        return this._super(name, value);
      } else {
        return this._super(name);
      }




      /*



      */


    },




    'one_mousedown_anywhere': function(callback) {
        //var ctrl_html_root = this._context.ctrl_document;
        //console.log('this._context', this._context);
        var body = this._context.body();

        var that = this;

        body.one('mousedown', function(e_mousedown) {
            // Maybe see if it's internal or external to the control

            // Would be good to have that in the event.

            var el = that.get('dom.el');

            var e_el = e_mousedown.srcElement || e_mousedown.target;





            console.log('one mousedown', e_mousedown);
            console.log('e_el', e_el);

            // Want to see if the element clicked on is a descendant of this's el.

            var iao = that.is_ancestor_of(e_el);
            //console.log('iao', iao);

            e_mousedown.within_this = iao;

            callback(e_mousedown);

        });
    },


    // This may need to search inside for controls to be activated.
    //  Need to get this to work with client-rendered content.


    'activate_recursive': function() {
        console.log('activate_recursive');
        var el = this.get('dom.el');

        var context = this._context;
        var map_controls = context.map_controls;

        var parent_control;

        // does the control have a DOM node?


        recursive_dom_iterate_depth(el, function(el2) {
            //console.log('el ' + el);
            var nt = el2.nodeType;
            //console.log('nt ' + nt);
            if (nt == 1) {
                var jsgui_id = el2.getAttribute('data-jsgui-id');





                //console.log('jsgui_id ' + jsgui_id);
                if (jsgui_id) {


                    // Not so sure the control will exist within a map of controls.
                    //  If we have activated the whole page, then they will exist.
                    //  However, we may just want to do activate on some controls.
                    //throw 'stop';


                    var ctrl = map_controls[jsgui_id];

                    /*
                    if (parent_control) {
                      console.log('setting ctrl parent');
                      ctrl.parent(parent_control);
                    }
                    */

                    //console.log('ctrl ' + ctrl);

                    // don't want to activate twice.

                    // specifically avoid activating twice?


                    //if (el2 != el) {
                    //    //ctrl.activate(el2);
                    //}

                    if (!ctrl.__active) ctrl.activate(el2);
                    //parent_control = ctrl;




                    //console.log('jsgui_type ' + jsgui_type);
                }
            }
        })
    },

    // fp removal candidate

    'add_event_listener': fp(function(a, sig) {

        /*
        var el = this.get('dom.el');
        if (el) {

            // Check if the element has that event listener...
            //  Maybe maintain a map within the control of which DOM functions have been bound to the element.



            el.addEventListener(event_name, handler, false);
        }
        */

        // In enh - with this only working post-activation?

        // see http://www.w3schools.com/tags/ref_av_dom.asp
        /*
        abort	Fires when the loading of an audio/video is aborted
        canplay	Fires when the browser can start playing the audio/video
        canplaythrough	Fires when the browser can play through the audio/video without stopping for buffering
        durationchange	Fires when the duration of the audio/video is changed
        emptied	Fires when the current playlist is empty
        ended	Fires when the current playlist is ended
        error	Fires when an error occurred during the loading of an audio/video
        loadeddata	Fires when the browser has loaded the current frame of the audio/video
        loadedmetadata	Fires when the browser has loaded meta data for the audio/video
        loadstart	Fires when the browser starts looking for the audio/video
        pause	Fires when the audio/video has been paused
        play	Fires when the audio/video has been started or is no longer paused
        playing	Fires when the audio/video is ready to play after having been paused or stopped for buffering
        progress	Fires when the browser is downloading the audio/video
        ratechange	Fires when the playing speed of the audio/video is changed
        seeked	Fires when the user is finished moving/skipping to a new position in the audio/video
        seeking	Fires when the user starts moving/skipping to a new position in the audio/video
        stalled	Fires when the browser is trying to get media data, but data is not available
        suspend	Fires when the browser is intentionally not getting media data
        timeupdate	Fires when the current playback position has changed
        volumechange	Fires when the volume has been changed
        waiting	Fires when the video stops because it needs to buffer the next frame

        abort
        canplay
        canplaythrough
        durationchange
        emptied
        ended
        error
        loadeddata
        loadedmetadata
        loadstart
        pause
        play
        playing
        progress
        ratechange
        seeked
        seeking
        stalled
        suspend
        timeupdate
        volumechange
        waiting
        */




        // So, it should also bind the event to the control, so a listener will hear that.

        // But does this apply itself???
        this._super.apply(this, a);

        // then if it appears in the dom events, attach it.

        if (sig == '[s,f]') {
            var event_name = a[0];

            // change is also a DOM event
            //  that's a tricky one.
            //  should make it easy to listen out for DOM changes.
            // let's include it for the moment.



            if (mapDomEventNames[a[0]]) {
                //console.log('we have a DOM event: ' + event_name);

                var listener = this.mapListeners[event_name];
                var that = this;
                var el = this.get('dom.el');

                //console.log('el' + el);

                if (el) {
                    if (!listener) {
                        // a single listener called when a bound dom event fires.
                        //  this will then split up the event calls to everything that is listening to this.
                        // for the DOM event on the object, we raise the event on the control.

                        listener = this.mapListeners[event_name] = function(e) {
                            //console.log('event_name heard ' + event_name);

                            // Raising an event, there could be multiple listeners.
                            //  would be good to get an array of what the listeners returned.
                            //  Return false here if any of them return false?



                            var res_raise = that.raise(event_name, e);
                            //console.log('res_raise', res_raise);

                            // then if any results are false, we return false.

                            var any_are_false = false;
                            var c = 0, l = res_raise.length;

                            while (!any_are_false && c < l) {
                                if (res_raise[c] === false) {
                                    any_are_false = true;
                                }

                                c++;
                            }

                            //console.log('any_are_false', any_are_false);

                            if (any_are_false) {
                                e.preventDefault();
                                return false;
                            }
                            // Would like to respond to the event.
                            //  Eg if the dom event handler returns false, it would be good to return false in the listener.



                        };
                        el.addEventListener(event_name, listener, false);

                    }
                }
            }
        }
    }),

    // not recursive
    //  maybe call activate_individual?

    //

    'activate': function(el) {

      // Need to prevent activation while it's activating already.
      // For the moment, it would take quite a lot of boilerplate.
      //  Perhaps some functional programming would solve that.

      // Or have an inner activate function. At each level, it calls the inner function if necessary.
      //  A simple function locking system, where it only runs if non-active?

      // could have a non-active function wrapper that only runs the function if the control is non-active.
      //  Only set active to be true on Control.




      //console.log('enh ctrl activate');

      if (!this.__active) {
        this.__active = true;
        if (el) {
            this.set('dom.el', el);
        }

        this.rec_desc_ensure_ctrl_el_refs();

        //console.log('activate ' + this._id());
        // activate content controls.
        //console.log('1) ' + this._.content._arr.length);

        // But have this done before initialization?
        //  Probably want to use some values that have been read in for initialization.
        //   May disable this later, once the data is being read on initialization.
        this.activate_dom_attributes();


        //console.log('2) ' + this._.content._arr.length);

        this.activate_content_controls();
        //console.log('3) ' + this._.content._arr.length);

        // then is there is a selection_scope as true, create a new Selection_Scope object, then set it so that subcontrols point
        //  to it with their selection_scope property.

        // so after the fields have been set up.

        this.activate_content_listen();
        //console.log('4) ' + this._.content._arr.length);

        // Activate style change listen?
        //  Or generally dom attributes change listen?

        this.activate_other_changes_listen();
        //console.log('5) ' + this._.content._arr.length);
      }




    },
    'activate_other_changes_listen': function() {

        /*
        var style = this.get('dom.attributes.style');

        console.log('style', style);

        style.on('change', function(e_change) {
            console.log('style change', e_change);
        })
        */
        var dom_attributes = this.get('dom.attributes');
        //console.log('dom_attributes', dom_attributes);

        var el = this.get('dom.el');

        dom_attributes.on('change', function(e_change) {
            var property_name = e_change.name, dval = e_change.value;

            //console.log('dom_attributes change', property_name, dval);

            /*
            if (property_name == 'style') {
                // need to update it on the element.

                if (tof(dval) == 'string') {
                    el.setAttribute('style', dval);
                } else {
                    el.setAttribute('style', dval.value());
                }
            } else if (property_name == 'class') {
                // need to update it on the element.

                if (tof(dval) == 'string') {
                    el.setAttribute('class', dval);
                } else {
                    el.setAttribute('class', dval.value());
                }
            }
            */

            // I think this works better, 02/05/14

            //console.log('tof(dval)', tof(dval));

            var t_dval = tof(dval);

            if (t_dval == 'string' || t_dval == 'number') {
                //el.setAttribute('style', dval);
            } else {
                //el.setAttribute('style', dval.value());

                dval = dval.value();
            }

            if (el) {
              el.setAttribute(property_name, dval);
            }


        });


    },
    'activate_content_listen': function() {
        //console.log('activate_content_listen');

        var content = this.get('content');

        //console.log('1) content.length()', content.length());

        var that = this;
        var context = this._context;
        var map_controls = context.map_controls;


        content.on('change', function(e_change) {
            //console.log('activated control content change');

            var el = that.get('dom.el');
            var type = e_change.type;

            if (type == 'insert') {
                var item = e_change.item;

                var itemDomEl = item.get('dom.el');

                // need to render the item ID in there too.
                //var id = item._id();

                if (!itemDomEl) {
                  if (context.map_els[item._id()]) {
                    itemDomEl = context.map_els[item._id()];
                  }

                }
                if (!itemDomEl) {
                    var item_tag_name = 'div';
                    var dv_tag_name = item.get('tag_name');
                    if (dv_tag_name) {
                      item_tag_name = dv_tag_name.value();
                    }
                    var temp_el;


                    if (item_tag_name == 'circle' || item_tag_name == 'line' || item_tag_name == 'polyline') {
                        // Can make SVG inside an element, with the right namespace.

                        var temp_svg_container = e_change.item._context.document.createElement('div');
                        temp_svg_container.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">' + e_change.item.all_html_render() + '</svg>';
                        itemDomEl = temp_svg_container.childNodes[0].childNodes[0];
                        //


                    } else {
                        temp_el = e_change.item._context.document.createElement('div');
                        temp_el.innerHTML = e_change.item.all_html_render();
                        itemDomEl = temp_el.childNodes[0];
                    }
                    item._.el = itemDomEl;
                    e_change.item.set('dom.el', itemDomEl);
                    item.active();
                };
                //console.log('itemDomEl', itemDomEl);
                var t_item_dom_el = tof(itemDomEl);

                if (t_item_dom_el === 'string') {
                  itemDomEl = document.createTextNode(itemDomEl);
                }

                //el.insertBefore(itemDomEl, el.childNodes[0]);

                //console.log('item', item);
                //console.log('that', that);


                if (!el) {
                  //console.log('*** that._id()', that._id());
                  that.parent().parent().rec_desc_ensure_ctrl_el_refs();
                  el = context.map_els[that._id()];
                  that.set('dom.el', el);
                  that._.el = el;
                  //console.log('* el', el);
                }


                el.appendChild(itemDomEl);

                // May not have actually gone into the DOM yet!

                //setTimeout(function() {
                //  that.rec_desc_ensure_ctrl_el_refs();
                //  if (item.activate) item.activate();
                //}, 0);




                //if (item.rec_desc_ensure_ctrl_el_refs) item.rec_desc_ensure_ctrl_el_refs(itemDomEl);





            }

            if (type == 'clear') {
                el.innerHTML = '';
            }


        });

        //console.log('2) content.length()', content.length());
    },

    'rec_desc_ensure_ctrl_el_refs': function(el) {
      el = el || this.get('dom.el') || this._.el;

      //if (!el) {
      //  el = this._context.map
      //}

      var context = this._context;


      if (el) {
        var c, l, cns;


        var jsgui_id;

        var map_els = {};

        dom_desc(el, function(el) {
          //console.log('dom_desc el', el);
          if (el.getAttribute) {
            jsgui_id = el.getAttribute('data-jsgui-id');
            //console.log('found jsgui_id', jsgui_id);

            if (jsgui_id) {

              //map_controls[jsgui_id] = el;

              // Make a map of elements...?
              map_els[jsgui_id] = el;
              context.map_els[jsgui_id] = el;

            }

          }

        });

        desc(this, function(ctrl) {
          // ensure the control is registered with the context.
          //console.log('desc ctrl', ctrl);

          var t_ctrl = tof(ctrl);
          //console.log('t_ctrl', t_ctrl);

          if (ctrl !== this && t_ctrl === 'control') {
            var id = ctrl._id();
            //console.log('id', id);

            // Seems like it's not in the map.

            if (map_els[id]) {
              //console.log('map_els[id]', map_els[id]);

              ctrl.set('dom.el', map_els[id]);
              ctrl._.el = map_els[id];
            }



            //ctrl.activate();

          }

        });



      }
    },

    'rec_desc_activate': function() {
      desc(this, function(ctrl) {
        // ensure the control is registered with the context.
        //console.log('desc ctrl', ctrl);

        var t_ctrl = tof(ctrl);

        if (t_ctrl === 'control') {


          ctrl.activate();

        }

      });
    },

    'activate_content_controls': function() {
      // This could do with some enhancement, so that it automatically does a recursive activation.
      // ensure content dom el refs
      //  recursively ensures the DOM node references for the elements inside.
      var el = this.get('dom.el');



      if (el) {
        var context = this._context;

        var ctrl_fields = {};
        var that = this;
        var c, l;

        var my_content = this.get('content');

        var str_ctrl_fields = el.getAttribute('data-jsgui-ctrl-fields');
        if (str_ctrl_fields) {
            //console.log('str_ctrl_fields ' + str_ctrl_fields);
            ctrl_fields = JSON.parse(str_ctrl_fields.replace(/'/g, '"'));

        }

        var ctrl_fields_keys = Object.keys(ctrl_fields);

        var l_ctrl_fields_keys = ctrl_fields_keys.length;
        var key, value;
        for (c = 0; c < l_ctrl_fields_keys; c++) {
          key = ctrl_fields_keys[c];
          value = ctrl_fields[key];

          var referred_to_control = context.map_controls[value];
          //console.log('referred_to_control', referred_to_control);
          that.set(key, referred_to_control);
        }

        //each(ctrl_fields, function(v, i) {
            //fields_ctrl.set(i, v);

            //fields_ctrl[v] = i;
        //    var referred_to_control = context.map_controls[v];
            //console.log('referred_to_control', referred_to_control);
        //    that.set(i, referred_to_control);
        //});


        var cns = el.childNodes;
        var content = this.get('content');
        // Adding the content again?
        //console.log('cns', cns);
        //console.log('cns.length', cns.length);
        for (c = 0, l = cns.length; c < l; c++) {
            var cn = cns[c];

            if (cn) {
              var nt = cn.nodeType;
              //console.log('* nt ' + nt);
              if (nt == 1) {
                  var cn_jsgui_id = cn.getAttribute('data-jsgui-id');
                  //console.log('cn_jsgui_id ' + cn_jsgui_id);
                  var cctrl = context.map_controls[cn_jsgui_id];
                  // quick check to see if the control is not already there.
                  var found = false;
                  if (cctrl) {
                      var ctrl_id = cctrl.__id;
                      //console.log('* ctrl_id', ctrl_id);
                      if (ctrl_id) {
                          content.each(function(v, i) {
                              if (v.__id) {
                                  if (v.__id == ctrl_id) found = true;
                              }
                          });
                      }

                      if (!found) {
                        my_content.add(cctrl);

                      }
                      //cctrl.activate();
                  }
              }
              if (nt == 3) {
                  // text
                  var val = cn.nodeValue;
                  //console.log('val ' + val);
                  content.push(val);

              }
            }

            //console.log('cn', cn);

            // we can get the ctrl reference

        }

      }
      this.rec_desc_activate();
    },

    'activate_dom_attributes': function() {

        // Needs to get the class out of the DOM properly.

        //console.log('activate_dom_attributes');

        var el = this.get('dom.el');

        // may not have el....?
        var that = this;
        var dom_attributes = this.get('dom.attributes');

        if (el) {
          for (var i = 0, attrs = el.attributes, l = attrs.length; i < l; i++){
              //arr.push(attrs.item(i).nodeName);
              var item = attrs.item(i);
              var name = item.name;
              var value = item.value;

              if (name == 'data-jsgui-id') {
                  // Handled elsewhere - not so sure it should be but won't change that right now.
              } else if (name == 'data-jsgui-type') {
                  // ^
              } else if (name == 'style') {

                  var map_inline_css = this._icss;

                  var arr_style_items = value.split(';');
                  //console.log('arr_style_items', arr_style_items);

                  //each(arr_style_items)
                  for (var c = 0, l2 = arr_style_items.length; c < l2; c++) {
                      //map_inline_css[]

                      var style_item = arr_style_items[c];
                      //var style_item_name =
                      var arr_style_item = style_item.split(':');

                      if (arr_style_item[0]) {
                          map_inline_css[arr_style_item[0]] = arr_style_item[1];
                      }
                  }
              //} else if (name == 'data-jsgui-fields') {
                // Should probably rely on using init a lot more now.


              //    var str_properties = value;

              //    if (str_properties) {

              //    }
              } else {
                  // set the dom attributes value... silent set?

                  dom_attributes.set(name, value);
              }
          }
        }
    },
    'hide': function() {
        // set the style to hidden.
        //  Could add a hidden class.

        //  I think a variety of tests on styling would make sense.

        // Want to set styles with easy syntax.

        // ctrl.style(style_name, value);
        //  I think the Control needs to maintain its own dict or data structure of its inline styles.
        //   These could get rendered differently to dom.attributes.style.

        // Or, the dom.sttributes.style gets producted from the jsgui styles that are set.
        //  These styles could also operate a bit differently, or be rendered differently to account for browser differeces.
        // Eg with rounded corners, could use a polyfill for earlier browsers.

        // Will interact with dom.attributes.style.

        // When active, needs to respond to changes in dom.attributes etc
        //  Will need to listen for those changes and re-render as appropriate.


        this.add_class('hidden');
        // Probably needs a lower level index / system of maintaining the classes - think it has one now apr 2014







    },
    'show': function() {
        //console.log('show');

        this.remove_class('hidden');

    },

    'descendants': function(search) {
        // assembles a list of the descendents that match the search
        //  (search by .__type_name)

        // eg get a list of menu_node objects.

        // basically need to recursively go through the descendents, with a callback in here, and see if they match the search.

        // recursive iteration of the control(s)

        var recursive_iterate = function(ctrl, item_callback) {
            // callback on all of the child controls, and then iterate those.
            //console.log('recursive_iterate');
            var content = ctrl.get('content');
            //console.log('content', content);

            var t_content = tof(content);

            //console.log('t_content', t_content);

            if (t_content == 'collection') {
                if (content.length() > 0) {

                    //console.log('content.length()', content.length());
                    // iterate through those child nodes as well.
                    content.each(function(item, i) {
                        //console.log('item', item);
                        item_callback(item);
                        recursive_iterate(item, item_callback);

                    })
                }
            }

        }

        var arr_matching = [];

        recursive_iterate(this, function(item) {
            // see if the item matches the search

            //console.log('cb item', item);
            var item_type = item.__type_name;
            //console.log('item_type', item_type);

            if (item_type == search) {
                arr_matching.push(item);
            } else {
                //return ctrl_parent.ancestor(search);
            }
        });
        //console.log('arr_matching', arr_matching);
        return arr_matching;

    },

    'ancestor': function(search) {
        // could maybe work when not activated too...
        // need to get the ancestor control matching the search (in type).

        if (this._parent) {
            var ctrl_parent = this._parent._parent;
            // the _parent is a Collection within the parent Control

            if (!ctrl_parent) {
                return false;
            } else {

                //console.log('ctrl_parent', ctrl_parent);
                // does the parent match the type?

                var parent_type = ctrl_parent.__type_name;
                //console.log('parent_type', parent_type);

                if (parent_type == search) {
                    return ctrl_parent;
                } else {
                    return ctrl_parent.ancestor(search);
                }



            }
        } else {
            return false;
        }

    },

    'context_menu': fp(function(a, sig) {

        // What to do here depends on the control lifecycle stage.
        //  On the server
        //   Want it to be sent to the client so that it automatically gets activated with that context menu.
        //    Would not be able to call callbacks that get given when the function gets set up.
        //    Would need to have UI responses handled on activation, but at least the menu itself could be set up at an earlier stage.
        //  On the client
        //   Pre-activation
        //    ??Won't do that for the moment. Could maybe raise an error
        //    Set properties so that when it gets activated it knows to activate it with the context menu.
        //   Post/during activation



        // So far, this seems to be for post-activation.
        //  On the server, we want it so that the properties get sent over to the client.
        //   I think that could do with more work.
        //   Making it so that properties in general, and behaviours, can be sent to the client and activated there.

        // It seems like some more generalization is needed in how data gets transferred to the client?
        // There are the fields which get sent, and there are ctrl-fields
        //  Fields get set, however they don't influence behaviours.

        // Mechanism for function calls upon activation.
        //  Possibly behaviours
        //  or jsgui-activate="context_menu(params)"
        //   So actually having function calls there.
        //    Calling functions on the controls upon activation, as specified by parameters on the server.

        // Also, better mechanism for setting fields and ctrl-fields.
        //  Need a bit of behind the scenes processing to make something work between both the server an the clients.
        //  Setting fields and behaviours on the server that determine how it gets activated on the client makes sense.

        // jQuery / CSS like selectors for selecting and finding controls within each other will also make sense.
        //  So for activating controls within another control, it will be fast to find the various controls to be activated.


        // data-jsgui-call-on-activate
        // data-jsgui-activate
        // data-jsgui-call
        //  Functions for it to call on the client.
        //   Interprets the functions, calls them.
        //   So a context menu that's specified on the server could be sent along to the client.

        // Control having extra functionality to add and remove the values that will get sent to the client.
        //  Will have various map objects of data sent to the client (maybe list/array instead?)

        // Dealing with maps of data to be sent to the client.
        //  Need something for rendering this?
        //  Just use the normal dom attributes?

        // Want ways of referring to JSON objects within the DOM attributes.
        //  It sounds like the data type and field systems should handle this where possible.

        //.set('active.context_menu', {...})
        //  So changes to the active field, on the server, cause changes to dom.attributes.jsgui-active

        //.active({'context_menu': {...}})


        var menu_def;
        if (sig == '[o]' || sig == '[a]') {
            menu_def = a[0];
        }

        var Context_Menu = Context_Menu || require('./controls/advanced/context-menu');

        var context_menu;
        var that = this;

        // Need it so that the context menu gets removed when it should.
        //  Any mouseup event causes it to vanish.

        var body = this._context.body();

        //var ctrl_html_root = this._context.ctrl_document;

        //console.log('ctrl_html_root', ctrl_html_root);

        //var body = ctrl_html_root.body();

        var show_context_menu = fp(function(a, sig) {


            var pos;


            if (sig == '[a]') {
                // A position?

                pos = a[0];

            }

            //console.log('show_context_menu pos:', pos);

            //console.log('show_context_menu');

            //console.log('Context_Menu', Context_Menu);
            //console.log('context_menu', context_menu);

            if (!context_menu) {
                //console.log('creating new context menu');

                //console.log('menu_def', menu_def);

                context_menu = new Context_Menu({
                    'context': that._context,
                    'value': menu_def
                });

                if (pos) {
                    context_menu.style({
                        'left': (pos[0] - 1) + 'px',
                        'top': (pos[1] - 1) + 'px'
                    });

                } else {
                    context_menu.style({
                        'left': '100px',
                        'top': '100px'
                    });

                }
                var context = that._context;
            } else {

                if (pos) {
                    context_menu.style({
                        'left': (pos[0] - 1) + 'px',
                        'top': (pos[1] - 1) + 'px'
                    });

                } else {
                    context_menu.style({
                        'left': '100px',
                        'top': '100px'
                    });
                }


            }

            setTimeout(function() {

                body.add(context_menu);

                //console.log('pre activate context_menu._.content._arr.length ' + context_menu._.content._arr.length);

                context_menu.activate();

                context_menu.one_mousedown_anywhere(function(e_mousedown) {
                    //console.log('e_mousedown.within_this ' + e_mousedown.within_this);

                    if (!e_mousedown.within_this) {
                        context_menu.remove();



                    } else {
                        // maybe open a new level.

                        // And need to call the relevant context menu function.

                        console.log('e_mousedown', e_mousedown);

                        var el_target = e_mousedown.target;

                        // the target control will have a jsgui id now.
                        //  we should be able to then go to its parent and get its menu node.

                        var context = that._context;
                        console.log('context', context);

                        var target_id = el_target.getAttribute('data-jsgui-id');
                        console.log('target_id', target_id);

                        var ctrl_target = context.map_controls[target_id];

                        console.log('ctrl_target', ctrl_target);

                        // want to be able to get an ancestor of type menu-node

                        var menu_node = ctrl_target.ancestor('menu_node');
                        console.log('menu_node', menu_node);

                        // and raise the menu_node select event.

                        menu_node.raise('select');

                        context_menu.remove();
                    }


                });

            }, 0);

        });



        // Respond to right clicks only.
        /*
        this.on('click', function(e_click) {
            console.log('e_click', e_click);
        })
        */

        this.on('contextmenu', function(e_contextmenu) {
            //console.log('e_contextmenu', e_contextmenu);
            return false;
            //console.log('e_click', e_click);
        })

        this.on('mousedown', function(e_mousedown) {
            //console.log('e_mousedown', e_mousedown);

            var int_button = e_mousedown.which;

            if (int_button == 3) {
                e_mousedown.preventDefault();
                window.event.returnValue = false;
                return false;
            }
        });

        this.on('mouseup', function(e_mouseup) {
            //console.log('e_mouseup', e_mouseup);

            var int_button = e_mouseup.which;

            if (int_button == 3) {
                console.log('right button');
                e_mouseup.preventDefault();
                window.event.returnValue = false;
                // Need to work out the position of the click.
                // pageX, pageY
                var pos = [e_mouseup.pageX, e_mouseup.pageY];
                show_context_menu(pos);

                return false;
            }
        })


    }),


    // make full height.
    //  makes the control take the rest of the height of the window.

    // Drag function as well...
    //  Could make this accept the same params as the drag function,
    //   but this version will be more flexible with more modes.
    // Drag and drop could also be set up with simpler parameters and acts in the default way that .drag would do.

    'draggable': fp(function(a, sig) {
        var that = this;
        //console.log('draggable sig', sig);

        //console.trace();

        var options = {}, mode, drag_start_distance = 4;

        // options could contain event handlers.
        //  Not sure about the publish / subscribe model.
        //   Maybe it would work well.

        // But allowing event handlers as specified in the options would be good as well.

        var fn_mousedown, fn_dragstart, fn_dragmove, fn_dragend;
        var handle_mousedown, handle_dragstart, handle_dragmove , handle_dragend;


        if (sig == '[o]') {
            options = a[0];
        }

        // fn_mousedown, fn_begin, fn_move, fn_end
        if (sig == '[f,f,f,f]') {
            handle_mousedown = a[0];
            handle_dragstart = a[1];
            handle_dragmove = a[2];
            handle_dragend = a[3];
        }


        if (options.mode) mode = options.mode;
        //if (options.fn_dragmove) fn_dragmove = options.fn_dragmove;
        if (options.move) handle_dragmove = options.move;
        //if (options.fn_dragstart) fn_dragstart = options.fn_dragstart;
        if (options.start) handle_dragstart = options.start;

        // could have a 'none' mode that does not implement drag behaviour itself, but just shows the events?
        //  or I think 'events' mode would be a better name because it's saying what it is.
        //  would be useful for moving objects around according to more specific rules.






        if (mode == 'ghost-copy') {
            // Drag a ghost copy of the original element.

            // call a create_ghost_copy function? It would make the ghost copy absolutely positioned and a child of the body.
            //  could automatically create it with a small offset.

            //  Need to be dragging the ghost copy around throughout the drag operation in this case.

            console.log('ghost-copy drag');




        }

        var body = that._context.body();

        // raise the events externally.

        var is_dragging;
        var pos_mousedown;

        var ghost_clone;





        var fn_mousemove = function(e_mousemove) {
            //console.log('e_mousemove', e_mousemove);

            var pos = [e_mousemove.pageX, e_mousemove.pageY];

            var pos_offset = [pos[0] - pos_mousedown[0], pos[1] - pos_mousedown[1]];



            //console.log('dist', dist);

            //console.log('is_dragging ' + is_dragging);

            if (!is_dragging) {
                var dist = Math.round(Math.sqrt(pos_offset[0] * pos_offset[0] + pos_offset[1] * pos_offset[1]));
                if (dist >= drag_start_distance) {
                    //console.log('starting drag');
                    is_dragging = true;

                    // in ghost copy mode create the ghost copy

                    if (mode == 'ghost-copy') {
                        ghost_clone = that.absolute_ghost_clone();

                    }


                    if (handle_dragstart) {
                        e_mousemove.control = that;

                        handle_dragstart(e_mousemove);
                    }
                }
            }

            if (is_dragging) {
                // raise the drag event.

                // could do some of the drag-drop activity depending on the drag mode.
                //  also want to provide other hooks for functionality.

                //console.log('fn_dragmove', fn_dragmove);

                if (handle_dragmove) {
                    e_mousemove.control = that;
                    handle_dragmove(e_mousemove);
                }

            }



            // Want the offset from the mousedown position.

        }
        var fn_mouseup = function(e_mouseup) {
            //console.log('e_mouseup', e_mouseup);

            //console.log('pre switch off mousemove, mouseup');

            // Seems the events are being added too many times.

            body.off('mousemove', fn_mousemove);
            body.off('mouseup', fn_mouseup);

            body.remove_class('no-text-select');
        }

        this.on('mousedown', function(e_mousedown) {
            //console.log('e_mousedown', e_mousedown);

            pos_mousedown = [e_mousedown.pageX, e_mousedown.pageY];

            // position within Control
            // position within window


            body.on('mousemove', fn_mousemove);
            body.on('mouseup', fn_mouseup);

            body.add_class('no-text-select');
            is_dragging = false;

            if (handle_mousedown) {
                handle_mousedown(e_mousedown);
            }

        })


    }),


    // As well as the 'draggable' function?
    //  Could keep this, and have it call draggable?
    //  Draggable makes more sense, perhaps drag could be an alias for draggable.


    /*
    'drag': function(fn_mousedown, fn_begin, fn_move, fn_end) {

        var screen_down_x, screen_down_y;

        // Want ways of restricting or cancelling a drag.
        var ctrl_html_root = this._context.ctrl_document;


        this.add_event_listener('mousedown', function(e) {
            //console.log('hover mouseover');

            //console.log('drag mousedown ', e);

            screen_down_x = e.screenX;
            screen_down_y = e.screenY;

            //var moved = false;
            var drag_initiated = false;

            fn_mousedown(e);

            var first = true;

            var handle_move = function(e) {

                console.log('handle_move');

                var screen_move_x = e.screenX;
                var screen_move_y = e.screenY;

                var screen_offset_x = screen_move_x - screen_down_x;
                var screen_offset_y = screen_move_y - screen_down_y;

                if (first) {
                    ctrl_html_root.add_class('cursor-default');
                    first = false;
                }

                // Screen movement offset.

                // Anyway, we need the position within the div / element where the mouse went down.
                //  We use that to calculate the position to move the control to, we need to take account of that inital offset.



                // could find the position of the srcElement.

                // that may be better.
                //  then we use the client x and client y properties to determine the offset into the item clicked.



                //console.log('screen_offset_x', screen_offset_x, 'screen_offset_y', screen_offset_y);

                // but we already have an offset property from the event.

                // maybe call our new one a movement offset.



                var e = {
                    'offsetX': screen_offset_x,
                    'offsetY': screen_offset_y,
                    'screenX': screen_move_x,
                    'screenY': screen_move_y,
                    'clientX': e.clientX,
                    'clientY': e.clientY,
                    'pageX': e.pageX,
                    'pageY': e.pageY
                }

                if (!drag_initiated) {

                    //see how far it is...

                    // want to use a function that calculates the magnitude of the distance.

                    var dbp = jsgui.distance_between_points([[0, 0], [screen_offset_x, screen_offset_y]]);

                    //console.log('dbp ' + dbp);

                    // drag_initiation_distance

                    var drag_initiation_distance = 16;
                    if (dbp >= 16) {
                        drag_initiated = true;
                        ctrl_html_root.add_class('dragging');
                        //ctrl_html_root.add_class('cursor-default');

                        fn_begin(e);

                    }


                    // can just use the magnitude of the offset.
                    //  dbp taking just 2 values...




                }

                if (drag_initiated) {
                    fn_move(e);
                }


            }

            var handle_mouseup = function(e) {
                //document.removeEventListener('mousemove', handle_move);
                //document.removeEventListener('mouseup', handle_mouseup);

                ctrl_html_root.off('mousemove', handle_move);
                ctrl_html_root.off('mouseup', handle_mouseup);

                ctrl_html_root.remove_class('dragging');
                ctrl_html_root.remove_class('cursor-default');

                var screen_mouseup_x = e.screenX;
                var screen_mouseup_y = e.screenY;

                var screen_offset_x = screen_mouseup_x - screen_down_x;
                var screen_offset_y = screen_mouseup_y - screen_down_y;

                console.log('screen_offset_x', screen_offset_x, 'screen_offset_y', screen_offset_y);

                var e = {
                    'offsetX': screen_offset_x,
                    'offsetY': screen_offset_y
                }
                fn_end(e);

            }

            ctrl_html_root.on('mousemove', handle_move);
            ctrl_html_root.on('mouseup', handle_mouseup);

            //document.addEventListener('mousemove', handle_move, false);
            //document.addEventListener('mouseup', handle_mouseup, false);


            //fn_in();
        })
    },
    */

    'drag_handle_to': function(ctrl) {
        // Also involved with drag and drop actions.

        // could use the lower level drag(3) function.
        //  would handle initializaing the drag, stopping it.

        // another piece of code deals with dragging something representing a copy, we don't want that here.
        //  want to move the window.

        // and can drag another control.

        // maybe want to make a few lower level drag functions?
        //console.log('drag_handle_to');
        var mousedown_offset_from_ctrl_lt;

        var ctrl_el = ctrl.get('dom.el');
        // could go in enhanced....

        //this.drag(function(e_mousedown) {
        this.draggable(function(e_mousedown) {
            //console.log('e_mousedown', e_mousedown);


            // This will need to be revised - making adjustment for when dragging from an anchored position.
            //  Should maintain some info about the drag so it knows if it starts/ends anchored anywhere.
            var target = e_mousedown.target;

            // want to get the position within the thing it's a handle to?

            // will need to do a bit of position calculation to get it to work.

            var targetPos = findPos(target);
            //console.log('targetPos ' + stringify(targetPos));

            var ctrl_el_pos = findPos(ctrl.get('dom.el'));

            // and use the client x, client y

            // or page x page y?

            var e_pos_on_page = [e_mousedown.pageX, e_mousedown.pageY];

            // then subtract the vectors.

            //var offset_within_target = jsgui.v_subtract(e_pos_on_page, targetPos);
            mousedown_offset_from_ctrl_lt = jsgui.v_subtract(e_pos_on_page, ctrl_el_pos);
            //console.log('mousedown_offset_from_ctrl_lt ' + stringify(mousedown_offset_from_ctrl_lt));

            // not bad...

            // notify the page context.
            //  Will notify the page context when control gets moved too.
            //   The page context could arrange other things, like tell a control with a drop zone to get ready?
            //    Or that control responds to the mouseover event because it is a drop zone?

            // The Page_Context may get told about a few things, but only then send on messages where necessary.





        }, function(e_begin) {
            // also want the position of mousedown.

            // we could get that with a mousedown event.


            // could get a measurement of the size height.
            //  also know if it is docked or not.

            var ctrlSize = ctrl.size();
            //console.log('ctrlSize', ctrlSize);

            var anchored_to = ctrl.get('anchored_to');
            //console.log('anchored_to', anchored_to);

            if (!anchored_to) {
                //ctrl.set('unanchored_size', ctrlSize);
            } else {
                // need to unanchor it.
                ctrl.unanchor();

                /*
                var unanchored_size = ctrl.get('unanchored_size');
                console.log('unanchored_size', unanchored_size);

                ctrl.size(unanchored_size);
                ctrl.style({
                    'position': 'absolute'
                })
                */
            }


            //console.log('drag handle to drag begin');


            //throw 'stop';

            // need to make it absolutely positioned, size it.



        }, function(e_move) {

            //console.log('move event');
            // need to reposition the control.
            //  will mean adjusting some inline style.

            // could do with more jsgui work on dealing with styles.
            //  both conventional styles
            //  and a style abstraction.

            // set the style on the control.

            // another style abstraction system would be quite useful, not called style....
            // .form? Seems confusing with html for.
            // .appearance - too long
            // .flair?

            // or just .style, but these are jsgui style abstractions.
            //  so we can have it put in the rounded edges within a DIV in IE6, but it does change the layout in general.

            // style polyfill? shim?

            // maybe want to specify corners in jsgui - that is a style abstraction.

            var clientX = e_move.clientX;
            var clientY = e_move.clientY;

            //var pageX = e_move.pageX;
            //var pageY = e_move.pageY;

            //console.log('pre set ctrl style');

            // the style within the dom attributes?

            // I think .form would be good instead of .style.
            //  .form would be like .style but the style abstraction.

            // Perhaps being able to access .style makes sense for controls though.

            // Need to deal properly with offsets.

            //

            // width of the control.

            // want ctrl.width() to produce the result, but that will need more work.



            // Also need to clamp it within page constraints.

            var window_size = get_window_size();


            var ctrl_pos = jsgui.v_subtract([clientX, clientY], mousedown_offset_from_ctrl_lt);

            // But then act differently if we are dragging from an anchored position.
            //  The mousedown offset within the control won't be so relevant -
            //   or won't be the only factor.

            // Take account of position_adjustment
            //  or offset_adjustment

            var offset_adjustment = ctrl.get('offset_adjustment');
            //console.log('offset_adjustment', offset_adjustment);

            if (offset_adjustment) {
                // want to find out what zone it is anchored in.

                ctrl_pos = jsgui.v_add(ctrl_pos, offset_adjustment);

                //
            }
            /*
            var unanchored_offset = ctrl.get('unanchored_offset');
            console.log('unanchored_offset', unanchored_offset);

            if (unanchored_offset) {
                // want to find out what zone it is anchored in.
                var anchored_to = ctrl.get('anchored_to');
                var zone = anchored_to[2];

                console.log('zone', zone);

                if (zone == 'left' || zone == 'top' || zone == 'bottom') {
                    ctrl_pos = jsgui.v_add(ctrl_pos, [unanchored_offset[0], 0]);
                }


                //
            }
            */


            if (ctrl_pos[0] < 0) ctrl_pos[0] = 0;
            if (ctrl_pos[1] < 0) ctrl_pos[1] = 0;

            // clamping it so the right does not go outside the screen is more difficult.
            // mousedown_offset_from_ctrl_lt

            //console.log(window_size[0] - mousedown_offset_from_ctrl_lt[0]);


            var ow = ctrl_el.offsetWidth;
            var oh = ctrl_el.offsetHeight;


            if (ctrl_pos[0] > window_size[0] - ow) ctrl_pos[0] = window_size[0] - ow;
            if (ctrl_pos[1] > window_size[1] - oh) ctrl_pos[1] = window_size[1] - oh;



            //ctrl.style({
            //    'left': pageX + 'px',
            //    'top': pageY + 'px'
            //});

            var style_vals = {
                'left': ctrl_pos[0] + 'px',
                'top': ctrl_pos[1] + 'px'
            };

            //console.log('style_vals', style_vals);


            ctrl.style(style_vals);


            // If the ctrl is anchored, we need to unanchor it.



            // as well as that, tell the control's context.
            //  That could do things like scan for it being in an outside border.

            ctrl._context.move_drag_ctrl(e_move, ctrl);

        }, function(e_end) {
            // tell the context that the drag has ended.
            var uo1 = ctrl.get('unanchored_offset');
            //console.log('uo1', uo1);

            ctrl._context.end_drag_ctrl(e_end, ctrl);

            var uo2 = ctrl.get('unanchored_offset');
            //console.log('uo2', uo2);

            if (uo1 && uo2) {
                ctrl.set('unanchored_offset', null);
            }

            ctrl.set('offset_adjustment', null);

            // and if it already has an unanchored_offset

        });

    },


    // Possibly put this back?
    //  But maybe don't want to be talking about click or touch too much, maybe talk about pointer actions.
    /*
    'click_to_select': function(ctrl) {
        ctrl = ctrl || this;

        this.click(function(e) {
            // is control held down?
            //console.log('e', e);
            var ctrl_key = e.ctrlKey;
            if (ctrl_key) {
                ctrl.action_select_toggle();
            } else {
                ctrl.action_select_only();
            }
        });
    },
    */

    'resize_handle_to': function(ctrl, handle_position) {
        // The control needs to be draggable normally?
        //  And then from the positions of where it is adjust the size of what it's a resize handle to?

        console.log('resize_handle_to');

        if (handle_position == 'right-bottom') {
            var fn_move = function(e_move) {
                console.log('e_move', e_move);
            }
            var fn_up = function(e_up) {
                console.log(e_up);
            }

            var doc = ctrl._context.ctrl_document;

            console.log('ctrl._context', ctrl._context);

            //var body = doc.get('content').get(1);
            //console.log('body', body);

            // The context should have access to the control_document.
            //throw 'stop';

            // Need to store the inital positions to work out differences between them.

            // pageX and PageY are reliable accross browsers.
            //  can be used to work out movement vector.

            // Maybe we use the original measured position of the window to work out the new size, along with the movement vector.




            var fn_move = function(e_move) {
                console.log('e_move', e_move);
            }

            var fn_up = function(e_up) {
                console.log('e_up', e_up);

                doc.off('mousemove', fn_move);
                doc.off('mouseup', fn_up);
            }

            ctrl.on('mousedown', function(e_mousedown) {


                console.log('e_mousedown', e_mousedown);


                doc.on('mousemove', fn_move);
                doc.on('mouseup', fn_up);
            })



        }

    },

    'selectable': function(ctrl) {

        //console.log('selectable ctrl', ctrl);
        //  Can click on this, select something else.

        // if this is on the server, want to mark this so that it gets activated as selectable on the client.
        //  perhaps write more of an abstraction for code scope shifting.

        // could use jsgui flags?
        //  need to work on the activation stage to read data out of the dom node.

        var that = this;
        ctrl = ctrl || this;

        if (typeof document === 'undefined') {
            // set the jsgui field

            // Should use a different version of jsgui data fields.
            // such as __fields
            // just _fields

            //  when the control renders the dom attributes, it treats that as a special case.
            //  it already has a few special cases, eg style, jsgui_ctrl_fields

            /*

            var jsf = that.get('dom.attributes.data-jsgui-fields');
            //console.log('jsf', jsf);



            if (jsf) {

                throw 'pre-existing jsgui fields, nyi'
            } else {
                var obj = {
                    'is_selectable': true
                }



                that.set('dom.attributes.data-jsgui-fields', JSON.stringify(obj).replace(/"/g, "[DBL_QT]").replace(/'/g, "[SNG_QT]"));

                //.replace(/"/g, "[DBL_QT]").replace(/'/g, "[SNG_QT]")
            }
            */
            that._fields = that._fields || {};
            that._fields['is_selectable'] = true;


        } else {
            // not making something selectable?
            //  This seems to be getting called when it should not.




            that.click(function(e) {

                // Or is the click event being bubbled?

                //console.log('that click, that:', that);

                // is control held down?
                //console.log('e', e);
                var ctrl_key = e.ctrlKey;
                var meta_key = e.metaKey;

                //console.log('metaKey ' + e.metaKey);

                if (ctrl_key || meta_key) {
                    ctrl.action_select_toggle();
                } else {
                    ctrl.action_select_only();
                }
            });
        }







    },


    'action_select_only': function() {
        // needs to see what is within the selection_scope.
        // this is a selection scope, or it refers to a control with that set to true that is an ancestor.
        //  it could find such a control.
        // not totally sure if the ancestor requirement is necessary, it may make sense and be best though.
        //console.log('action_select ');
        // I think a Selection_Scope object may make sense to hold the data.

        // this.selection_scope.select_only(this);

        //this.get('selection_scope').select_only(this);

        var ss = this.find_selection_scope();
        //console.log('ss', ss);
        // The selection scope shouls be a Selection_Scope object.

        //  I think that it would make use of the B+ tree where needed.
        // Need algorithmically fast operations to:
        // Select or deselect an object
        // Get all objects that are selected in the order in which they are listed in another control.
        //  Though can get all objects that are selected quickly, then quickly get their indexes.
        //  Do that without going through whole selection.

        //console.log('this ', this);

        // is there a selection scope?
        //  Want to have selection scoped set up on the server OK.
        //  Would mean selection scopes need to be created upon activation.
        //   Perhaps any control that has its selection scope set should also send a selection scope id to the client.

        ss.select_only(this);
        //this.find_selection_scope().select_only(this);

    },

    'action_select_toggle': function() {
        this.find_selection_scope().select_toggle(this);
    },


    // So I think the resource-pool will have a selection scope.
    'find_selection_scope': function() {
        //console.log('find_selection_scope');

        var res = this.get('selection_scope');
        if (res) return res;

        // look at the ancestor...

        //var parent = this.get('parent');
        // want an easy way to get the parent control.

        // .parent for a control should do this I think.

        var parent_control_collection = this.parent();


        //console.log('parent_control_collection', parent_control_collection);

        // In activation, it looks like we need to hook up the parent controls.



        if (parent_control_collection) {
            var parent_control = parent_control_collection.parent();

            //var parent = this.parent().parent();


            //console.log('parent_control ' + tof(parent_control));


            if (parent_control) return parent_control.find_selection_scope();
        } else {

        }



    },

    // Nice, this works. Not that efficiently yet.

    'make_full_height': function() {
        var el = this.get('dom.el');
        var viewportHeight = document.documentElement.clientHeight;


        var rect = el.getBoundingClientRect();
        console.log(rect.top, rect.right, rect.bottom, rect.left);

        var h = viewportHeight - rect.top;

        this.style('height', h + 'px', true);
    },
    'grid_9': function() {
        var res = this.get('grid_9');
        if (res) return res;

        res = new Grid_9({
            'context': this._context
        })
        //res.__type_name = 'control';
        res.set('dom.attributes.data-jsgui-type', 'control');
        // need to say it's a control too...

        var res_id = res._id();

        res.set('dom.attributes.data-jsgui-id', res_id);

        this._context.map_controls[res_id] = res;

        //res.set('')

        // transplant the content.


        var el = this.get('dom.el');
        // remove all child nodes???

        // can just insert the rendered grid9
        //console.log('pre res all_html_render')
        var html_grid_9 = res.all_html_render();
        var nel = document.createElement('div');

        //console.log('html_grid_9 ' + html_grid_9);

        nel.innerHTML = html_grid_9;

        var el_grid_9 = nel.childNodes[0];

        //console.log('el_grid_9 ' + el_grid_9);

        //console.log('el_grid_9.childNodes.length ' + el_grid_9.childNodes.length );



        el.insertBefore(el_grid_9, el.childNodes[0]);

        while (el.childNodes[1]) {
            el_grid_9.childNodes[1].childNodes[1].appendChild(el.childNodes[1]);
        }


        res.set('dom.el', el_grid_9);

        res.activate_recursive();
        // can't do it quite like that.
        //  maybe change for copying between collections.
        //  setting a collection, with a collection.
        //   should create a new copy?
        //    or reference it...
        //   reference is better if it works.


        // get content should get a collection...
        //  but need to work on the Data_Object's set for when it is dealing with a collection.


        var current_content = this.get('content');

        //console.log('1) current_content.length() ' + current_content.length());
        //throw 'stop';

        // need to copy it somehow....

        var res_middle = res.get('content').get(1).get('content').get(1);
        //console.log('res_middle ' + res_middle);




        res_middle.set('content', current_content);

        //console.log('1) res content .length() ' + res.get('content').length());
        //console.log('1) res_middle content .length() ' + res_middle.get('content').length());


        this.get('content').clear();
        this.get('content').add(res);


        this.set('grid_9', res);

        //var current_content = this.get('content');

        //console.log('2) current_content.length() ' + current_content.length());

        // recursive activate...
        //  needs to activate from inside to outside.

        // When something gets anchored into a position in the Grid_9, the Grid_9 needs to handle it.


        return res;


    },

    // Is getting a bit verbose.
    //  Some things could be expressed more efficiently.
    //  However, right now don't want to create overall abstraction for this.

    // There will be grid_9 and a few other layouts that are fairly intrinsic to the system.




    'ensure_dock_placeholder': function(pos) {
        //console.log('enh ctrl ensure_dock_placeholder pos ' + pos);

        // and then we keep track of the dock placeholder.

        // would likely be easier to get a string by default?
        //  or easily get the value.

        // a val function that gets the value of it, if it has a value function.



        //val(dock_placeholder_pos)


        // use the grid_9's dock placeholder position?


        //console.log('dock_placeholder_pos ' + stringify(dock_placeholder_pos));
        //console.log('tof dock_placeholder_pos ' + tof(dock_placeholder_pos));
        var grid_9 = this.get('grid_9');
        var g9el = grid_9.get('dom.el');
        if (grid_9) {
            var dock_placeholder_pos = grid_9.get('dock_placeholder_pos');

            var t_stripe = grid_9.get('content').get(0);
            var m_stripe = grid_9.get('content').get(1);
            var cell_4 = m_stripe.get('content').get(1);
            var cell4_el = cell_4.get('dom.el');

            //console.log('dock_placeholder_pos ' + dock_placeholder_pos);
            //console.log('dock_placeholder_pos ' + tof(dock_placeholder_pos));
            //throw 'stop';
            if (dock_placeholder_pos) {
                // if the pos we have is different.
                var dpp_val;
                if (dock_placeholder_pos.value) {
                    dpp_val = dock_placeholder_pos.value();
                } else {
                    dpp_val = dock_placeholder_pos;
                }

                //dpp_val = dock_placeholder_pos.value();
                //console.log('dpp_val ' + dpp_val);

                if (!pos) {
                    // remove it from wherever it is.
                    if (dpp_val == 'left') {
                        // need to set some styles, so that h_middle does not take the full width.
                        //  reduce its width so that the placeholder can be accommodated.

                        grid_9.close_placeholder();

                        /*

                        var g9w = g9el.offsetWidth;



                        var g9c = grid_9.get('content');
                        //console.log('g9c', g9c.length());

                        //console.log('m_stripe', m_stripe);

                        var cell_3 = m_stripe.get('content').get(0);

                        // need to measure and shrink the central cell.

                        //var w = cell4_el.offsetWidth;

                        //console.log('w ' + w);

                        // or remove that style declaration?
                        cell_4.style({
                            //'width': null
                            'width': '100%'
                        })



                        //console.log('cell_3', cell_3);
                        cell_3.remove_class('dock-placeholder');
                        this.set('dock_placeholder_pos', false);

                        */
                    }

                    if (dpp_val == 'top') {
                        //var g9c = grid_9.get('content');
                        //console.log('g9c', g9c.length());
                        //var m_stripe = grid_9.get('content').get(0);
                        //console.log('m_stripe', m_stripe);

                        grid_9.close_placeholder();

                        /*
                        var cell_1 = t_stripe.get('content').get(1);
                        //console.log('cell_3', cell_3);
                        cell_1.remove_class('dock-placeholder');
                        this.set('dock_placeholder_pos', false);
                        */

                    }

                    if (dpp_val == 'right') {
                        grid_9.close_placeholder();
                        /*
                        var cell_5 = grid_9.get('content').get(1).get('content').get(2);
                        //console.log('cell_3', cell_3);
                        cell_5.remove_class('dock-placeholder');
                        this.set('dock_placeholder_pos', false);

                        cell_4.style({
                            //'width': null
                            'width': '100%'
                        })
                        */
                    }

                    if (dpp_val == 'bottom') {
                        grid_9.close_placeholder();
                    }

                    // bottom 7
                    //  like with others, the central div will need to be made a bit smaller.


                }

                //throw 'stop';



            } else {
                // put the placeholder in the position...
                //console.log('pos ' + pos);
                //throw 'stop';
                if (!pos) {
                    // tell the grid9 to remove whichever class indicates its the placeholder.

                    //throw 'stop';

                }

                if (pos == 'left') {
                    //var g9c = grid_9.get('content');
                    //console.log('g9c', g9c.length());

                    grid_9.open_placeholder('left');

                    /*

                    var cw = document.documentElement.clientWidth;
                    grid_9.style({
                        'width': cw + 'px'
                    })



                    //console.log('m_stripe', m_stripe);
                    var cell_3 = m_stripe.get('content').get(0);

                    //var cell_4 = m_stripe.get('content').get(1);
                    var cell3_el = cell_3.get('dom.el');
                    //var cell4_el = cell_4.get('dom.el');
                    var c4w = cell4_el.offsetWidth;

                    //console.log('* c4w ' + c4w);

                    //throw 'stop';
                    //console.log('cell_3', cell_3);
                    // ensure class?
                    cell_3.add_class('dock-placeholder');

                    var c3w = cell3_el.offsetWidth;
                    var nw = c4w - c3w;
                    //console.log('nw ' + nw);



                    cell_4.style({
                        'width': (nw) + 'px'
                    })
                    //console.log('* c3w ' + c3w);


                    this.set('dock_placeholder_pos', 'left');

                    */
                }
                if (pos == 'top') {
                    //var g9c = grid_9.get('content');
                    //console.log('g9c', g9c.length());

                    /*
                    var m_stripe = grid_9.get('content').get(0);
                    //console.log('m_stripe', m_stripe);
                    var cell_1 = m_stripe.get('content').get(1);
                    //console.log('cell_3', cell_3);
                    // ensure class?
                    cell_1.add_class('dock-placeholder');
                    this.set('dock_placeholder_pos', 'top');
                    */

                    grid_9.open_placeholder('top');
                }
                if (pos == 'right') {

                    grid_9.open_placeholder('right');


                }

                //grid_9.open_placeholder('bottom');


                if (pos == 'bottom') {
                    grid_9.open_placeholder('bottom');
                }
            }
        }
    },

    'unanchor': function() {
        var anchored_to = this.get('anchored_to');
        anchored_to[0].unanchor_ctrl(this);

    }

})

var Grid_9 = jsgui.Control.extend({
    'init': function(spec) {
        this._super(spec);

        // composition...
        //  need to create 3 stripes: top, v_middle, bottom
        //   then within each of them we have left, h_middle, right

        // in an array. The center is number 4.

        // 0 1 2
        // 3 4 5
        // 6 7 8
        this.__type_name == 'grid_9';

        this.set('dom.attributes.class', 'grid_9');
        var context = this._context;

        // if being given the element when it is constructed...

        // putting this into another control.
        //  we need to re-render the control fully, I think.

        // Is there a better way to put this into an existing document?

        // Render the HTML of it and everything inside it...
        //  Would need to reactivate / reattach events.
        //   Memory leak?

        // could maybe activate to make access to subcontrols more convenient?



        // we can detach and reattach.
        //  could have a specific mechanism for putting this in.

        // compose its html
        // render create the element.
        //  remove the existing element
        // put the grid9 element in (or is it simply 9 elements?) grid_9 could take an outer div, though we could possibly remove that.
        //  then put the element within position 4 of the grid9.

        var arr_v_names = ['top', 'v-middle', 'bottom'];
        var arr_h_names = ['left', 'h-middle', 'right'];

        if (!spec.el) {
            var c = 0;
            var arr_ctrls = new Array(9);
            for (var y = 0; y < 3; y++) {
                var stripe = new jsgui.Control({
                    'context': context
                })
                stripe.set('dom.attributes.class', arr_v_names[y]);
                // could have the page context see what the free ids are, and then use them.
                //  would set the counter for each of them based on what has been found.

                stripe.set('dom.attributes.data-jsgui-type', stripe.__type_name);


                stripe.set('dom.attributes.data-jsgui-id', stripe._id());

                this.add(stripe);

                context.map_controls[stripe._id()] = stripe;

                for (var x = 0; x < 3; x++) {
                    arr_ctrls[c] = new jsgui.Control({
                        'context': context
                    })
                    arr_ctrls[c].set('dom.attributes.class', arr_h_names[x]);
                    arr_ctrls[c].set('dom.attributes.data-jsgui-id', arr_ctrls[c]._id());
                    arr_ctrls[c].set('dom.attributes.data-jsgui-type', arr_ctrls[c].__type_name);

                    stripe.add(arr_ctrls[c]);

                    context.map_controls[arr_ctrls[c]._id()] = arr_ctrls[c];
                    c++;
                }
            }
            //console.log(this.get('content').length());
            //throw 'stop';
        }


    },

    'unanchor_ctrl': function(ctrl) {
        var anchored_to = ctrl.get('anchored_to');
        var zone = anchored_to[2];
        console.log('unanchor_ctrl zone ' + zone);
        ctrl.remove_class('anchored');

        var unanchored_offset = ctrl.get('unanchored_offset');
        console.log('unanchored_offset', unanchored_offset);

        // But when unanchoring is done as part of a drag...
        //  need to recalculate the drag offset.

        //ctrl.offset(unanchored_offset);
        if (unanchored_offset) {
            if (zone !== 'right') {
                ctrl.set('offset_adjustment', [unanchored_offset[0], 0]);
            }


        }


        var t_stripe = this.get('content').get(0);
        var m_stripe = this.get('content').get(1);
        var cell_4 = m_stripe.get('content').get(1);
        var cell4_el = cell_4.get('dom.el');

        if (zone == 'left') {
            var cell_3 = m_stripe.get('content').get(0);

            //var cell_4 = m_stripe.get('content').get(1);
            var cell3_el = cell_3.get('dom.el');

            cell_3.remove_class('open');
        }

        if (zone == 'right') {
            //var c4w = document.documentElement.clientWidth;
            var cell_5 = this.get('content').get(1).get('content').get(2);
            cell_5.remove_class('dock-placeholder');

            /*
            this.set('open', 'right');
            var cell5_el = cell_5.get('dom.el');
            var c5w = cell5_el.offsetWidth;
            var nw = c4w - c5w;
            cell_4.style({
                'width': (nw) + 'px'
            })
            */
        }


        anchored_to[0].close_placeholder(zone);



        ctrl.set('anchored_to', null);
        ctrl.set('unanchored_offset', null);

    },

    'anchor_ctrl': function(ctrl, zone) {
        // need to find the right nested subcontrol

        var x, y, found;
        if (zone == 'left') {
            x = 0; y = 1;
            found = true;
        }
        if (zone == 'top') {
            x = 1; y = 0;
            found = true;
        }
        if (zone == 'right') {
            x = 2; y = 1;
            found = true;
        }
        if (zone == 'bottom') {
            x = 1; y = 2;
            found = true;
        }

        var t_stripe = this.get('content').get(0);
        var m_stripe = this.get('content').get(1);
        var cell_4 = m_stripe.get('content').get(1);
        var cell4_el = cell_4.get('dom.el');

        if (found) {
            var grid_section = this.get('content').get(y).get('content').get(x);

            //console.log('grid_section ', grid_section);

            // need a way of inserting a control.
            //  Adding to the content, and having the control react to this and update the DOM?

            // may have ctrl.append(ctrl)
            //  which adds it to the content (and updates the DOM)
            // could also have an activated control listen out for content changes.
            //  so when something gets added in the content, it gets appended in the DOM too.
            //   I think that makes sense in terms of convenience.

            // Will mean making that left bar bigger so that it fits the flexi board.
            // also need to add the class 'open' or something to show that the grid section is open.

            // open a part of the grid section...
            //  best to get the grid_9 to do this.
            //  also would be good to get the grid_9 to show placeholders using its own methods.




            // And this will change the formatting of the grid_9
            //  Don't want that section to appear and dissipear.
            //  Don't show it as a placeholder when something is there...

            // Need to open a section of the Grid_9 / reposition things.
            //  Like when the placeholder is shown.

            // We want to actually open that section of the grid_9.
            var unanchored_offset = ctrl.offset();
            ctrl.set('unanchored_offset', unanchored_offset);

            //console.log('unanchored_offset', unanchored_offset);

            ctrl.add_class('anchored');

            //console.log('');
            grid_section.add(ctrl);

            ctrl.set('anchored_to', [this, grid_section, zone]);
            var unanchored_size = ctrl.size();
            ctrl.set('unanchored_size', unanchored_size);
            // This is basically working now!
            //  Have automatic DOM append of added content.
            //   Need to get that working properly and tested in all cases though.

            if (zone == 'left') {
                console.log ('left zone');
                var cw = document.documentElement.clientWidth;
                this.style({
                    'width': cw + 'px'
                })
                //console.log('m_stripe', m_stripe);
                var cell_3 = m_stripe.get('content').get(0);

                //var cell_4 = m_stripe.get('content').get(1);
                var cell3_el = cell_3.get('dom.el');
                //var cell4_el = cell_4.get('dom.el');
                var c4w = cell4_el.offsetWidth;
                cell_3.add_class('open');

                var c3w = cell3_el.offsetWidth;
                var nw = c4w - c3w;
                cell_4.style({
                    'width': (nw) + 'px'
                })
            }

            if (zone == 'right') {
                var c4w = document.documentElement.clientWidth;
                var cell_5 = this.get('content').get(1).get('content').get(2);
                cell_5.add_class('dock-placeholder');
                this.set('open', 'right');
                var cell5_el = cell_5.get('dom.el');
                var c5w = cell5_el.offsetWidth;
                var nw = c4w - c5w;
                cell_4.style({
                    'width': (nw) + 'px'
                })
            }

            if (zone == 'bottom') {
                var c = document.documentElement.clientHeight;
                var cell_7 = this.get('content').get(2).get('content').get(1);
                cell_7.add_class('open');
                this.set('dock_placeholder_pos', 'bottom');
                var cell7_el = cell_7.get('dom.el');
                var c7h = cell7_el.offsetHeight;
                //console.log('c7h ' + c7h);
                var nh = c - c7h;
                //console.log('nh ' + nh);
                m_stripe.style({
                    'height': (nh) + 'px'
                })
            }
            //grid_section.anchor_ctrl(ctrl);
        }

    },
    'open_placeholder': function(zone) {
        //console.log('grid_9 open_placeholder ' + zone);

        var t_stripe = this.get('content').get(0);
        var m_stripe = this.get('content').get(1);
        var cell_4 = m_stripe.get('content').get(1);
        var cell4_el = cell_4.get('dom.el');

        if (zone == 'left') {
            var cw = document.documentElement.clientWidth;
            this.style({
                'width': cw + 'px'
            })
            //console.log('m_stripe', m_stripe);
            var cell_3 = m_stripe.get('content').get(0);

            //var cell_4 = m_stripe.get('content').get(1);
            var cell3_el = cell_3.get('dom.el');
            //var cell4_el = cell_4.get('dom.el');
            var c4w = cell4_el.offsetWidth;
            cell_3.add_class('dock-placeholder');

            var c3w = cell3_el.offsetWidth;
            var nw = c4w - c3w;
            cell_4.style({
                'width': (nw) + 'px'
            })
            this.set('dock_placeholder_pos', 'left');
        }

        if (zone == 'top') {
            //var m_stripe = grid_9.get('content').get(0);
                    //console.log('m_stripe', m_stripe);
            var cell_1 = t_stripe.get('content').get(1);
            //console.log('cell_3', cell_3);
            // ensure class?
            cell_1.add_class('dock-placeholder');
            this.set('dock_placeholder_pos', 'top');
        }

        if (zone == 'right') {
            var c4w = document.documentElement.clientWidth;
            var cell_5 = this.get('content').get(1).get('content').get(2);
            cell_5.add_class('dock-placeholder');
            this.set('dock_placeholder_pos', 'right');

            //var c4w = cell4_el.offsetWidth;
            //console.log('c4w ' + c4w);
            //cell_5.add_class('dock-placeholder');
            var cell5_el = cell_5.get('dom.el');
            // use the full page width.

            var c5w = cell5_el.offsetWidth;
            //console.log('c5w ' + c5w);
            var nw = c4w - c5w;
            //console.log('nw ' + nw);
            cell_4.style({
                'width': (nw) + 'px'
            })
        }

        if (zone == 'bottom') {
            var c = document.documentElement.clientHeight;
            var cell_7 = this.get('content').get(2).get('content').get(1);
            cell_7.add_class('dock-placeholder');
            this.set('dock_placeholder_pos', 'bottom');


            //var c4w = cell4_el.offsetWidth;

            //console.log('c4w ' + c4w);
            //cell_5.add_class('dock-placeholder');

            var cell7_el = cell_7.get('dom.el');


            // use the full page width.


            //var c4h = cell4_el.offsetHeight;
            // get the offset height of the middle stripe, that's the one who's height we should change.




            var c7h = cell7_el.offsetHeight;
            //console.log('c7h ' + c7h);
            var nh = c - c7h;
            //console.log('nh ' + nh);
            m_stripe.style({
                'height': (nh) + 'px'
            })
        }

    },
    'close_placeholder': function() {
        var dppos = this.get('dock_placeholder_pos');
        if (dppos && dppos.value) dppos = dppos.value();

        var t_stripe = this.get('content').get(0);

        var m_stripe = this.get('content').get(1);
        var cell_4 = m_stripe.get('content').get(1);

        if (dppos == 'left') {
            var el = this.get('dom.el');
            var g9w = el.offsetWidth;

            var g9c = this.get('content');
            //console.log('g9c', g9c.length());

            //console.log('m_stripe', m_stripe);

            var cell_3 = m_stripe.get('content').get(0);

            // need to measure and shrink the central cell.

            //var w = cell4_el.offsetWidth;

            //console.log('w ' + w);

            // or remove that style declaration?
            cell_4.style({
                //'width': null
                'width': '100%'
            })

            //console.log('cell_3', cell_3);
            cell_3.remove_class('dock-placeholder');
            this.set('dock_placeholder_pos', false);

        }

        if (dppos == 'top') {
            var cell_1 = t_stripe.get('content').get(1);
            //console.log('cell_3', cell_3);
            cell_1.remove_class('dock-placeholder');
            this.set('dock_placeholder_pos', false);
        }

        if (dppos == 'right') {
            var cell_5 = this.get('content').get(1).get('content').get(2);
            //console.log('cell_3', cell_3);
            cell_5.remove_class('dock-placeholder');
            this.set('dock_placeholder_pos', false);
            cell_4.style({
                //'width': null
                'width': '100%'
            })
        }

        if (dppos == 'bottom') {
            var cell_7 = this.get('content').get(2).get('content').get(1);
            //console.log('cell_3', cell_3);
            cell_7.remove_class('dock-placeholder');
            this.set('dock_placeholder_pos', false);

            m_stripe.style({
                'height': '100%'
            })
        }


        /*
        var g9w = g9el.offsetWidth;



                        var g9c = grid_9.get('content');
                        //console.log('g9c', g9c.length());

                        //console.log('m_stripe', m_stripe);

                        var cell_3 = m_stripe.get('content').get(0);

                        // need to measure and shrink the central cell.

                        //var w = cell4_el.offsetWidth;

                        //console.log('w ' + w);

                        // or remove that style declaration?
                        cell_4.style({
                            //'width': null
                            'width': '100%'
                        })



                        //console.log('cell_3', cell_3);
                        cell_3.remove_class('dock-placeholder');
                        this.set('dock_placeholder_pos', false);
        */
    }


    // the grid_9 also needs to be activated.
    //  the controls within it need attachments to their elements.
    //  maybe grid_9 does not need more code in itself... just needs activate to be called when it's in the DOM.



});
//jsgui.Control = Control;




// Selection scope...
//  Can select the whole thing, can select parts of it.

// Don't want too much code to do with selection in the UI control itself.



// Space saving measures?
//  Declaring a buch of subcontrols with properties?
//  Doing so as XML? As JSON?


// Movable
// Resizable
// Rotatable
// Deletable
// Editable
// Reorderable
// Creatable

// Actionable
//  (actionable behaviours)

// They will vary quite a lot and probably can't all fit into one way of doing things.

// Want a very easy way to set these up.

// Using groups too.

// Behaviours seem like a good way of expressing action-reaction.
//


var recursive_dom_iterate = function (el, callback) {
    //console.log('recursive_dom_iterate');
    callback(el);

    //console.log('tof(el.childNodes) ' + tof(el.childNodes));

    //each(el.childNodes, function(i, v) {
    //	console.log('v ' + v);
    //});

    //console.log('el.childNodes.length ' + el.childNodes.length);
    var cns = el.childNodes;
    //console.log('el', el);
    //console.log('cns.length', cns.length);
    for (var c = 0, l = cns.length; c < l; c++) {
        recursive_dom_iterate(cns[c], callback);
    }
}

var recursive_dom_iterate_depth = function (el, callback) {
    //console.log('recursive_dom_iterate');


    //console.log('tof(el.childNodes) ' + tof(el.childNodes));

    //each(el.childNodes, function(i, v) {
    //  console.log('v ' + v);
    //});

    //console.log('el.childNodes.length ' + el.childNodes.length);
    var cns = el.childNodes;
    for (var c = 0, l = cns.length; c < l; c++) {
        recursive_dom_iterate_depth(cns[c], callback);
    }
    callback(el);
}


// Want the document node to be linked with the context when activated (automatically)

// We find the html element control. That is the one that gets set to be the context's ctrl_document.




var activate = function(context) {
    // The context should already have the map of controls.

    // Not so sure we can have the client page context here - does it use resources?

    //ensure_Context_Menu_loaded(function(_Context_Menu) {
        //Context_Menu = _Context_Menu;
        if (!context) {
            throw 'jsgui-html-enh activate(context) - need to supply context parameter.';
        }
        //context = context || new Page_Context();
        //console.log('jsgui-html-enh activate context', context);

        var map_jsgui_els = {};
        var map_jsgui_types = {};
        //console.log('activate - beginning mapping');
        // Could put together the array of controls in order found.

        var arr_controls = [];
        // element registration
        // Recursive iteration where the innermost get called first....
        //  Would be useful here.
        // counting up the typed id numbers.

        var max_typed_ids = {};

        var id_before__ = function(id) {
            var pos1 = id.lastIndexOf('_');
            var res = id.substr(0, pos1);
            return res;
        }

        var num_after = function(id) {
            //var pos1 = id.lastIndexOf('_');
            //var res = parseInt(id.substr(pos1 + 1), 10);
            //return res;
            return parseInt(id.substr(id.lastIndexOf('_') + 1), 10);
        }

        recursive_dom_iterate(document, function(el) {
            //console.log('2) el.tagName ' + el.tagName);
            var nt = el.nodeType;
            //console.log('nt ' + nt);

            // So for the 'HTML' tag name...
            //  We should make a control for the HTML document - or it should get activated.



            if (nt == 1) {
                var jsgui_id = el.getAttribute('data-jsgui-id');
                // Give the HTML document an ID?


                //console.log('jsgui_id ' + jsgui_id);
                if (jsgui_id) {
                    var ib = id_before__(jsgui_id);
                    var num =  num_after(jsgui_id);
                    if (!max_typed_ids[ib]) {
                        max_typed_ids[ib] = num;
                    } else {
                        if (num > max_typed_ids[ib]) max_typed_ids[ib] = num;
                    }

                    map_jsgui_els[jsgui_id] = el;
                    var jsgui_type = el.getAttribute('data-jsgui-type');
                    //console.log('jsgui_type ' + jsgui_type);
                    map_jsgui_types[jsgui_id] = jsgui_type;
                    //console.log('jsgui_type ' + jsgui_type);
                }
            }
        });
        context.set_max_ids(max_typed_ids);
        //console.log('max_typed_ids ' + stringify(max_typed_ids));
        //throw 'stop';
        //console.log('activate - finished mapping');

        // Then activate
        //  (but an activation where it does not yet know the references to various necessary other controls)
        //  This is about creating the controls, within the page_context.

        // if the control does not have its own recursive activation...
        //  Do the control creation, then there should be various properties and behaviours that get set.

        // create the controls.
        //console.log('map_jsgui_types ' + stringify(map_jsgui_types));
        //console.log('map_jsgui_els ' + stringify(map_jsgui_els));

        //console.log('map_controls_by_type ' + stringify(map_controls_by_type));
        //throw 'stop';

        //console.log('context.map_controls', context.map_controls);
        //console.log('map_jsgui_types', map_jsgui_types);

        var map_controls = context.map_controls;
        // Control construction and registration
        each(map_jsgui_els, function(el, jsgui_id) {
            //console.log('jsgui_id ' + jsgui_id);
            //console.log('3) el.tagName ' + el.tagName);
            var l_tag_name = el.tagName.toLowerCase();
            if (jsgui_id) {
                var type = map_jsgui_types[jsgui_id];
                //console.log('type ' + type);
                //var cstr = jsgui.constructor_from_type(type);

                //var cstr = jsgui.constructor_from_type(type);

                //console.log('cstr ' + cstr);

                // use the context's map_Controls

                var Cstr = context.map_Controls[type];
                //console.log('Cstr ' + Cstr.prototype);

                // then we can construct the control, and put it within the map.
                //  A later stage of activation will recreate the relationships between the controls.

                // OK, but have we got variables to initialize the controls with?
                //  It would maybe be most efficient to take delivery of them as one object.
                //   With just the control types and the data contained in them we can do a lot of reconstruction of the actual controls.

                // With the object viewer, we can even reconstruct the initial object from the rendered view.
                //  Not sure quite how much point there is in doing that. May work out most efficient because 1st view is prerendered and
                //  it does not need to send the data twice.
                // Eg can hook up the key (viewer), the value (viewer) and the comma.

                // for the document element we specifically add the control to the context.

                // Also want to read fields out for use in initialization.
                //  Not the ctrl_fields (for the moment)
                //  Just the data-jsgui-fields.
                //   However, it's likely they could be used in the initialization.
                //    And merged with the spec.




                if (Cstr) {
                    var ctrl = new Cstr({
                        'context': context,
                        '_id': jsgui_id,
                        'el': el
                    })
                    map_controls[jsgui_id] = ctrl;
                    arr_controls.push(ctrl);

                    //console.log('el.tagName', el.tagName);

                    if (l_tag_name === 'html') {
                        //console.log('el is document root el');

                        // The html element represents the root of a document.
                        //throw '2) stop';

                        context.ctrl_document = ctrl;
                    }
                } else {
                    console.log('Missing context.map_Controls for type ' + type + ', using generic Control');
                    var ctrl = new Control({
                        'context': context,
                        '_id': jsgui_id,
                        'el': el
                    })
                    map_controls[jsgui_id] = ctrl;
                    arr_controls.push(ctrl);

                }


                //console.log('jsgui_id ' + jsgui_id);
                //console.log('ctrl._id() ' + ctrl._id());

            }
            // get the constructor from the id?
        });
        //console.log('arr_controls ' + stringify(arr_controls));
        // depth-first activation?
        //  But connecting up the activated subcontrols with the control getting activated?
        //   They could be the content.

        //console.log('pre recursive_dom_iterate_depth');
        recursive_dom_iterate_depth(document, function(el) {
            //console.log('el ' + el);
            var nt = el.nodeType;
            //console.log('nt ' + nt);
            if (nt == 1) {
                var jsgui_id = el.getAttribute('data-jsgui-id');
                //console.log('* jsgui_id ' + jsgui_id);
                if (jsgui_id) {

                    var ctrl = map_controls[jsgui_id];
                    ctrl.__activating == true;
                    //console.log('tof ctrl ' + tof(ctrl));
                    ctrl.activate();
                    ctrl.__activating == false;
                    //console.log('jsgui_type ' + jsgui_type);
                }
            }
        });

        // Image uploader seems not to be activating properly...

    //})

    //  constructors.

    // should activate with the context.



    //console.log('done activate rdi');

    /*

    each(arr_controls, function(i, ctrl) {
        // Call activate on the control...
        //  usually it's going to set up the contents.


        // activate_contents activate_control_contents

        ctrl.activate();
        // Activate from bottom up
        //  Most inwards, upwards?

        //  So inner controls are active by the time it reaches outside....



    });
    */

    // Then another rec dom it.
    //  When activating various controls, we'll be looking for specific subcontrols to get a reference to.
    //  Don't want to wrap the elements like with jQuery.

    // then wen need to find the constructor for various controls.
    //  possibly do it for all controls.
    //  for text spans, we read it and assign the properites.

    // Think we should activate everything.
    //  Create the controls
    //  Give them references to the page context

    // Then give the controls references to each other.
    //  Some of the controls will be fields of other controls.
    //  We can make sure these get sent from the server so they can be activated on the client.
    //   Could maybe have 'relationships' where various other controls are given by jsgui-id that do something on a control.
    //   They are really control fields.

    // So an object editor may have the open and close control fields.

}

var core_extension = str_arr_mapify(function (tagName) {
    jsgui[tagName] = Control.extend({
        'init': function (spec) {
            //spec.tagName = tagName;

            //console.log('core extension tagName ' + tagName);

            this._super(spec);

            this.get('dom').set('tagName', tagName);
            // dom.tagName?

        }
    });
    jsgui[tagName].prototype._tag_name = tagName;
    map_Controls[tagName] = jsgui[tagName];
});

var core_extension_no_closing_tag = str_arr_mapify(function (tagName) {
    jsgui[tagName] = Control.extend({
        'init': function (spec) {
            //spec.tagName = tagName;

            //console.log('core extension tagName ' + tagName);

            this._super(spec);

            this.get('dom').set('tagName', tagName);
            this.get('dom').set('noClosingTag', true);
            // dom.tagName?

        }
    });
    jsgui[tagName].prototype._tag_name = tagName;
    map_Controls[tagName] = jsgui[tagName];
});




core_extension('html head title body div span h1 h2 h3 h4 h5 label p a script button form img ul li audio video');
core_extension_no_closing_tag('link input');
// link tag needs to have no closing tag.
//  core_extension_no_closing_tag


// the jsgui.script object needs more fields.
//  the jsgui data system has become more restrictive, in that fields / attributes need to be specified.

// dom.attributes.type being part of script.

// jsgui.script.fields().add('dom.attributes.type')

//  It may be nice to have this more flexible again.

// but with label we want a bit more...

jsgui.Label = Control.extend({
    // a field for 'for'
    'fields': [
        ['for', 'control']
        // needs to be able to deal with fields of the type 'control'.


    ],

    'init': function (spec) {
        // for property, and it's tagName gets set too.
        this._super(spec);
        this.set('dom.tagName', 'label');


        //console.log(spec.for);
        //throw stop;
        // content rather than text.
    },
    'beforeRenderDomAttributes': function () {
        //this.set('dom.name')

        //var dom = this.get('dom');
        //console.log('');

        //console.log('');
        //var dom_attributes = this.get('dom.attributes');

        //console.log('dom ' + stringify(dom));
        //console.log('dom_attributes ' + dom_attributes);

        //throw 'stop';


        //console.log('domAttributes ' + stringify(domAttributes));
        //if (this.)
        //console.log('this._ ' + stringify(this._));
        var _for = this.get('for');



        //console.log('tof(_for) ' + tof(_for));
        //throw 'stop';

        if (tof(_for) == 'control') {
            // we use that control's _id() as thr for in the dom attributes.
            var domAttributes = this.get('dom.attributes');
            domAttributes.set('for', _for._id());
        }

        //console.log('_for ' + stringify(_for));
        //throw 'stop';
        /*
        var groupName = this.get('group_name').get();
        var checked = this.get('checked').get();
        var value = this.get('value').get();
        //console.log('checked ' + stringify(checked));
        //throw 'stop';
        if (groupName) {
            domAttributes.set('name', groupName);
        }
        if (checked) {
            domAttributes.set('checked', checked.toString());
        }
        if (is_defined(value)) {
            domAttributes.set('value', value);
        }
        */
    }
});

var HTML_Document = jsgui.html.extend({
    // no tag to render...
    //  but has dtd.

    'render_dtd': function () {
        return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">\n';
    }


});

var Blank_HTML_Document = HTML_Document.extend({
    'init': function (spec) {
        this._super(spec);

        var context = this._context;
        //console.log('context ' + context);

        if (!spec.el) {
            var head = new jsgui.head({
                'context': context
            });
            this.get('content').add(head);

            var title = new jsgui.title({
                'context': context
            });
            head.get('content').add(title);

            var body = new jsgui.body({
                'context': context
            });
            this.get('content').add(body);

            // and have .head, .title, .body?

            // useful shortcuts?
            this.set('head', head);
            this.set('title', title);
            this.set('body', body);

            //this.head = head;
            //this.title = title;
            //this.body = body;

            // Maybe connecting control fields?
            this.connect_fields(['head', 'body', 'title']);
        }



        //console.log('content ' + stringify(this.get('content')));

        //throw 'stop';

        //console.log('');
        //console.log('end init Blank_HTML_Document this._ ' + stringify(this._));
    },
    'body': fp(function(a, sig) {
        console.log('body sig', sig);
        if (sig =='[]') {
            // find the body control.

            var content = this.get('content');
            //console.log('content', content);
            var body = content.get(1);
            //console.log('body', body);
            //throw 'stop';

            return body;
        }
    })
});

// Want a body function in other nodes, available throughout the document?



var Client_HTML_Document = Blank_HTML_Document.extend({
    'init': function (spec) {
        this._super(spec);

        //spec.context.ctrl_document = this;
        this.active();

    },

    'include_js': function(url) {
        var head = this.get('head');
        // create jsgui.script

        var script = new jsgui.script({
            //<script type="text/JavaScript" src="abc.js"></script>
            'context': this._context
        })
        // <script data-main="scripts/main" src="scripts/require.js"></script>
        var dom = script.get('dom');
        //console.log('* dom ' + stringify(dom));

        //var domAttributes = script.get('dom.attributes');
        var domAttributes = dom.get('attributes');
        //console.log('domAttributes ' + domAttributes);

        domAttributes.set('type', 'text/javascript');
        //domAttributes.set('src', '/js/require.js');
        domAttributes.set('src', url);
        head.content().add(script);
    },

    'include_css': function(url) {
        var head = this.get('head');
        // create jsgui.script

        // <link rel="stylesheet" type="text/css" href="theme.css">

        var link = new jsgui.link({
            //<script type="text/JavaScript" src="abc.js"></script>
            'context': this._context
        })
        // <script data-main="scripts/main" src="scripts/require.js"></script>
        var dom = link.get('dom');
        //console.log('* dom ' + stringify(dom));

        //var domAttributes = script.get('dom.attributes');
        var domAttributes = dom.get('attributes');
        //console.log('domAttributes ' + domAttributes);

        domAttributes.set('rel', 'stylesheet');
        domAttributes.set('type', 'text/css');
        //domAttributes.set('src', '/js/require.js');
        domAttributes.set('href', url);
        head.content().add(link);
    },


    'include_jsgui_client': function(js_file_require_data_main) {

        // Could add the default client file.

        // Or a specific client file with a control that also has client-side code.
        //  The client-side code won't get processed on the server.
        //  There will be a specific place where client side code gets called upon activation.

        // could include a specific parameter for js_file_require_data_main

        js_file_require_data_main = js_file_require_data_main || '/js/web/jsgui-html-client';

        // Needs to add various script references to the body.
        //  May just be one client.js file
        //  Then will work on having it build quickly
        //  Then will work on making it stay fast to build and be smaller.

        // include the script in the body?
        //  is there a way to keep it at the end of the body?
        //  could put it in the head for the moment.

        var head = this.get('head');
        // create jsgui.script

        var script = new jsgui.script({
            //<script type="text/JavaScript" src="abc.js"></script>
            'context': this._context
        })
        // <script data-main="scripts/main" src="scripts/require.js"></script>

        //var dom = script.get('dom');
        //console.log('* dom ' + stringify(dom));

        //var domAttributes = script.get('dom.attributes');
        //var domAttributes = dom.get('attributes');
        var domAttributes = script.get('dom.attributes');

        //console.log('domAttributes ' + domAttributes);



        //domAttributes.set('type', 'text/javascript');
        //domAttributes.set('src', '/js/require.js');
        //domAttributes.set('data-main', js_file_require_data_main);
        domAttributes.set({
            'type': 'text/javascript',
            'src': '/js/web/require.js',
            'data-main': js_file_require_data_main
        });


        //script.set('dom.attributes.type', 'text/javascript');
        //script.set('dom.attributes.src', 'js/jsgui-client.js');
        //script.set('dom.attributes.src', 'js/require.js');
        //script.set('dom.attributes.data-main', 'js/jsgui-client.js');
        //script.set('dom.attributes.data-main', js_file_require_data_main);


        head.add(script);
        //throw 'stop';

    },

    'include_jsgui_resource_client': function(path) {

        // Could add the default client file.

        // Or a specific client file with a control that also has client-side code.
        //  The client-side code won't get processed on the server.
        //  There will be a specific place where client side code gets called upon activation.

        // could include a specific parameter for js_file_require_data_main

        var js_file_require_data_main = path || '/js/web/jsgui-html-resource-client';
        this.include_jsgui_client(js_file_require_data_main);

    },
    'include_client_css': function() {
        var head = this.get('head');
        var link = new jsgui.link({
            //<script type="text/JavaScript" src="abc.js"></script>
            'context': this._context

        });
        //var lda = link.get('dom.attributes');
        //var dom = link.get('dom');
        //console.log('* dom ' + stringify(dom));

        //var domAttributes = script.get('dom.attributes');
        var domAttributes = link.get('dom.attributes');

        domAttributes.set('rel', 'stylesheet');
        domAttributes.set('type', 'text/css');
        domAttributes.set('href', '/css/basic.css');

        head.content().add(link);
        // <link rel="stylesheet" type="text/css" href="theme.css">
    }

    // also need to include jsgui client css



});




// Behaviours...
//  (May be like flags?)
//  Selectable
//  Dragable
//  Drop-Zone

// These need to be done in a way to make controls take less code.



jsgui.activate = activate;
jsgui.recursive_dom_iterate = recursive_dom_iterate;
jsgui.recursive_dom_iterate_depth = recursive_dom_iterate_depth;
jsgui.get_window_size = get_window_size;
jsgui.Client_HTML_Document = Client_HTML_Document;
jsgui.desc = desc;
//jsgui.Selection_Scope = Selection_Scope;

// And a Page_Control as well...





jsgui.hover_class = hover_class;
jsgui.group_hover_class = group_hover_class;

//return jsgui;

module.exports = jsgui;

	//}
//);

},{"./controls/advanced/context-menu":46,"./jsgui-html-core":70,"./selection-scope":74}],72:[function(require,module,exports){

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}


define(["./jsgui-html-core"], 
	function(jsgui) {
	    */

var jsgui = require('./jsgui-html-core');

var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control, Class = jsgui.Class;

var fp = jsgui.fp;
var group = jsgui.group;

var get_window_size = jsgui.get_window_size;


// this is the enhanced HTML module.

var Page_Context = Class.extend({
    'init': function (spec) {
        spec = spec || {};
        if (spec.browser_info) {
            this.browser_info = spec.browser_info;
        };

        if (spec.resource_pool) {
            this.resource_pool = spec.resource_pool;
        }

        /*
        this.itemIndex = function(obj, item) {
            var c = -1;
            $.each(obj, function(i, n) {
                if (n === obj) c = i;
            });
            return c;
        };
        */

        this.get_vector_methodology = function () {
            if (this.browser_info.ie) {
                return 'vml';
            } else {
                return 'svg';
            }
        };

        /*
        var qids = [],
            iQid = 1,
            qid = function () {
                var res = 'qid_' + iQid;
                iQid++;
                return res;
            }, typedIds = {}, iTypedIds = {}, typed_id = function (str_type) {
                if (typeof iTypedIds[str_type] === 'undefined') {
                    iTypedIds[str_type] = 1;
                }
                var res = iTypedIds[str_type];
                iTypedIds[str_type] = iTypedIds[str_type] + 1;
                return res;
            };
        this.qid = qid;
        */


        // Copied from Server.Page_Context

        var map_new_ids = {};
        // and have the objects registered within the context too.

        var map_objects = {};

        var _get_new_typed_object_id = function(type_name) {
            if (!is_defined(map_new_ids[type_name])) {
                map_new_ids[type_name] = 0;
            }
            //if (!is_defined(map_new_ids[type_name]) {
            //  map_new_ids[type_name] = 0;
            //}
            var res = type_name + '_' + map_new_ids[type_name];
            map_new_ids[type_name]++;
            return res;
        }

        this.new_id = _get_new_typed_object_id;

        this.set_max_ids = function(map_max_ids) {
            each(map_max_ids, function(i, v) {
                map_new_ids[i] = v + 1;
            })
        }


        /* teIds = {}, iteIds = {}, typed_enhancement_id = function(str_type) {
            return str_type + '_' + typed_enhancement_int(str_type);
        }; */

        //this.teIds = teIds;
        //this.ctrls_by_id = {};
        //this.cl_abs = {}; // abstract controls for the client

        // typed enhancements may be retired. Not actively using them late July 2011 but they could they be within the lower level workings?
        /*
        var typed_enhancement_int = function(str_type) {
            if (typeof iteIds[str_type] === 'undefined') {
                iteIds[str_type] = 0;
            };
            //console.log('');
            //console.log('** str_type ' + str_type);

            var res = iteIds[str_type];
            iteIds[str_type] = iteIds[str_type] + 1;
            return res;
        };

        this._advance_type_id = function(str_type, quantity) {
            if (typeof quantity == 'undefined') quantity = 1;
            iteIds[str_type] = iteIds[str_type] || 0;
            iteIds[str_type] = iteIds[str_type] + quantity;
        };
        */
        /*
        this.ensure_ctrl_id = function(ctrl) {
            ctrl._ = ctrl._ || {};

            //console.log('ensure_ctrl_id ctrl._ ' + stringify(ctrl._));

            if (typeof ctrl._.id == 'undefined') {
                // ctrl._.class_name


                var id = typed_enhancement_id(ctrl._.type_name);
                ctrl._.id = id;
            }
            return ctrl._.id;
        };
        // may be retired... could be behaviours / surfaces in specs.
        this.apply_enhancement_id_spec = function(spec, ctrl) {

            // specifically what does this do?

            // The control will have another DOM attribute set
            // This is only for when composing an enhanced control on the server?
            // jsgui_e_id

            spec.dom = spec.dom || {};
            spec.dom.attributes = spec.dom.attributes || {};
            var tName = ctrl.typeName || 'misc';
            var tei = typed_enhancement_int(tName);
            spec.dom.attributes['jsgui_e_id'] = String(tei);
            return [tName, tei];
        };
        */

        /*
        this.get_spec = function (spec) {
            spec = spec || {};
            spec.page_context = this;
            return spec;
        };
        */

        // Give it the abstract component to make?
        //  So the abstract constructor gets called, and then the abstract instance goes into the make function.

        // contextify - contextifies a recently made item.

        //this.make = function()

        var map_Controls = this.map_Controls = {};
        //  they are constructors

        var map_controls = this.map_controls = {};

        map_Controls['control'] = Control;

    },
    'make': function(abstract_object) {
        if (abstract_object._abstract) {
            //var res = new
            // we need the constructor function.

            var constructor = abstract_object.constructor;
            //console.log('constructor ' + constructor);


            //throw 'stop';

            var aos = abstract_object._spec;

            // could use 'delete?'
            aos.abstract = null;
            aos.context = this;

            //console.log('abstract_object._spec ' + stringify(abstract_object._spec));
            // Not sure it is creating the right constructor.


            var res = new constructor(abstract_object._spec);
            return res;
        } else {
            throw 'Object must be abstract, having ._abstract == true'
        }
    },
    'update_Controls': fp(function(a, sig) {
        //console.log('update_Controls sig ' + sig);
        if (sig == '[o]') {
            // a map of keys and constructors values.
            var o = a[0];
            var map_Controls = this.map_Controls;
            each(o, function(name, Constructor) {
                name = name.toLowerCase();
                //console.log('name ' + name);
                map_Controls[name] = Constructor;
            });

        }
        if (sig == '[s,f]') {
            var name = a[0];
            var Constructor = a[1];
            name = name.toLowerCase();
            //console.log('name ' + name);
            this.map_Controls[name] = Constructor;
        }
    }),

    register_control: function(control) {
        // Put it into the map of IDs

        //console.log('register_control');

        // Not sure how useful registration of all controls will be.
        //  Probably would not be a problem, just it will take memory and CPU cycles.


        var id = control._id();
        //console.log('id', id);

        this.map_controls[id] = control;

    },



    //'set_max_ids': function(map_max_ids) {

    //},

    // begin_drag?

    // can this be plumbed into the recently created events?
    //  we tell it that the drag is starting.

    // Want to tell the page context about beginning different types of drags?

    // Want the page context to be notified whenever a drag begins.
    //  If there is a selection scope then it's dragging those items.

    // Otherwise it could be dragging a control.
    //  Want the control dragging to call events here, so the Page_Context knows where controls are being dragged from / to.




    // This is currently about beginning a drag with a selection scope, but we may just want to be dragging a single control
    //  or controls not to do with a selection_scope.

    // In the case of there being a selection scope, we want to drag around something that represents the selection.

    // With direct drag, or dragging a handle, we don't have this copy of the selection scope.

    // drag_selection_scope_shallow_copy

    // May want to refactror things to have more behaviours and drag abstractions.
    //  However, working more on the style properties first makes more sense.

    // I'll do some more without major further abstractions.
    //

    // Defining the repositioning...
    //  could have that extnedable.

    // then we have the dragging of a control.
    //  Moves the control, does not leave a placeholder.

    // Need to be notified of it?
    //  Control may be dockable.

    // (notify)
    'begin_drag_ctrl': function(e_begin, ctrl) {
        // Though the ctrl should probably go in the event object - maybe need to formalise an API.

        // Different types of drag could be made modular to make builds smaller.
        //  For the moment need to add functionality then work on build size later.





    },

    // Make this an Evented_Class?

    'raise': function(event_name) {
        // need to access the object's bound events.

        //this.__bound_events = this.__bound_events || {};

        // but which context?

        //  the context of the event raiser?

        var a = arguments;
        var a2 = [];
        if (a.length > 1) {
            for (var c = 1; c < a.length; c++) {
                a2.push(a[c]);
            }
        }

        if (this.__bound_events) {
            var corresponding_events = this.__bound_events[event_name];
            for (var c = 0, l = corresponding_events.length; c < l; c++) {
                if (a2.length > 0) {
                    corresponding_events[c].apply(this, a2);
                } else {
                    corresponding_events[c].apply(this);
                }

            }
        }

    },

    // listen function as well.
    //  to listen for an event, it's like add_event_handler.

    // may change that to listen.

    'listen': function(event_name, handler) {
        this.__bound_events = this.__bound_events || {};
        this.__bound_events[event_name] = this.__bound_events[event_name] || [];
        this.__bound_events[event_name].push(handler);
    },


    'move_drag_ctrl': function(e_move, ctrl) {
        // Though the ctrl should probably go in the event object - maybe need to formalise an API.

        // Different types of drag could be made modular to make builds smaller.
        //  For the moment need to add functionality then work on build size later.

        //console.log('move_drag_ctrl ', e_move);

        // maybe tify up the params so there is a move_offset value.
        //  perhaps we dont need it and it makes unnecessary calculation.

        // anyway, use the clientx and client y

        // should maybe measure the client area?
        //  or do that once and do it again on resize?

        // Should be able to get the client size from the Page_Context.
        //  Page_Context is turning out to be very versitile on the client too, nice that it's got similarities on the server
        //  but used very differently.


        // find out where we are within the client window.

        // get_window_size



        var window_size = get_window_size();



        //console.log('Window width = ' + winW);
        //console.log('Window height = ' + winH);

        // find how close the clientX / clientY is to the sides

        // could even have two different distances / ranges for
        //  1) anchor to position
        //  2) anchor to poisition and hide, only showing with mouseover of small region.

        // find how close to edges...

        var from_left, from_top, from_right, from_bottom;



        var clientX = e_move.clientX;
        var clientY = e_move.clientY;

        // see if it's at the top or bottom...
        //  would be nice to have different distances, so halfway to the margin anchors it in a way that it hides itself.



        var margin = 64;

        var is_left = clientX <= margin;
        var is_top = clientY <= margin;

        var is_right = clientX >= window_size[0] - margin;
        var is_bottom = clientY >= window_size[1] - margin;

        // need more generic event binding for objects.

        // listen
        // raise




        // then for the combinations...
        //console.log('is_top ' + is_top);
        if (is_top) {
            // raise the event...

            // then some things will listen for it.
            this.raise('drag-ctrl-top');

        } else if (is_bottom) {
            // raise the event...

            // then some things will listen for it.
            this.raise('drag-ctrl-bottom');

        } else if (is_left) {
            // raise the event...

            // then some things will listen for it.
            this.raise('drag-ctrl-left');

        } else if (is_right) {
            // raise the event...

            // then some things will listen for it.
            this.raise('drag-ctrl-right');

        } else {
            this.raise('drag-ctrl-no-zone');

        }


    },

    'end_drag_ctrl': function(e_end, ctrl) {
        // raise the event...
        this.raise('drag-ctrl-end', e_end, ctrl);


    },

    'drop_ctrl': function(ctrl, zone) {
        //console.log('page context drop control ctrl ' + ctrl);
        //console.log('zone ' + zone);

        if (this.full_window) {
            // anchor the control in that zone.

            this.anchor(ctrl, zone);

            // Basically we need to anchor one control inside another.
            //  The anchor zone will be a part of the grid_9 (or other mechanism)


        }
    },

    'anchor': function(ctrl, zone) {
        console.log('page context anchor ');

        if (this.full_window) {
            var fw = this.full_window;

            // and then does the full window control have a grid_9?

            var g9 = fw.get('grid_9');
            //console.log('g9 ' + g9);

            if (g9) {

                // Then the control will know its anchored.
                //  Dragging that control will unanchor it.

                // anchor the control to a position within that g9.
                //  Basically just put the control in place.
                //  Could do ctrl.anchor(g9, zone);

                // Generally won't be anchoring g9s to other things, but don't want to imply that in the fn name.
                //  g9.anchor_ctrl()

                // may have ctrl.anchor_ctrl, and anchoring is basically putting inside, but it sets it as being
                //  'anchored'.

                g9.anchor_ctrl(ctrl, zone);


            }

            var fwtn = fw.__type_name;
            //console.log('fwtn ' + fwtn);

        }
    },

    // Ending a control drag.
    //  If we are to dock the control somewhere, we have some docking code that does this that can be called separately from the
    //  event.


    // more than notify, this does some UI too.
    'begin_drag_selection_scope': function(e_begin, selection_scope) {

        // drag begin event, then what we are dragging.
        //  we could be dragging a selection scope
        //  just a single control
        //  a copy of a control.

        // going for some specific names to begin with may help.

        // rename this begin_selection_scope_drag





        // different drag modes...

        //  drag-shallow-copy
        //  drag-ctrl

        // drag-shallow-copy-begin

        // I think awareness of the drag mode will help.

        // The selection scope may not be relevant when dragging a window.
        //  However, we could count one item as being selected in the drag?








        console.log('page context drag selection_scope ' + selection_scope);

        var map_selected_controls = selection_scope.map_selected_controls;
        //console.log('map_selected_controls ' + stringify(map_selected_controls));

        // true keys...

        var arr_selected = jsgui.true_vals(map_selected_controls);
        console.log('arr_selected.length ' + arr_selected.length);

        // make shallow copies of these selected controls.

        var shallow_copies_selected = jsgui.shallow_copy(arr_selected);


        this.drag_selected = arr_selected;

        var ctrl_abs = this.make(Control({

        }));

        ctrl_abs.add(shallow_copies_selected);

        var screenX = e_begin.screenX;

        //console.log('screenX ' + screenX);
        var screenY = e_begin.screenY;

        var clientX = e_begin.clientX;
        var clientY = e_begin.clientY;


        //ctrl_abs.set('dom.attributes.style.position', 'absolute');
        //ctrl_abs.set('dom.attributes.style.height', '200px');
        //ctrl_abs.set('dom.attributes.style.width', '320px');
        //ctrl_abs.set('dom.attributes.style.background-color', '#ABCDEF');

        // Could set its class or have better way of doing an inline style.

        ctrl_abs.set('dom.attributes.style', 'position: absolute; left: ' + clientX + 'px; top:' + clientY + 'px; height: 200px; width: 320px; background-color: #EEEEEE');
        var html = ctrl_abs.all_html_render();

        var el_ctr = document.createElement('div');
        el_ctr.innerHTML = html;

        var el_abs = el_ctr.childNodes[0];

        document.body.appendChild(el_abs);

        ctrl_abs.set('el', el_abs);

        // within the context, we can make new controls and put them in the document.
        // an absolutely positioned div.

        this.ctrl_abs = ctrl_abs;


        //throw 'stop';
    },



    'move_drag_selection_scope': function(e_move) {
        console.log('page context move_drag_selection_scope');

        // Don't want this to be the case with all drag moves...
        //  We may be moving the actual item.




        var clientX = e_move.clientX;
        var clientY = e_move.clientY;

        // definitely would be useful to have the abstraction that covers individual style properties.
        var style = 'position: absolute; left: ' + clientX + 'px; top:' + clientY + 'px; height: 200px; width: 320px; background-color: #EEEEEE'
        //console.log('style ' + style);
        var el = this.ctrl_abs.get('el');
        //console.log('el ' + el);
        el.style.cssText = style;


    },
    'end_drag_selection_scope': function(e_end) {
        if (this.ctrl_abs) {
            this.ctrl_abs.remove();
            this.ctrl_abs = null;
        }
    },

    'ensure_dock_placeholder': function(pos) {
        //console.log('Page Context ensure_dock_placeholder ' + pos);

        var fw = this.full_window;

        if (fw) {
            fw.ensure_dock_placeholder(pos);
        }
    }

});

module.exports = Page_Context;
		//return Page_Context;
	//}
//);





},{"./jsgui-html-core":70}],73:[function(require,module,exports){
// object viewer

/*
if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}
*/


// Need to sort out how the dependencies link.


// Does html require resource?
// html-enh require resource?

// Resource should be a part of the html client, but not the html system in general.

//throw 'stop';

// May be a circular reference here.
//  Within one of the modules that gets loaded.


// not so sure this needs to incluse the page context.

var jsgui = require('./jsgui-html-enh');

//console.log('jsgui', jsgui);
//throw 'stop2';
var Page_Context = require('./jsgui-html-page-context');

// Not using the old Page_Control at the moment.
//  It seems as if the docking behaviour would better be made some kind of addin / mixin.



//var Page_Control = require('./controls/page/page-control');


//define(["./jsgui-html-enh", "./jsgui-html-page-context", "./controls/page/page-control"],
	//function(jsgui, Page_Context, Page_Control) {
		
var stringify = jsgui.stringify, each = jsgui.each, tof = jsgui.tof, is_defined = jsgui.is_defined;
var Control = jsgui.Control;

var fp = jsgui.fp;
var group = jsgui.group;

// Client-side resource pool...
//  That would be very useful for accessing resources on the server.
//   Would have the server's URL, and a map (maybe) of what resources are on the server.

// This would be some kind of request broker.
//  It may ask the server what resources are on it, but the server could send this info (maybe just basic info)
//  along when the client-side resource pool is started up.

// Deliver that to jsgui-html-client?


//console.log('Page_Context', Page_Context);
//throw 'stop';
//throw 'stop';

jsgui.Page_Context = Page_Context;
//jsgui.Page_Control = Page_Control;
// this is the enhanced HTML module.


//return jsgui;

module.exports = jsgui;
	//}
//);
},{"./jsgui-html-enh":71,"./jsgui-html-page-context":72}],74:[function(require,module,exports){
/**
 * Created by James on 07/02/2015.
 */

var jsgui = require('./jsgui-html-core');
var each = jsgui.eac;
var tof = jsgui.tof;

var Selection_Scope = jsgui.Data_Object.extend({
//var Selection_Scope = jsgui.Class.extend({
    'init': function(spec) {
        // A selection scope belongs to a context
        //  should do
        // has its control.
        // various controls point to it.
        // has various methods to do with selecting and selecting objects


        // Could probably do these as fields.

        // Selection scope should also keep track of its context and its id.
        if (spec.context) this.context = spec.context;
        if (typeof spec.id !== 'undefined') this.is = spec.id;


        if (spec.control) this.control = spec.control;
        // Needs to be a list / map of all controls that are selected.
        // map of selected controls by id?
        //  also need to be able to go through the list of controls.
        this.map_selected_controls = {};
        // set the items by their id to point to the control.
        //  the control will know its index within its parent, can look up more info there.
    },
    'select_only': function(ctrl) {
        //console.log('Selection_Scope select_only ' + ctrl._id());

        // remove the selected class from all that are currently selected (except the target ctrl).
        //console.log('this.map_selected_controls ', this.map_selected_controls);


        // And need to trigger deselect where appropriate.

        // But not if the control was previously selected.
        var currently_selected;
        var count_deselected = 0;

        var selected;
        each(this.map_selected_controls, function(v, i) {

            if (v && v !== ctrl) {
                selected = v.get('selected').value();
                //console.log('selected', selected);
                //console.log('tof selected', tof(selected));

                if (selected) {
                    v.set('selected', false);
                    v.remove_class('selected');
                    v.trigger('deselect');
                    count_deselected++;
                }

                //console.log('should have deselcted ' + v._id())
            }
            if (v === ctrl) {
              currently_selected = v.get('selected').value();
            }

        });

        this.map_selected_controls = {};

        this.map_selected_controls[ctrl._id()] = ctrl;

        // and then tell the control that it's selected.

        // could possibly set a CSS flag.

        if (!currently_selected) {
          ctrl.set('selected', true);
          ctrl.trigger('select');

          ctrl.add_class('selected');
        }


        if (count_deselected > 0 &! currently_selected) {
          this.trigger('change');
        }





    },

    // deselect controls internal to a control.

    // When selecting a control, we want to make it so that controls inside it, in the same selection context are not selected.
    //  The Selection Scope does a fair bit of the management of the selections.

    'deselect_ctrl_content': function(ctrl) {
        var cs = ctrl.get('selection_scope');
        var msc = this.map_selected_controls;
        var that = this;
        ctrl.get('content').each(function(i, v) {
            var tv = tof(v);
            //console.log('tv ' + tv);

            if (tv == 'control') {

                // TODO: Trigger 'deselect' events when selection changes to negitive

                v.remove_class('selected');
                v.set('selected', false);

                var id = v._id();
                if (msc[id]) msc[id] = false;

                that.deselect_ctrl_content(v);
            }
        })
        //console.log('msc ', msc);
        this.trigger('change');
        //throw 'stop';
    },



    'select_toggle': function(ctrl) {
        //console.log('');
        //console.log('select_toggle');
        var sel = ctrl.get('selected').value();
        //console.log('tof(sel) ' + tof(sel));

        var msc = this.map_selected_controls;
        var id = ctrl._id();
        if (!sel) {


            var sel_anc = ctrl.find_selected_ancestor_in_scope();

            if (sel_anc) {
                console.log('1) not selecting because a selected ancestor in the selection scope has been found.');
            } else {


                ctrl.set('selected', true);
                // Check for a selected ancestor control in the scope.

                this.deselect_ctrl_content(ctrl);

                //  can try an iterate_ancestors function.

                //  iterate_ancestors_in_selection_scope
                //   looking for selected ancestor.

                // find_selected_ancestor_in_scope

                ctrl.add_class('selected');
                msc[id] = ctrl;
            }


        } else {
            var tsel = tof(sel);
            //console.log('tsel ' + (tsel))
            if (tsel == 'data_value') {
                var val = sel.get();
                //console.log('val ' + val);
                if (val) {
                    ctrl.remove_class('selected');
                    ctrl.set('selected', false);
                    msc[id] = false;
                } else {
                    var sel_anc = ctrl.find_selected_ancestor_in_scope();

                    if (sel_anc) {
                        console.log('2) not selecting because a selected ancestor in the selection scope has been found.');
                    } else {
                        ctrl.set('selected', true);
                        // Check for a selected ancestor control in the scope.
                        this.deselect_ctrl_content(ctrl);
                        //  can try an iterate_ancestors function.

                        //  iterate_ancestors_in_selection_scope
                        //   looking for selected ancestor.

                        // find_selected_ancestor_in_scope

                        ctrl.add_class('selected');
                        msc[id] = ctrl;
                    }
                }
                //
            }
            if (tsel == 'boolean') {

                if (sel) {
                    ctrl.remove_class('selected');
                    ctrl.set('selected', false);
                    msc[id] = false;
                } else {
                    var sel_anc = ctrl.find_selected_ancestor_in_scope();

                    if (sel_anc) {
                        console.log('2) not selecting because a selected ancestor in the selection scope has been found.');
                    } else {
                        this.deselect_ctrl_content(ctrl);
                        ctrl.set('selected', true);

                        // Check for a selected ancestor control in the scope.

                        //  can try an iterate_ancestors function.

                        //  iterate_ancestors_in_selection_scope
                        //   looking for selected ancestor.

                        // find_selected_ancestor_in_scope

                        ctrl.add_class('selected');
                        msc[id] = ctrl;
                    }
                }

            }
        }
        this.trigger('change');
        //throw 'stop';

    }
});

module.exports = Selection_Scope;

},{"./jsgui-html-core":70}]},{},[23])
//# sourceMappingURL=data:application/json;base64,
